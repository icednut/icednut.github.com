<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>RxJava를 이용하여 크기를 가늠할 수 없는 Iterable에서 데이터 읽고 처리하기</title>
      <link href="/2019/01/31/20190131-rxjava-infinite-iterable/"/>
      <url>/2019/01/31/20190131-rxjava-infinite-iterable/</url>
      
        <content type="html"><![CDATA[<p>얼마전에 작성한 Java Batch 프로그램 중에 이런 요구사항이 있었다.</p><ul><li>HBase 특정 테이블에서 대량의 데이터를 조회한다.</li><li>조회한 데이터를 Kafka로 Producing한다.</li></ul><p>‘Java로 하지말고 다른 오픈소스 도구를 쓰면 되는거 아냐?’ 라고 할 수도 있겠지만 여러가지 제약사항 때문에 저 문제를 Java로 작성해야 한다고 하자. 이 문제를 어떻게 풀까?</p><p>일단 문제를 풀기 전에 Java에서 HBase 조회하는 방법을 간략하게 정리하자. 자세한 설명은 생략하고 일단 이렇게 하면 HBase에서 데이터를 조회해 올 수 있겠구나 생각하고 넘어가자.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>icednut<span class="token punctuation">.</span>HBaseDataSourceManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ResultScanner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Scan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Table<span class="token punctuation">;</span>Table table <span class="token operator">=</span> HBaseDataSourceManager<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span>MY_TABLE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>Scan scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span>ResultScanner scanner <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Result result <span class="token operator">:</span> scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1</span>        <span class="token comment" spellcheck="true">// result</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HBase Java Client 사용하여 아래와 같이 HBase DataSource 객체만 있으면 Hbase 테이블 관련 인스턴스와 그 테이블을 스캐닝 할 수 있는 스캐너(ResultScanner) 인스턴스를 통해 데이터를 조회할 수 있다.</li><li>주석 1이라고 표시한 부분을 살펴보면 scanner는 Iterable의 구현체이기 때문에 주석1과 같이 for-each 구문이 가능하다.</li></ul><p><br></p><p><br></p><h3 id="방법1-그냥-루프-돌면서-읽는-족족-보내기"><a href="#방법1-그냥-루프-돌면서-읽는-족족-보내기" class="headerlink" title="방법1. 그냥 루프 돌면서 읽는 족족 보내기"></a>방법1. 그냥 루프 돌면서 읽는 족족 보내기</h3><p>일단 드는 생각은 위 코드 기반으로 result 인스턴스에서 데이터를 읽어서 카프카로 바로 보낼 것이다. 이 생각을 코드로 옮기면 다음과 같다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">(</span>ResultScanner scanner <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 방법 1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Result result <span class="token operator">:</span> scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String targetDataStr <span class="token operator">=</span> Bytes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>COLUMN_FAMILY<span class="token punctuation">,</span> MY_TARGET_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kafkaClient<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>targetDataStr<span class="token punctuation">,</span> TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그러나 여기에는 이슈가 하나 있다.</p><ul><li>scanner에서 읽는 족족 result를 전송하고 있는데 이게 만약 데이터양이 대량이라면?</li><li>대량의 데이터를 카프카로 프로듀싱하면 네트워크 트래픽이 폭주하지 않을까? </li><li>혹은 카프카 토픽을 컨슈밍하고 있는 앱에서 대량의 데이터를 받으면 터질꺼 같다. 안터지게 좀 대량으로 확 안보내고 싶은데?</li></ul><p>뭐 물론 네트워크 트래픽을 신경 안써도 되는 환경이라면 위 방법대로 읽는 족족 보내도 상관없을거 같다. 하지만 컨슈밍하는 앱에서 대량의 데이터를 못받아내면 어떻게 할 것인가? </p><h3 id="방법2-루프-돌면서-보내되-조금씩-모아서-보내자"><a href="#방법2-루프-돌면서-보내되-조금씩-모아서-보내자" class="headerlink" title="방법2. 루프 돌면서 보내되, 조금씩 모아서 보내자."></a>방법2. 루프 돌면서 보내되, 조금씩 모아서 보내자.</h3><p>위 코드를 살짝만 마사지 하면 될거 같다! <code>KafkaClient.produce(String data, String topic)</code>의 코드에서 첫 번째 파라미터를 <code>String</code> 한 개만 받는게 아니라 <code>List&lt;String&gt;</code> 과 같이 여러 개를 받아서 처리하게 하면 어떨까?</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">(</span>ResultScanner scanner <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 방법 2</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Result result <span class="token operator">:</span> scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buffer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>COLUMN_FAMILY<span class="token punctuation">,</span> MY_TARGET_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> LIMIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            kafkaClient<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그러나 안타깝게도 우리의 <code>KafkaClient</code>에는 <code>kafkaClient.produce(List&lt;String&gt; datas, String topic)</code>과 같은 메소드가 없다고 치자. 그럼 또 buffer를 루프 돌려서 보내면 되지 않을까?</p><p>또 buffer의 내용을 다 보내고 난 후 컨슈머 앱이 처리하는 것을 기다려주고 싶다. 그럼 <code>Thread.sleep</code>을 쓰면 되나?</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">(</span>ResultScanner scanner <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 방법 2</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Result result <span class="token operator">:</span> scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buffer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>COLUMN_FAMILY<span class="token punctuation">,</span> MY_TARGET_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> LIMIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String data <span class="token operator">:</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                kafkaClient<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>SLEEP_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="방법2-2-모아서-보내는거-좀-더-깔끔한-방법-없을까-with-RxJava"><a href="#방법2-2-모아서-보내는거-좀-더-깔끔한-방법-없을까-with-RxJava" class="headerlink" title="방법2-2. 모아서 보내는거 좀 더 깔끔한 방법 없을까? (with RxJava)"></a>방법2-2. 모아서 보내는거 좀 더 깔끔한 방법 없을까? (with RxJava)</h3><p>위 방법도 좋은데 for 루프도 두 번 작성한거와 <code>Thread.sleep</code> 코드를 넣은게 좀 마음에 안든다. 같은 방법을 좀 깔끔하게 처리할 수는 없을까?</p><p>이럴 때  RxJava를 쓰면 좋을거 같아서 RxJava를 사용했다. RxJava에서는 Observable와 buffer 메소드를 통해 끝을 알 수없는 Iterable에서 데이터를 가져와서 모았다가 subscribe하는 방법을 쓰면 될 것 같았다. 이 개념만 코딩하자면 다음과 같다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> iterator<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">blockingSubscribe</span><span class="token punctuation">(</span>result <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"**** send log count: {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 예제코드는 끝을 알 수 없는 무한대 iterator로 부터 5개씩 끊어서 subscribe하는 것을 표현하고자 했다. <code>blockingSubscribe</code> 메소드를 쓴 이유는 <code>subscribe</code> 메소드는 논블로킹 메소드이기 때문에 해당 메소드가 호출되면 바로 다음 줄로 넘어가기 때문이다. </p><p>위 iterator는 무한대 크기이기 때문에 <code>take</code> 메소드를 통해서 일부만 처리해보자.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> iterator<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">blockingSubscribe</span><span class="token punctuation">(</span>result <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"**** send log count: {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>여기에 각 버퍼 윈도우 처리 별로 텀(5초)을 둬서 처리하고 싶다. (왜? 받는 쪽에서 처리할 시간을 벌기 위해서 텀을 두고 싶다고 하자). 그럴 경우 아래와 같이 <code>buffer</code> 메소드 다음에 생성되는 item에 대해 5초 쉬는 observable 처리를 덧붙인다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> iterator<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">blockingSubscribe</span><span class="token punctuation">(</span>result <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"**** send log count: {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RxJava에 대한 자세한 내용은 다음에 다시 다뤄보자. 혹은 아래 링크를 참조하여 RxJava가 이런거구나 파악하는거도 좋을거 같다.</p><ul><li><a href="https://ahea.wordpress.com/2017/02/13/rxjava/" target="_blank" rel="noopener">https://ahea.wordpress.com/2017/02/13/rxjava/</a></li></ul><p>그럼 위 예제코드를 통해 앞에서 진행했던 요구사항 구현체에 반영해보자.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Flowable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TimeZone<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">(</span>ResultScanner scanner <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Flowable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>scanner<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> Flowable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">blockingSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Result<span class="token operator">></span> results<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Result result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String targetDataStr <span class="token operator">=</span> Bytes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>COLUMN_FAMILY<span class="token punctuation">,</span> MY_TARGET_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                kafkaClient<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>targetDataStr<span class="token punctuation">,</span> TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        throwable <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>갑자기 <code>Observable</code>에서 <code>Flowable</code>을 바꾼거는 일단 둘 다 비슷한 녀석이니 무시하고 넘어가자 (<code>Flowable</code>에는 Backpressure 기능이 있어서 나중에 이 기능을 적용하려고 쓰긴 했다).</p><p>그런데 어찌된 일인지 <code>blockingSubscribe</code>을 호출하는 순간 위 코드를 실행하면 1000건씩 끊어서 처리하지 않고 처음부터 계속 데이터를 모으고 있다. 어찌된 일일까?</p><p>일단 결과만 놓고 보자면 buffer을 통해 생성된 item에 대해 한 번 더 <code>Observable</code>이나 <code>Flowable</code> 을 변환해주면 이 문제는 해결이 된다. (왜 그럴까? 이건 시간 관계상 나중에 보충하자)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Flowable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TimeZone<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">(</span>ResultScanner scanner <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getScanner</span><span class="token punctuation">(</span>scan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Flowable<span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>scanner<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>results <span class="token operator">-</span><span class="token operator">></span> Flowable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> Flowable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">blockingSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Result<span class="token operator">></span> results<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Result result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String targetDataStr <span class="token operator">=</span> Bytes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>COLUMN_FAMILY<span class="token punctuation">,</span> MY_TARGET_COLUMN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                kafkaClient<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>targetDataStr<span class="token punctuation">,</span> TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        throwable <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이렇게 하면 위와 같은 <code>Flowable</code>에  <code>blockingSubscribe</code>를 호출해도 데이터를 다 끌어 모을 때까지 블로킹이 되지 않고 1000건씩 끊어서 처리 후 5초 대기 그리고 그 다음 처리라는 동작 수행을 볼 수 있다.</p><h3 id="다음-할-일"><a href="#다음-할-일" class="headerlink" title="다음 할 일"></a>다음 할 일</h3><p>여기서는 RxJava를 통해 데이터 배출을 특정 건수 만큼 그리고 특정 텀을 가지고 진행하는 것을 해보고 싶었다. 다음 할 일으로는 RxJava를 좀 더 잘 이해하여 여러 가지 상황에서 알맞게 사용해보자!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day07 - 속성 기반 검사</title>
      <link href="/2019/01/29/20190129-scala-and-functional-programming-day07/"/>
      <url>/2019/01/29/20190129-scala-and-functional-programming-day07/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 8장</p><h2 id="Chpater-08-프로퍼티-기반-테스트"><a href="#Chpater-08-프로퍼티-기반-테스트" class="headerlink" title="Chpater 08. 프로퍼티 기반 테스트"></a>Chpater 08. 프로퍼티 기반 테스트</h2><p>이번 챕터에서 다룰 내용</p><ul><li>ScalaCheck라는 프로퍼티 기반 테스트 라이브러리를 개발해보자.</li><li>7장에서 배운 결과물을 프로퍼티 기반 테스트해보기.</li><li>ScalaCheck: <a href="https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md" target="_blank" rel="noopener">https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md</a></li></ul><p><br></p><p><br></p><h3 id="프로퍼티-기반-테스트-property-based-test-가-뭘까"><a href="#프로퍼티-기반-테스트-property-based-test-가-뭘까" class="headerlink" title="프로퍼티 기반 테스트(property-based test)가 뭘까?"></a>프로퍼티 기반 테스트(property-based test)가 뭘까?</h3><h4 id="프로퍼티-기반-테스트와-전통적인-유닛-테스트의-차이"><a href="#프로퍼티-기반-테스트와-전통적인-유닛-테스트의-차이" class="headerlink" title="프로퍼티 기반 테스트와 전통적인 유닛 테스트의 차이"></a>프로퍼티 기반 테스트와 전통적인 유닛 테스트의 차이</h4><p>만약 타입이 List[Int]인 list1과 list2가 있다고 하자.</p><p>이에 대해 <code>list1의 사이즈와 list2 사이즈를 더한 값은 list1, list2 들을 합한 리스트의 사이즈와 같다</code> 라는 테스트 문제를 코딩한다고 하면 어떻게 하겠는가?</p><pre><code>- 임의의 list1과 list2를 만든다.- list1.size + list2.size == (list1 ::: list2).size 라고 코딩하고 돌려본다.- 성공한다.</code></pre><p>위와 같이 테스트 유닛을 개발할 것이다. 하지만 만약 <code>list1.size + list2.size == (list1 ::: list2).size</code> 라는 predicate 구문을 만족하지 않는 데이터셋이 존재한다고 가정했을 때 이를 어떻게 증명할 것인가? 아마도 list1, list2라는 임의의 리스트를 만드는 것을 또 코딩해야 할텐데 좀 번거롭지 않은가? 난 단지 predicate 구문만 맞는지 증명하고 싶을 뿐인데…</p><p><u>프로퍼티 기반 검사를 적용하면 임의의 테스트 데이터를 생성하는 부분은 누군가에게 위임하고 개발자는 predicate 구문에만 집중하면 된다.</u> </p><p>프로퍼티 기반 테스트란 뭔지 정리하자면, </p><ul><li>특정 메소드나 클래스에 대해 자동으로 테스트 기반 데이터를 랜덤으로 생성하고, 그 데이터로 테스트하는 테스트 기법을 말한다.</li><li>책에서는 프로그램 행동 방식의 서술(Predicate)과 그런 행동 방식을 검사하는 Test Case의 생성을 분리하는 테스트 기법이라고 설명한다.</li></ul><p>스칼라에서 property-based testing의 구현체로는 ScalaCheck가 있으며 이 라이브러리를 사용하면 프로퍼티 기반의 테스트를 손쉽게 진행할 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> org<span class="token punctuation">.</span>scalacheck<span class="token punctuation">.</span>Prop<span class="token punctuation">.</span>forAll<span class="token keyword">import</span> org<span class="token punctuation">.</span>scalacheck<span class="token punctuation">.</span><span class="token punctuation">{</span>Gen<span class="token punctuation">,</span> Properties<span class="token punctuation">}</span><span class="token keyword">object</span> ScalaCheckExercise <span class="token keyword">extends</span> Properties<span class="token punctuation">(</span><span class="token string">"ScalaCheck Exercise"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">val</span> intList <span class="token operator">=</span> Gen<span class="token punctuation">.</span>listOf<span class="token punctuation">(</span>Gen<span class="token punctuation">.</span>choose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> prop <span class="token operator">=</span> forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>reverse <span class="token operator">==</span> ns<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>headOption <span class="token operator">==</span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>lastOption<span class="token punctuation">)</span>  <span class="token keyword">val</span> failingProp <span class="token operator">=</span> forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>reverse <span class="token operator">==</span> ns<span class="token punctuation">)</span>  prop<span class="token punctuation">.</span>check  failingProp<span class="token punctuation">.</span>check<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>첫 느낌은 Java의 Cucumber와 비슷하지만 뭔가 더 세부적이고 테스트 데이터셋을 무작위로 생성(<code>Gen.list</code>, <code>Gen.choose</code>)하는 것이 닮은듯 닮지 않았다.</p><h4 id="프로퍼티-기반-테스트의-특징"><a href="#프로퍼티-기반-테스트의-특징" class="headerlink" title="프로퍼티 기반 테스트의 특징"></a>프로퍼티 기반 테스트의 특징</h4><ul><li>property-based testing에서 property는 테스트 데이터셋과 테스트할 predicate 구문을 통해 만든 테스트 대상을 말한다. </li><li>ex: <code>forAll(intList)(ns =&gt; ns.reverse.reverse == ns)</code></li><li><code>forAll</code>이라는 커링을 실행하면 <code>property 인스턴스</code>를 반환한다.<ul><li>정확하진 않지만 일단 위의 코드를 바탕으로 <code>property</code> 객체라고 추측하자.</li></ul></li><li>이 <code>property</code> 인스턴스에는 <code>check</code>라는 메소드를 갖고 있다.</li><li><code>check</code> 메소드가 호출되면 테스트 데이터 생성기(<code>Gen</code>)에서 랜덤으로 생성한 데이터셋(<code>intList</code>)을 바탕으로 predicate 람다를 실행하여 그것이 모두 참인지를 판단한다.</li><li>만약 거짓이 발생하면 바로 테스트 종료하고 결과를 출력한다.</li></ul><p>위 특징을 염두하여 예제코드를 실행하면 다음과 같은 결과가 나온다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// prop.check</span><span class="token operator">+</span> OK<span class="token punctuation">,</span> passed <span class="token number">100</span> tests<span class="token punctuation">.</span><span class="token comment" spellcheck="true">// failingProp.check</span><span class="token operator">!</span> Falsified after <span class="token number">5</span> passed tests<span class="token punctuation">.</span><span class="token operator">></span> ARG_0<span class="token operator">:</span> List<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token operator">></span> ARG_0_ORIGINAL<span class="token operator">:</span> List<span class="token punctuation">(</span><span class="token string">"93"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"70"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>앞에서 개발한 비동기 합산 함수인 <code>sum: List[Int]</code>에 프로퍼티 기반 테스트를 적용하면 어떨까?</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 목록을 뒤집어서 합해도 결과는 같아야 한다.</span><span class="token keyword">val</span> intList1 <span class="token operator">=</span> Gen<span class="token punctuation">.</span>listOf<span class="token punctuation">(</span>Gen<span class="token punctuation">.</span>choose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> prop1 <span class="token operator">=</span> forAll<span class="token punctuation">(</span>intList1<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> sum<span class="token punctuation">(</span>ns<span class="token punctuation">.</span>reverse<span class="token punctuation">)</span> <span class="token operator">==</span> sum<span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 목록의 모든 요소가 같아도 원하는 합산 결과가 나와야 한다.</span><span class="token keyword">val</span> intList2 <span class="token operator">=</span> Gen<span class="token punctuation">.</span>listOf<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">val</span> prop2 <span class="token operator">=</span> forAll<span class="token punctuation">(</span>intList2<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> sum<span class="token punctuation">(</span>ns<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이번 챕터에서는 ScalaCheck을 직접 개발해보자.</p><ul><li>ScalaCheck을 쓰는 방법을 알아가는게 아니라 실제로 ScalaCheck을 개발한다.</li><li>처음부터 개발하라고 하면 막막하니깐 위에 적은 <code>ScalaCheckExercise</code> 라는 실행 코드 예제를 기반으로 ScalaCheck을 개발하자.</li></ul><h3 id="ScalaCheck-개발-시작"><a href="#ScalaCheck-개발-시작" class="headerlink" title="ScalaCheck 개발 시작!"></a>ScalaCheck 개발 시작!</h3><p>앞의 예제코드를 하나하나씩 뜯어서 살펴보면서 영감을 얻도록 하자!</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> intList <span class="token operator">=</span> Gen<span class="token punctuation">.</span>listOf<span class="token punctuation">(</span>Gen<span class="token punctuation">.</span>choose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> prop <span class="token operator">=</span>     forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>reverse <span class="token operator">==</span> ns<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>headOption <span class="token operator">==</span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>lastOption<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Gen-시그니처-작성"><a href="#Gen-시그니처-작성" class="headerlink" title="Gen 시그니처 작성"></a>Gen 시그니처 작성</h4><p>첫 번째 줄을 가만히 살펴보면 <code>Gen.listOf()</code> 와 <code>Gen.choose()</code>는 뭔가를 반환하고 있다는 것을 짐작할 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> intList <span class="token operator">=</span> Gen<span class="token punctuation">.</span>listOf<span class="token punctuation">(</span>Gen<span class="token punctuation">.</span>choose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>추측컨데 세 번째 줄에서 forAll 함수 호출부분을 보면 <code>Gen.listOf</code>로 만든 리스트를 가지고 predicate를 평가하고 있는 것을 보면 아마도 <code>Gen.listOf</code>의 결과물은 테스트 데이터(여기서는 List[Int])를 생성하는 생성기 인스턴스임을 짐작할 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> listOf<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Gen<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>그런데 <code>listOf</code>의 파라미터로 <code>Gen.choose(0, 100)</code>의 결과를 전달하는 것으로 보아 <code>Gen.choose(0, 100)</code>도 뭔가 데이터 생성기를 반환한다고 짐작할 수 있다. 아마도 <code>Gen[List[Int]]이라는 리스트</code>를 생성하기 위해서 <code>List[Int]</code> 리스트에 들어갈 데이터를 임의로 생성하기 위한 시드 데이터 생성기를 반환하지 않을까 짐작해본다. </p><p>고로 <code>Gen.choose()</code>가 반환하는 데이터 생성기는 Gen[Int]가 아닐까?</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> listOf<span class="token punctuation">(</span>a<span class="token operator">:</span> Gen<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Gen<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 일반화하면</span><span class="token keyword">def</span> listOf<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Gen<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Gen<span class="token punctuation">[</span>List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>잠깐 생각해볼 문제</strong></p><ul><li>위의 테스트 데이터 생성기 함수 <code>listOf</code>는 리스트의 크기를 정하지는 않았다. 왜 그럴까?</li><li>만약 리스트의 크기를 정하게 된다면 그 크기만큼의 리스트로 predicate를 평가하게 될텐데 문제 되진 않을까?</li><li>책에서는 <code>Gen[List[A]]</code>의 크기를 정하게 된다면 유연한 테스트 검사가 될 수 없다고 한다. 왜 그럴까? (p.162)</li></ul></blockquote><h4 id="forAll-시그니처-작성"><a href="#forAll-시그니처-작성" class="headerlink" title="forAll 시그니처 작성"></a>forAll 시그니처 작성</h4><p>그 다음으로 넘어가서 forAll 함수 사용 코드를 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> prop <span class="token operator">=</span>     forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>reverse <span class="token operator">==</span> ns<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>headOption <span class="token operator">==</span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>lastOption<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>forAll 함수가 <code>Gen[List[Int]]</code>를 받아서 함수를 반환했는데 이 함수에는 predicate를 평가하는 함수이다. 추측한 내용을 바탕으로 forAll 시그니처를 작성하면 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> forAll<span class="token punctuation">(</span>a<span class="token operator">:</span> Gen<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Prop<span class="token comment" spellcheck="true">// 일반화하면</span><span class="token keyword">def</span> forAll<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Gen<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Prop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Property-시그니처-작성"><a href="#Property-시그니처-작성" class="headerlink" title="Property 시그니처 작성"></a>Property 시그니처 작성</h4><p>위의 forAll 함수의 반환 결과물을 보면 뭔가 인스턴스를 반환하고 있는 것을 볼 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> prop <span class="token operator">=</span>     forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>reverse <span class="token operator">==</span> ns<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>     forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>headOption <span class="token operator">==</span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>lastOption<span class="token punctuation">)</span>prop<span class="token punctuation">.</span>check<span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">// prop.check의 테스트 결과 출력</span><span class="token operator">+</span> OK<span class="token punctuation">,</span> passed <span class="token number">100</span> tests<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그런데 <code>&amp;&amp;</code>라는 함수와 <code>check</code>라는 함수를 호출하는 것으로 보아 prop 인스턴스의 클래스는 <code>&amp;&amp;</code>와 <code>check</code> 함수를 멤버로 갖고 있을 것 같다. 일단 클래스 보다는 나중에 확장성을 위해서 trait으로 선언하자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">def</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Prop<span class="token punctuation">)</span><span class="token operator">:</span> Prop <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>    <span class="token keyword">def</span> check<span class="token operator">:</span> <span class="token builtin">Unit</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>여지껏 해왔던 방식대로 제일 나중에 실행하는 함수부터 작성해보자. 이렇게 하는 이유는</p><ul><li>그 함수를 작성하려고 했을 때 어떻게 구현해야 할지를 고민하면서 뭐가 필요한지를 고민하게 된다.</li><li>말이 쉽지 처음엔 엄청 막막할 것이다. 막막함을 없애기 위해 생각하는 힘을 길러야 할 것 같다.</li></ul><h4 id="Prop의-멤버-함수-구현-고민해보기"><a href="#Prop의-멤버-함수-구현-고민해보기" class="headerlink" title="Prop의 멤버 함수 구현 고민해보기"></a>Prop의 멤버 함수 구현 고민해보기</h4><h5 id="Prop-check"><a href="#Prop-check" class="headerlink" title="Prop.check"></a>Prop.check</h5><p><code>prop.check</code>을 호출하면 콘솔에 테스트 결과를 출력하고 있다. 이것은 부수효과이다. 일단 부수효과가 있다는 것을 염두해두자.</p><h5 id="Prop-amp-amp"><a href="#Prop-amp-amp" class="headerlink" title="Prop.&amp;&amp;"></a>Prop.&amp;&amp;</h5><p><code>&amp;&amp;</code> 함수는 또다른 prop을 합성하여 새로운 합성 결과물 Prop을 내놓는 함수이다. 그 근거는 아래 함수 실행코드이다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> prop1 <span class="token operator">=</span> forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>reverse <span class="token operator">==</span> ns<span class="token punctuation">)</span><span class="token keyword">val</span> prop2 <span class="token operator">=</span> forAll<span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">(</span>ns <span class="token keyword">=></span> ns<span class="token punctuation">.</span>headOption <span class="token operator">==</span> ns<span class="token punctuation">.</span>reverse<span class="token punctuation">.</span>lastOption<span class="token punctuation">)</span><span class="token keyword">val</span> prop <span class="token operator">=</span> prop1 <span class="token operator">&amp;&amp;</span> prop2prop<span class="token punctuation">.</span>check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>forAll이 내놓은 prop을 <code>&amp;&amp;</code>로 합성하면 prop들, 즉 합성한 prop이 모두 참인지를 check 함수를 호출하면 검사하게 될 것이다.</p><p>사실 여기서 갈림길이 나오는데 책과 내 생각은 이렇다.</p><ul><li>책: 다시 <code>Prop.check</code> 구현 생각해보기</li><li>나: <code>forAll</code> 구현 생각해보기</li></ul><p>내 생각엔 forAll 구현을 생각해봄으로써 <code>&amp;&amp;</code>의 구현을 이끌어내고 더 나아가 <code>check</code>까지 진행할 수 있지 않을까? 하는 기대가 있다. (하지만 여기서는 책을 따라가자 ㅜㅜ)</p><h5 id="다시-Prop-check으로"><a href="#다시-Prop-check으로" class="headerlink" title="다시 Prop.check으로"></a>다시 Prop.check으로</h5><p><strong>Q1</strong>: 만약 <code>prop.check</code> 호출 시  <code>&amp;&amp;</code>로 합성한 모든 prop들( <code>prop1</code>, <code>prop2</code>)을 따로따로 테스트 실행한다면?</p><pre class="line-numbers language-scala"><code class="language-scala">prop<span class="token punctuation">.</span>check<span class="token punctuation">(</span>prop1 <span class="token operator">&amp;&amp;</span> prop2<span class="token punctuation">)</span><span class="token punctuation">.</span>checkprop1<span class="token punctuation">.</span>check <span class="token operator">&amp;&amp;</span> prop2<span class="token punctuation">.</span>check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>잠깐!! 우선 위와 같은 질문을 하기 전에 전제조건이 있다. <code>Prop.&amp;&amp;</code>은 check 함수의 조합이라는 전제조건이 있어야 한다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">def</span> check<span class="token operator">:</span> <span class="token builtin">Boolean</span>    <span class="token keyword">def</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Prop<span class="token punctuation">)</span><span class="token operator">:</span> Prop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>check <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>check<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>A</strong>: check 함수는 부수효과가 있기 때문에 합성할 수 없다. (그리고 부수효과 때문에 결과물을 리턴하지도 않았다.)</p></li><li><p><strong>A</strong>: 그리고 prop1.check과 prop2.check 테스트 결과를 따로따로 실행하면 &amp;&amp;를 통해 두 결과가 다 통과되었는지도 파악이 안된다.</p></li></ul><p><strong>Q2</strong>: 그럼 <code>&amp;&amp;</code>로 합성하면 합성한 <code>prop</code>에 대해서만 <code>prop.check</code>을 호출하면 되는거 아닌가?</p><ul><li><strong>A</strong>: 고민해봤는데 prop1은 prop1만의 predicate가 있을 것이고 prop2는 prop2만의 predicate가 있을 것이다.</li><li>prop1과 prop2를 합성한다는 것은 이 predicate들도 &amp;&amp;로 합성해야 한다는 것을 의미한다.</li><li>고로 우리가 고민해야될 것은 <code>&amp;&amp;</code>를 통해 어떻게 합성할 것인지, 그리고 그 합성한 것의 predicate는 어떻게 유연하게 평가(예를 들어 prop을 <code>&amp;&amp;</code>로 합성할 때는 predicate도 <code>&amp;&amp;</code>로 합성, prop을 <code>||</code>로 합성할 때는 predicate도 <code>||</code>로 합성)할 것인지를 고민하면 <code>prop.check</code>은 check 함수가 부수효과가 있던 말던 합성된 <code>prop</code> 하나만 신경쓰면 되지 않을까?</li></ul><blockquote><p><strong>여기서 잠깐!!</strong></p><ul><li>Q1에서 말한 전제조건만 없으면 <code>check</code> 함수는 부수효과가 있는채로 냅두고 <code>&amp;&amp;</code>로 합성하는 코드만 잘 작성하면 되는거 아닐까?  </li><li>그런데 책에서는 Q1의 전제조건을 깔고 check 함수의 부수효과를 없애는 방법을 택했다.</li><li>일단 책은 따라가되 전제조건이 없을 때 <code>&amp;&amp;</code>의 구현이 어떻게 될지 살펴봐야겠다. 그렇게 되면 책이 택한 방법에 대한 이유가 좀 더 명확해지지 않을까..</li></ul></blockquote><h5 id="Prop-check에서-부수효과-없애기"><a href="#Prop-check에서-부수효과-없애기" class="headerlink" title="Prop.check에서 부수효과 없애기"></a>Prop.check에서 부수효과 없애기</h5><p>일단 check 함수의 부수효과를 없애기 위해서 반환값을 추가하자. 이 반환값은 테스트한 결과 몇 건 성공하고 몇 건 실패했는지를 반환하자. 그러기 위해서는 Either를 택해야 할 것이다. 일단 <code>left</code>(실패)는 나중에 생각하자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">def</span> check<span class="token operator">:</span> Either<span class="token punctuation">[</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">,</span> SuccessCount<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">object</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">type</span> SuccessCount <span class="token operator">=</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>실패는 실패한 이유와 실패하기 전 성공한 테스트 개수를 추가해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">def</span> check<span class="token operator">:</span> Either<span class="token punctuation">[</span><span class="token punctuation">(</span>FailedCase<span class="token punctuation">,</span> SuccessCount<span class="token punctuation">)</span><span class="token punctuation">,</span> SuccessCount<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">object</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">type</span> SuccessCount <span class="token operator">=</span> <span class="token builtin">Int</span>    <span class="token keyword">type</span> FailedCase <span class="token operator">=</span> <span class="token builtin">String</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="다시-Prop-forAll으로"><a href="#다시-Prop-forAll으로" class="headerlink" title="다시 Prop.forAll으로"></a>다시 Prop.forAll으로</h5><p>check의 반환을 Unit에서 Either로 바꾸긴 했지만 그 구현을 생각하기엔 아직도 막막하다. 이 때 좀 거슬러 올라가서 prop과 이 prop을 생성하는 forAll을 생각해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> forAll<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Gen<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Prop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>일단 책의 내용대로 따라가기가 어려우니 내 머릿속에 떠오르는 생각을 적어보자.</p><ul><li><code>forAll(a: Gen[A])</code>을 통해 뭔가 임의의 테스트 데이터를 생성하는 로직이 담긴 함수를 반환할 것이다. 이 함수를 <code>g</code>라고 하자. (임의의 테스트 데이터 생성을 위해 난수 발생기가 아마 필요할듯 하다.)</li><li><code>g(f: A =&gt; Boolean)</code>를 통해 임의로 생성된 데이터를 f 함수에 넘겨서 평가할 수 있는 prop 객체 혹은 함수가 또 반환될 것이다. 이 반환물을 prop이라고 하자.</li><li>prop.check을 호출하면 트리거를 당긴 것과 같이 순차적으로 임의의 테스트 데이터셋 생성 및 predicate 수행, 테스트 결과 반환이 일어날 것이다.</li></ul><p>일단 위에 떠오르는 생각은 나중에 구현해보기로 하고, 시간 관계상 책에 있는 해답을 추가한다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Prop <span class="token punctuation">{</span>    <span class="token keyword">def</span> forAll<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> Gen<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Prop <span class="token operator">=</span> Prop <span class="token punctuation">{</span>        <span class="token punctuation">(</span>n<span class="token punctuation">,</span> rng<span class="token punctuation">)</span> <span class="token keyword">=></span> randomStream<span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span class="token punctuation">.</span>zip<span class="token punctuation">(</span>Stream<span class="token punctuation">.</span>from<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> Passed                <span class="token keyword">else</span> Falsified<span class="token punctuation">(</span>a<span class="token punctuation">.</span>toString<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> Falsified<span class="token punctuation">(</span>buildMsg<span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>_<span class="token punctuation">.</span>isFalsified<span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span>Passed<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> randomStream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>g<span class="token operator">:</span> Gen<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>         Stream<span class="token punctuation">.</span>unfold<span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span class="token punctuation">(</span>rng <span class="token keyword">=></span> Some<span class="token punctuation">(</span>g<span class="token punctuation">.</span>sample<span class="token punctuation">.</span>run<span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> buildMsg<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>s<span class="token operator">:</span> A<span class="token punctuation">,</span> e<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span>        s<span class="token string">"""        test case: $s        generated an exception: ${e.getMessage}        stack trace:        ${e.getStackTrace.mkString("\n")}        """</span><span class="token punctuation">.</span>stripMargin    <span class="token keyword">def</span> check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Result <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token keyword">sealed</span> <span class="token keyword">trait</span> Result <span class="token punctuation">{</span>    <span class="token keyword">def</span> isFalsified<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token keyword">object</span> Passed <span class="token keyword">extends</span> Result <span class="token punctuation">{</span>    <span class="token keyword">def</span> isFalsified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token keyword">class</span> Falsified<span class="token punctuation">(</span>failure<span class="token operator">:</span> FailedCase<span class="token punctuation">,</span> success<span class="token operator">:</span> SuccessCount<span class="token punctuation">)</span> <span class="token keyword">extends</span> Result <span class="token punctuation">{</span>    <span class="token keyword">def</span> isFalsified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">type</span> TestCases <span class="token operator">=</span> <span class="token builtin">Int</span><span class="token keyword">type</span> Result <span class="token operator">=</span> Option<span class="token punctuation">[</span><span class="token punctuation">(</span>FailedCase<span class="token punctuation">,</span> SuccessCount<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Prop<span class="token punctuation">(</span>run<span class="token operator">:</span> TestCases <span class="token keyword">=></span> Result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day06 - 순수 함수적 병렬성</title>
      <link href="/2019/01/07/20190107-scala-and-functional-programming-day06/"/>
      <url>/2019/01/07/20190107-scala-and-functional-programming-day06/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 7장</p><h2 id="Chapter-07-순수-함수적-병렬성"><a href="#Chapter-07-순수-함수적-병렬성" class="headerlink" title="Chapter 07. 순수 함수적 병렬성"></a>Chapter 07. 순수 함수적 병렬성</h2><p>이번 챕터에서 다룰 내용</p><ul><li>숫자 목록 합산하는 함수 만들기</li><li>숫자 합산을 병렬적으로 풀기</li><li>풀이 진행 중 일반화 진행</li></ul><p>이번 챕터에서 특히 어려움을 많이 느꼈는데, 중간중간 불쑥 튀어나오는 함수 조합기와 그 조합기 구현을 어떻게 그렇게 생각해낼수 있을지 조금은 경외심도 느꼈다. 나로써는 도저히 그렇게 한 방에 그런 구현이 나와야 된다는 생각이 안들던데 그래서 그런지 연습문제도 딱히 어떻게 풀어야 겠다는 생각이 안들어서 어렵다고 느끼는 것 같다. 각설하고 공부한 내용을 정리하자.</p><p><br></p><p><br></p><h3 id="숫자-목록-합산하는-함수-만들기"><a href="#숫자-목록-합산하는-함수-만들기" class="headerlink" title="숫자 목록 합산하는 함수 만들기"></a>숫자 목록 합산하는 함수 만들기</h3><p>이번 챕터에서는 목록에 있는 정수(Int)들의 합을 구하는 함수를 구하는 것으로 시작해보자.</p><h4 id="1-foldLeft를-이용한-숫자-목록의-합-구하기"><a href="#1-foldLeft를-이용한-숫자-목록의-합-구하기" class="headerlink" title="1. foldLeft를 이용한 숫자 목록의 합 구하기"></a>1. foldLeft를 이용한 숫자 목록의 합 구하기</h4><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> ints<span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>위 구현 방식은 Seq 중 왼쪽에서 오른쪽으로 숫자 두 개씩 접으면서 수행하는 코드 동작 방식으로 진행한다.</p><pre class="line-numbers language-scala"><code class="language-scala">sum<span class="token punctuation">(</span>Seq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Seq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>Seq<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>Seq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>Seq<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>Seq<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Divide-and-conquer-알고리즘을-이용한-숫자-목록의-합-구하기"><a href="#2-Divide-and-conquer-알고리즘을-이용한-숫자-목록의-합-구하기" class="headerlink" title="2. Divide-and-conquer 알고리즘을 이용한 숫자 목록의 합 구하기"></a>2. Divide-and-conquer 알고리즘을 이용한 숫자 목록의 합 구하기</h4><p>순차적으로 접으면서 계산하는 것도 좋지만 합(sum)을 병렬로 돌리게 하고 싶을 경우 어떻게 할까? 추후 병렬로 하기 위해 계산 작업을 쪼개서 실행하는 분할정복 (divide-and-conquer) 알고리즘을 적용해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> IndexedSeq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ints<span class="token punctuation">.</span>size <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        ints<span class="token punctuation">.</span>headOption<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> ints<span class="token punctuation">.</span>splitAt<span class="token punctuation">(</span>ints<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        sum<span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> sum<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이는 ints를 splitAt 함수를 이용하여 절반으로 나누고 재귀적으로 두 절반을 각각 합해서 결과들을 합치는 방식(<code>sum(l) + sum(r)</code>)이다. 이렇게 합치는 계산(sum)을 재귀적으로 쪼개서 실행하는 방식이므로 <code>foldLeft</code>와는 다르게 병렬화할 수 있다. (두 절반을 병렬로 합할 수 있다)</p><h3 id="숫자-합산을-병렬적으로-풀기"><a href="#숫자-합산을-병렬적으로-풀기" class="headerlink" title="숫자 합산을 병렬적으로 풀기"></a>숫자 합산을 병렬적으로 풀기</h3><h4 id="1-숫자-계산-부분만-병렬-쓰레드-로-처리하기"><a href="#1-숫자-계산-부분만-병렬-쓰레드-로-처리하기" class="headerlink" title="1. 숫자 계산 부분만 병렬(쓰레드)로 처리하기"></a>1. 숫자 계산 부분만 병렬(쓰레드)로 처리하기</h4><p>2번의 구현 내용을 병렬적으로 풀기 위해서는 <code>sum(l)</code>과 <code>sum(r)</code>을 각각 개별 스레드에서 실행(평가)할 수 있도록 구조를 변경한다. 이렇게 개별적으로 계산 및 결과를 담을 <code>Par[A]</code>라는 자료형을 만들자(여기서 <code>A</code>는 계산 결과의 타입을 의미). <code>Par[A]</code>를 사용한 숫자 목록 합산 함수는 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> IndexedSeq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ints<span class="token punctuation">.</span>size <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        ints headOption getOrElse <span class="token number">0</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> ints<span class="token punctuation">.</span>splitAt<span class="token punctuation">(</span>ints<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> sumL<span class="token operator">:</span> Par<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> sumR<span class="token operator">:</span> Par<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>        Par<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sumL<span class="token punctuation">)</span> <span class="token operator">+</span> Par<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sumR<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위의 Par.unit과 Par.get 사용한 것을 보고 함수의 시그니처를 생각해보면 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token keyword">def</span> unit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 숫자 계산(a 썽크)을 병렬(스레드)로 처리</span>    <span class="token keyword">def</span> get<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token comment" spellcheck="true">// Par에서 숫자 계산 결과값을 꺼냄</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>여기서 Par.unit은 썽크를 받아서 병렬로 처리한 뒤 결과 값을 상태로 갖고 있는 것이고, Par.get은 Par에 담긴 결과값을 추출하는 함수이다.</p><blockquote><h5 id="여기서-잠깐-Par-unit-함수를-어떻게-구현할까"><a href="#여기서-잠깐-Par-unit-함수를-어떻게-구현할까" class="headerlink" title="여기서 잠깐! Par.unit 함수를 어떻게 구현할까?"></a>여기서 잠깐! Par.unit 함수를 어떻게 구현할까?</h5><ol><li>unit 함수 인자로 받은 썽크를 unit 호출 시 바로 병렬로 처리하여 결과를 갖고 있다가 Par.get이 호출되면 그 결과를 반환한다. (위에서 한 얘기)</li><li>unit 함수 인자로 받은 썽크를 unit 호출 시 바로 실행하지 않고 Par.get이 호출되면 해당 썽크를 비동기로 호출하여 결과를 반환한다.</li></ol></blockquote><p>여기서는 1번의 방법으로 진행하는 것이 병렬성에 이점을 취할 수 있는데, 그 이유는 2번 방법으로 실행하면 get 함수를 호출하면 계산 결과가 나올 때까지 기다리기 때문에 병렬적으로 실행되지 않게 되기 때문이다. 아래 코드를 보자.</p><pre class="line-numbers language-scala"><code class="language-scala">Par<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sumL<span class="token punctuation">)</span> <span class="token operator">+</span> Par<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sumR<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>위 코드를 2번 방식으로 진행된다면 Par.get(sumL)에서 계산이 끝나야지 Par.get(sumR)이 호출되기 때문이다. (스칼라에서는 구문을 왼쪽에서 오른쪽으로 실행) 그렇기 때문의 우리의 Divide-and-conquer 코드에서는 1번 방식으로 해결하는 것이 좋다.</p><blockquote><h5 id="이슈-발생-참조-투명성이-깨짐"><a href="#이슈-발생-참조-투명성이-깨짐" class="headerlink" title="이슈 발생: 참조 투명성이 깨짐"></a>이슈 발생: 참조 투명성이 깨짐</h5><p>1번 방식으로 진행한다고 해도 참조 투명성이 깨진다. 왜 그럴까? 참조 투명성을 증명하기 위해 sumL과 sumR을 아래와 같이 치환한다.</p><p><code>Par.get(Par.unit(sumL))) + Par.get(Par.unit(sum(r)))</code></p><p>이렇게 보면 또다시 병렬로 실행되지 않는 문제가 나타날 뿐만아니라, unit의 결과값(상태)를 갖고 있는 형식이 되기 때문에 부수효과가 존재하게 된다. 이런 부수 효과 때문에 Par.get이 영향을 받는다.</p></blockquote><p>구체적으로 무슨 영향을 받는 것일까?</p><ul><li>Par.get 메소드는 Par.unit에서 계산된 결과값에 따라 결과 값을 반환하도록 의존하게 된다.</li><li>즉 Par.unit의 병렬 계산이 끝나기 전까지는 Par.get 호출의 결과 반환은 Blocking 된다.</li><li><code>Par.get(Par.unit(sumL)))</code>이 끝나야지 <code>Par.get(Par.unit(sum(r)))</code> 이 실행되는 이슈가 여전히 드러난다.</li></ul><p><u>우리의 목표는 숫자 합산이 병렬로 처리되어야 하는데 Par.unit에서 아무리 병렬로 합을 계산한다고 해도 Par.get에서 블로킹되어 버리니 궁극적인 병렬처리는 아니다.</u> 그럼 이걸 어떻게 해결할까?</p><h4 id="2-병렬계산을-조합하기"><a href="#2-병렬계산을-조합하기" class="headerlink" title="2. 병렬계산을 조합하기"></a>2. 병렬계산을 조합하기</h4><p><code>Par.get</code>에서 블로킹이 되는거 때문에 병렬처리가 안된다면 <code>Par.get</code>을 걷어내자. <code>Par.get</code>을 걷어내면 <code>Par.unit</code> 에서 처리된 병렬처리 계산 결과는 어떻게 추출할 것인가?</p><p><u>관점을 변경해서 <code>Par.unit</code>이 하나의 계산 병렬처리라면 이 병렬처리 여러 개를 모아서 한꺼번에 그 결과를 반환하게 하면 어떨까? 즉 병렬처리 함수들을 하나로 조합하여 결과 추출(<code>Par.get</code>)을 한 번만 하게 하는 것이다.</u> 이렇게 병렬처리를 조합하는 아이디어를 반영한 sum 코드는 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> IndexedSeq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ints<span class="token punctuation">.</span>size <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span>ints<span class="token punctuation">.</span>headOption getOrElse <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> ints<span class="token punctuation">.</span>splitAt<span class="token punctuation">(</span>ints<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그럼 <code>Par.map2</code> 라는 조합기 함수의 시그니처를 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> map2<span class="token punctuation">(</span>ap<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> bp<span class="token operator">:</span> Par<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>map2를 좀 더 살펴보자.</p><p>map2는 ap와 bp가 각각 병렬로 실행되어야 한다. 즉 ap와 bp가 인수로 전달 되자마자 병렬 실행이 되어야 하며 이는 map2가 엄격한 함수이어야 한다는 의미이다. 과연 그럴까? sum 코드 실행을 한 번 추적해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">1</span><span class="token operator">:</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">2</span><span class="token operator">:</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">3</span><span class="token operator">:</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    map2<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>     sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">4</span><span class="token operator">:</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    map2<span class="token punctuation">(</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>     sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">5</span><span class="token operator">:</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    map2<span class="token punctuation">(</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>     map2<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">6</span><span class="token operator">:</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    map2<span class="token punctuation">(</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span>     map2<span class="token punctuation">(</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h5 id="이슈-발생-병렬처리-실행이-한꺼번에-실행되지-않음"><a href="#이슈-발생-병렬처리-실행이-한꺼번에-실행되지-않음" class="headerlink" title="이슈 발생: 병렬처리 실행이 한꺼번에 실행되지 않음"></a>이슈 발생: 병렬처리 실행이 한꺼번에 실행되지 않음</h5><p><u>위 코드 추적 과정을 통해 밝혀진 문제점은 무엇일까? 4번 과정에서 나타난 것과 같이 아직 <code>IndexedSeq(3,4)</code>에 대한 병렬처리가 시작되기도 전에 <code>Par.unit(1)</code>과 <code>Par.unit(2)</code> 라는 병렬처리가 시작되는 이슈가 발생하기 시작한다.</u> 즉, 오른쪽 인수가 모두 평가되기도 전에 왼쪽 인수의 병렬처리가 실행되버리는 형태가 나타나게 된다. 이는 곧 완전하지 않은 병렬처리라고 볼 수 있다. </p></blockquote><p>그럼 위 이슈를 어떻게 해결할까?</p><h4 id="3-Par-map2-사용에-따른-명시적-병렬처리-실행코드-추가"><a href="#3-Par-map2-사용에-따른-명시적-병렬처리-실행코드-추가" class="headerlink" title="3. Par.map2 사용에 따른 명시적 병렬처리 실행코드 추가"></a>3. Par.map2 사용에 따른 명시적 병렬처리 실행코드 추가</h4><p>위 이슈를 해결하기 위해 <code>Par.map2</code>의 인수를 게으르게 평가하도록 바꾸려고 생각할 것이다. (인수의 게으른 혹은 엄격한 평가는 6장을 참조)</p><p><strong>하지만 좀 더 근본적인 문제 해결을 생각해보자.</strong> 굳이  <code>Par.map2</code>는 꼭 인수들을 엄격하게 병렬로 평가할 필요가 있을까?</p><blockquote><h5 id="여기서-잠깐-fork의-등장"><a href="#여기서-잠깐-fork의-등장" class="headerlink" title="여기서 잠깐? fork의 등장"></a>여기서 잠깐? fork의 등장</h5><p>문제:  <code>sum(IndexedSeq(1,2))</code> 처리하자고 스레드 2개나 만들어서 처리해야할까? (<code>Par.unit(1)</code>용 스레드 하나, <code>Par.unit(2)</code>용 스레드 하나)</p><ul><li><p>굳이 스레드까지 쓸 필요 없이 <code>1 + 2</code>는 눈 깜짝할 사이에 끝날 것이 자명하다.</p></li><li><p>여기서 우리는 <code>Par.map2</code>는 병렬처리라는 인수를 엄격하게 평가하되 개발자가 해당 인수는 병렬 처리라는 것을 명시해주는 장치가 필요하다. 왜냐면 아까와 같이 병렬처리가 필요없는 곳에서는 병렬처리를 안하도록 명시하는 것을 프로그래머가 명시할 수 있게 되는 것이다.</p></li><li><p>즉 아래와 같이 Par를 개별 스레드에서 처리하게 하는 fork 함수를 선언하고 더 이상 <code>Par.unit</code>에서는 병렬처리 코드를 걷어내는 것이 바람직하다. (병렬처리를 개발자가 fork를 통해 명시적으로 표시하게 함)</p></li></ul></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> fork<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>앞에서 말한 것처럼 병렬 실행을 프로그래머가 결정하게 하기 위해 fork를 적용해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> IndexedSeq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ints<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span>ints<span class="token punctuation">.</span>headOption getOrElse <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> ints<span class="token punctuation">.</span>splitAt<span class="token punctuation">(</span>ints<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fork에게 병렬 실행을 위임하였으니 정말 문제가 없을까? 앞에서 했던 것처럼 실행 과정을 추적해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">1</span><span class="token operator">:</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">2</span><span class="token operator">:</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sum(IndexedSeq(1,2))를 병렬 실행</span>    Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// sum(IndexedSeq(3,4))를 병렬 실행</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">3</span><span class="token operator">:</span><span class="token comment" spellcheck="true">//sum(IndexedSeq(1,2))</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sum(IndexedSeq(1))를 병렬 실행</span>    Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// sum(IndexedSeq(2))를 병렬 실행</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token operator">+</span><span class="token comment" spellcheck="true">//sum(IndexedSeq(3,4))</span>Par<span class="token punctuation">.</span>map2<span class="token punctuation">(</span>    Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// sum(IndexedSeq(3))를 병렬 실행</span>    Par<span class="token punctuation">.</span>fork<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>IndexedSeq<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// sum(IndexedSeq(4))를 병렬 실행</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token number">4</span><span class="token operator">:</span><span class="token comment" spellcheck="true">// sum(IndexedSeq(1))의 병렬 실행</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// sum(IndexedSeq(2))의 병렬 실행</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// sum(IndexedSeq(3))의 병렬 실행</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// sum(IndexedSeq(4))의 병렬 실행</span>Par<span class="token punctuation">.</span>unit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>위의 Par<span class="token punctuation">.</span>unit들을 <span class="token operator">+</span>로 묶은 Par를 반환함<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>완전히 맞지는 않지만 일단 병렬실행이 언제 실행되는지를 표시하는데에 중점을 두었다.</p><p>위의 실행 과정으로 미루어봤을 때 map2의 두 인자가 동시에 병렬적으로 실행하게 되었다. 즉, <code>Par.fork</code>를 쓰면 <code>Par.map2</code>는  엄격하게 해도 병렬적으로 실행되며, <code>Par.unit</code>은 엄격하게 해도 병렬실행에 문제가 생기지 않는다. 끄읕~</p><h5 id="과연-이대로-끝일까-병렬처리의-평가"><a href="#과연-이대로-끝일까-병렬처리의-평가" class="headerlink" title="과연 이대로 끝일까? 병렬처리의 평가"></a>과연 이대로 끝일까? 병렬처리의 평가</h5><p><code>sum</code> 함수가 이제 <code>Par.map2</code>로 <code>Par.fork</code>들로 묶인 병렬처리들을 조합하여 <code>Par</code>를 반환하는 것으로 탈바꿈하였다. 그럼 <code>sum</code> 함수의 결과는 <code>Par[A]</code>로 <code>Par.get</code>을 호출하면 결과를 얻을 수 있을 것이다.</p><p>그럼 <code>Par.fork</code>를 호출하는 즉시 내부적으로 병렬 실행을 평가하게 하는게 좋을까? 아니면 <code>Par.get</code>을 호출할 때 <code>Par.fork</code>로 조합한 <code>Par.unit</code>들을 병렬 실행을 평가하게 하는게 좋을까?</p><p>나는 솔직히 둘 다 괜찮다고 생각했다. 그러나 책에서는 후자가 더 좋은 선택이라고 소개하며, 전자가 나쁜 이유를 설명하는데 솔직히 이해를 못하겠다.</p><blockquote><p>p.129</p><p>만일 fork가 자신의 인수를 즉시 병렬로 평가하기 시작한다면, 그 구현은 스레드를 생성하는 방법이나 과제를 일종의 스레드 플에 제출하는 방법을 직접적으로든 간접적으로든 알고 있어야 한다. 더 나아가서, 이는 스레드 풀(또는 병렬성을 구현하는 데 사용하는 어떤 자원)이 반드시 접근 가능한(전역적으로) 자원이어야 하며, fork를 호출하는 시점에서 이미 적절히 초기화되어 있어야 함을 의미한다. 그런 조건을 만족하려면 프로그램의 여러 부분에서 쓰이는 병렬성 전략을 프로그래머가 임의로 제어할 수 있는 능력을 포기해야 한다. 병렬 과제들의 실행을 위해 전역 자원을 두는 것이 근본적으로 잘못된 일은 아니지만, 구현이 무엇을 언제 사용할 것인지를 프로그래머가 좀 더 세밀하게 제어할 수 있다면 더 좋은 것임을 상상이 가능하다(예를 들어 큰 응용 프로그램의 각 하위 시스템이 각자 다른 매개변수들로 설정된 스레드 풀을 유지하는 등). 따라서 스레드 생성과 실행 과제 제출의 책임을 get에 부여하는 것이 훨씬 적합하겠다.</p><p>…</p><p>fork가 그냥 인수의 평가를 뒤로 미루게 한다면, fork는 병렬성 구현을 위한 메커니즘에 접근할 필요가 없다. 그냥 평가되지 않은 Par 인수를 받고 그 인수에 동시적 평가가 필요하다는 점을 ‘표시’만 해 두면 된다. 이것이 바로 fork의 의미라고 가정하자. 이러한 모형에서, Par 자체는 병렬성의 구체적인 구현 방법을 알 필요가 없다. Par는 나중에 get 함수 같은 무언가에 의해 해석될 병렬 계산에 관한 서술에 가깝다. 이는, Par를 나중에 준비되었을 때 조회(get)할 어떤 값을 담은 컨테이너라고 생각했던 것과는 다른 발생이다. 이제는 실행이 가능한 일급 프로그램에 좀 더 가까워졌다. 그런 취지에서 get 함수의 이름을 run으로 바꾸고, 병렬성이 실제로 구현되는 지점이 바로 이 run 함수임을 천명하기로 하자.</p><p><code>def run[A](a: Par[A]): A</code></p></blockquote><p>위 내용을 요약하자면 <code>Par.fork</code>는 인자로 받은 썽크를 병렬처리 장치로 감싼(책에서는 이걸 서술이라고 표현) 자료구조를 반환하게 되고, 이 병렬 자료구조를 실행하는 것은 <code>Par.run</code>에서 하게 한다. (병렬 자료구조를 스레드 풀에 위임하거나 아니면 다른 방법을 쓰는 것은 그 다음 얘기)</p><h4 id="4-여태까지-정리한거를-코드로-선언해보자"><a href="#4-여태까지-정리한거를-코드로-선언해보자" class="headerlink" title="4. 여태까지 정리한거를 코드로 선언해보자!"></a>4. 여태까지 정리한거를 코드로 선언해보자!</h4><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token keyword">def</span> unit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token keyword">=></span> UnitFuture<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">def</span> lazyUnit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> fork<span class="token punctuation">(</span>unit<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">case</span> <span class="token keyword">class</span> UnitFuture<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>get<span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token keyword">extends</span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">def</span> isDone <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">def</span> get<span class="token punctuation">(</span>timeout<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> units<span class="token operator">:</span> TimeUnit<span class="token punctuation">)</span> <span class="token operator">=</span> get        <span class="token keyword">def</span> isCancelled <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">def</span> cancel<span class="token punctuation">(</span>evenIfRunning<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> map2<span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">:</span> Par<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>C<span class="token punctuation">]</span> <span class="token operator">=</span>        <span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> af <span class="token operator">=</span> a<span class="token punctuation">(</span>es<span class="token punctuation">)</span>            <span class="token keyword">val</span> bf <span class="token operator">=</span> b<span class="token punctuation">(</span>es<span class="token punctuation">)</span>            UnitFuture<span class="token punctuation">(</span>f<span class="token punctuation">(</span>af<span class="token punctuation">.</span>get<span class="token punctuation">,</span> bf<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> map<span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>pa<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">=</span>        map2<span class="token punctuation">(</span>pa<span class="token punctuation">,</span> unit<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=></span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> fork<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>        es <span class="token keyword">=></span> es<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token keyword">new</span> Callable<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">def</span> call <span class="token operator">=</span> a<span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">.</span>get        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// asyncF는 A => B의 결과를 비동기로 평가되는 함수로 변환하는 함수</span>    <span class="token comment" spellcheck="true">// lazyUnit을 이용해서 작성하면 된다.</span>    <span class="token keyword">def</span> asyncF<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token keyword">=></span> Par<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        a <span class="token keyword">=></span> lazyUnit<span class="token punctuation">(</span>f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UnitFuture는 병렬 실행 자료구조일 뿐 병렬처리 실행 로직은 들어있지 않다.</li><li>fork 함수의 구조를 할펴보면 이슈가 있는 것을 발견할 수 있다. (Deadlock 위험 내제)</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> ExecutorService <span class="token punctuation">{</span>    <span class="token keyword">def</span> submit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Callable<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">trait</span> Callable<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> call<span class="token operator">:</span> A<span class="token punctuation">}</span><span class="token keyword">trait</span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> get<span class="token operator">:</span> A    <span class="token keyword">def</span> get<span class="token punctuation">(</span>timeout<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> unit<span class="token operator">:</span> TimeUnit<span class="token punctuation">)</span><span class="token operator">:</span> A    <span class="token keyword">def</span> cancel<span class="token punctuation">(</span>evenIfRunning<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>    <span class="token keyword">def</span> isDone<span class="token operator">:</span> <span class="token builtin">Boolean</span>    <span class="token keyword">def</span> isCancelled<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">}</span><span class="token keyword">type</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> ExecutorService <span class="token keyword">=></span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token keyword">def</span> run<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token keyword">def</span> equal<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> p2<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> p<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>get <span class="token operator">==</span> p2<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>코드를 구현했으면 아래와 같은 궁금증이 생길 것이다. (난 안생기던데..)</p><ol><li>위에 구현된 조합기(map2, map)들로 어떤 것을 표현할 수 있을까?</li><li>fork 함수에서 쓰는 ExecutorService에서 발생할 수 있는 문제는 무엇일까?</li></ol><p>1번은 생략하고 2번을 살펴보자.</p><h4 id="5-Par-fork-스레드-풀과-교착상태-그리고-해결"><a href="#5-Par-fork-스레드-풀과-교착상태-그리고-해결" class="headerlink" title="5. Par.fork: 스레드 풀과 교착상태 그리고 해결"></a>5. Par.fork: 스레드 풀과 교착상태 그리고 해결</h4><p><code>ExecutorService.submit</code> 는 병렬로 평가할 행위(<code>Callable</code>)을 스레드 풀에게 병렬처리를 위임하는 방향으로 구현하는 것을 대부분 생각할 것이다. 그러나 고정된 크기의 스레드 풀을 사용하는 <code>ExecutorService</code> 구현은 Deadlock에 빠질 수 있다.</p><p>만약 스레드 풀의 최대 스레드 개수가 1이라고 할 때, 아래와 같은 코드는 잘 동작할까?</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> a <span class="token operator">=</span> lazyUnit<span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">val</span> S <span class="token operator">=</span> Executors<span class="token punctuation">.</span>newFixedThreadPool<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>    Par<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> fork<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>문제는 fork를 호출할 때 발생한다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> fork<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>     es <span class="token keyword">=></span> es<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token keyword">new</span> Callable<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">def</span> call <span class="token operator">=</span> a<span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">.</span>get    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fork(a)</code>를 호출하면 <code>es =&gt; es.submit(new Callable[A] {...})</code> 를 호출하게 될 것이다. (1)</li><li>그런데 <code>new Callable[A] { ... }</code> 의 구현을 살펴보면 <code>a(es)</code> 를 호출하여 <code>ExecutorService</code> 를 넘겨서 만들어진 <code>UnitFutre(a)</code> 를 또 <code>fork()</code>에 인자로 넘겨서 실행하게 된다. (2)</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token keyword">def</span> unit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token keyword">=></span> UnitFuture<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">def</span> lazyUnit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> fork<span class="token punctuation">(</span>unit<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>즉 fork가 두 번 호출되게 되며, 스레드 풀에게 (1)의 Callable을 실행하라고 전달하여 스레드를 선점하였는데 (2)를 또 실행하라고 Callable을 만들어서 스레드 플에게 전달하면 스레드가 이미 없기 때문에 실행이 안되는 상황이 발생한다. 즉 (1)은 병렬 실행 중이지만 끝날 때까지 기다리게 되고, (2)는 스레드가 이미 모두 선점되어 있기 때문에 시작조차 못해서 끝날 수도 없게 된다.</li><li>이걸 바로 교착상태에 빠졌다고 말한다.</li></ul><p>이걸 어떻게 해결할까?</p><h4 id="6-Actor-등장-non-blocking-형태의-Par-구현하기"><a href="#6-Actor-등장-non-blocking-형태의-Par-구현하기" class="headerlink" title="6. Actor 등장: non-blocking 형태의 Par 구현하기"></a>6. Actor 등장: non-blocking 형태의 Par 구현하기</h4><p>위 문제의 근본적인 문제는 <code>Par.get</code> 이 호출되면 끝날 때까지 기다리게 된다는게 문제이다. (<code>Par.get</code> 함수가 blocking 함수이다) 다시 말하면 <code>Par.get</code> 의 호출이 일어나게 되면 병렬처리의 결과가 나올 때까지 기다리게 되며, 그 다음으로 넘어갈 수가 없다.</p><p><u>따라서 해결은 Non-blocking 으로만 동작하는 Par을 구현하면 된다.</u> (정말 그럴까? 조금 의심스럽지만 도무지 상상이 안간다…)</p><p><u>그리고 fork와 map2에서 Blocking 함수(ex: <code>Par.get</code> 등등)를 호출하지 않게 하면 된다.</u></p><p>fork, map2에서 블로킹 함수 <code>Par.get</code>을 호출하는 것을 피하기 위해서는 데이터를 가져오는 행위를 콜백으로 감싸서 fork와 map2에서 호출하게 하자. 그러기 위해서는 <code>Par.unit</code> 부터 콜백 함수를 호출하는 방식으로 변경되어야 한다.</p><h4 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h4><h5 id="AS-IS"><a href="#AS-IS" class="headerlink" title="AS-IS"></a>AS-IS</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token keyword">def</span> unit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token keyword">=></span> UnitFuture<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">case</span> <span class="token keyword">class</span> UnitFuture<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>get<span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token keyword">extends</span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">def</span> isDone <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">def</span> get<span class="token punctuation">(</span>timeout<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> units<span class="token operator">:</span> TimeUnit<span class="token punctuation">)</span> <span class="token operator">=</span> get        <span class="token keyword">def</span> isCancelled <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">def</span> cancel<span class="token punctuation">(</span>evenIfRunning<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TO-BE"><a href="#TO-BE" class="headerlink" title="TO-BE"></a>TO-BE</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token keyword">def</span> unit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token keyword">new</span> Future<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">def</span> apply<span class="token punctuation">(</span>cb<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Unit</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> cb<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="map2"><a href="#map2" class="headerlink" title="map2()"></a>map2()</h4><h5 id="AS-IS-1"><a href="#AS-IS-1" class="headerlink" title="AS-IS"></a>AS-IS</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> map2<span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">:</span> Par<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>C<span class="token punctuation">]</span> <span class="token operator">=</span>        <span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> af <span class="token operator">=</span> a<span class="token punctuation">(</span>es<span class="token punctuation">)</span>            <span class="token keyword">val</span> bf <span class="token operator">=</span> b<span class="token punctuation">(</span>es<span class="token punctuation">)</span>            UnitFuture<span class="token punctuation">(</span>f<span class="token punctuation">(</span>af<span class="token punctuation">.</span>get<span class="token punctuation">,</span> bf<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TO-BE-1"><a href="#TO-BE-1" class="headerlink" title="TO-BE"></a>TO-BE</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Par <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> map2<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Par<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">:</span> Par<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">)</span><span class="token operator">:</span> Par<span class="token punctuation">[</span>C<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">package</span> fpinscala<span class="token punctuation">.</span>parallelism<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span><span class="token punctuation">{</span>AtomicInteger<span class="token punctuation">,</span> AtomicReference<span class="token punctuation">}</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token punctuation">{</span>Callable<span class="token punctuation">,</span>ExecutorService<span class="token punctuation">}</span><span class="token keyword">import</span> annotation<span class="token punctuation">.</span>tailrec<span class="token comment" spellcheck="true">/* * Implementation is taken from `scalaz` library, with only minor changes. See: * * https://github.com/scalaz/scalaz/blob/scalaz-seven/concurrent/src/main/scala/scalaz/concurrent/Actor.scala * * This code is copyright Andriy Plokhotnyuk, Runar Bjarnason, and other contributors, * and is licensed using 3-clause BSD, see LICENSE file at: * * https://github.com/scalaz/scalaz/blob/scalaz-seven/etc/LICENCE */</span><span class="token comment" spellcheck="true">/** * Processes messages of type `A`, one at a time. Messages are submitted to * the actor with the method `!`. Processing is typically performed asynchronously, * this is controlled by the provided `strategy`. * * Memory consistency guarantee: when each message is processed by the `handler`, any memory that it * mutates is guaranteed to be visible by the `handler` when it processes the next message, even if * the `strategy` runs the invocations of `handler` on separate threads. This is achieved because * the `Actor` reads a volatile memory location before entering its event loop, and writes to the same * location before suspending. * * Implementation based on non-intrusive MPSC node-based queue, described by Dmitriy Vyukov: * [[http://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue]] * * @see scalaz.concurrent.Promise for a use case. * * @param handler  The message handler * @param onError  Exception handler, called if the message handler throws any `Throwable`. * @param strategy Execution strategy, for example, a strategy that is backed by an `ExecutorService` * @tparam A       The type of messages accepted by this actor. */</span><span class="token keyword">final</span> <span class="token keyword">class</span> Actor<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>strategy<span class="token operator">:</span> Strategy<span class="token punctuation">)</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Unit</span><span class="token punctuation">,</span> onError<span class="token operator">:</span> Throwable <span class="token keyword">=></span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token keyword">throw</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">self</span> <span class="token keyword">=></span>  <span class="token keyword">private</span> <span class="token keyword">val</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> AtomicReference<span class="token punctuation">(</span><span class="token keyword">new</span> Node<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> suspended <span class="token operator">=</span> <span class="token keyword">new</span> AtomicInteger<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> head <span class="token operator">=</span> <span class="token keyword">new</span> AtomicReference<span class="token punctuation">(</span>tail<span class="token punctuation">.</span>get<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/** Alias for `apply` */</span>  <span class="token keyword">def</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    head<span class="token punctuation">.</span>getAndSet<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>lazySet<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    trySchedule<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** Pass the message `a` to the mailbox of this actor */</span>  <span class="token keyword">def</span> apply<span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span> <span class="token operator">!</span> a  <span class="token punctuation">}</span>  <span class="token keyword">def</span> contramap<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> B <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Actor<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token keyword">new</span> Actor<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!</span> f<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> onError<span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">def</span> trySchedule<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>suspended<span class="token punctuation">.</span>compareAndSet<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> schedule<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">def</span> schedule<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    strategy<span class="token punctuation">(</span>act<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">def</span> act<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> t <span class="token operator">=</span> tail<span class="token punctuation">.</span>get    <span class="token keyword">val</span> n <span class="token operator">=</span> batchHandle<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n ne t<span class="token punctuation">)</span> <span class="token punctuation">{</span>      n<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>A<span class="token punctuation">]</span>      tail<span class="token punctuation">.</span>lazySet<span class="token punctuation">(</span>n<span class="token punctuation">)</span>      schedule<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      suspended<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>get ne <span class="token keyword">null</span><span class="token punctuation">)</span> trySchedule<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@tailrec</span>  <span class="token keyword">private</span> <span class="token keyword">def</span> batchHandle<span class="token punctuation">(</span>t<span class="token operator">:</span> Node<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Node<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> n <span class="token operator">=</span> t<span class="token punctuation">.</span>get    <span class="token keyword">if</span> <span class="token punctuation">(</span>n ne <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">(</span>n<span class="token punctuation">.</span>a<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ex<span class="token operator">:</span> Throwable <span class="token keyword">=></span> onError<span class="token punctuation">(</span>ex<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> batchHandle<span class="token punctuation">(</span>n<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">else</span> n    <span class="token punctuation">}</span> <span class="token keyword">else</span> t  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> Node<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">:</span> A <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> AtomicReference<span class="token punctuation">[</span>Node<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">object</span> Actor <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** Create an `Actor` backed by the given `ExecutorService`. */</span>  <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Unit</span><span class="token punctuation">,</span> onError<span class="token operator">:</span> Throwable <span class="token keyword">=></span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token keyword">throw</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> Actor<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token keyword">new</span> Actor<span class="token punctuation">(</span>Strategy<span class="token punctuation">.</span>fromExecutorService<span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> onError<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Provides a function for evaluating expressions, possibly asynchronously. * The `apply` function should typically begin evaluating its argument * immediately. The returned thunk can be used to block until the resulting `A` * is available. */</span><span class="token keyword">trait</span> Strategy <span class="token punctuation">{</span>  <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A<span class="token punctuation">}</span><span class="token keyword">object</span> Strategy <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * We can create a `Strategy` from any `ExecutorService`. It's a little more   * convenient than submitting `Callable` objects directly.   */</span>  <span class="token keyword">def</span> fromExecutorService<span class="token punctuation">(</span>es<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span><span class="token operator">:</span> Strategy <span class="token operator">=</span> <span class="token keyword">new</span> Strategy <span class="token punctuation">{</span>    <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> f <span class="token operator">=</span> es<span class="token punctuation">.</span>submit <span class="token punctuation">{</span> <span class="token keyword">new</span> Callable<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">def</span> call <span class="token operator">=</span> a<span class="token punctuation">}</span> <span class="token punctuation">}</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> f<span class="token punctuation">.</span>get    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * A `Strategy` which begins executing its argument immediately in the calling thread.   */</span>  <span class="token keyword">def</span> sequential<span class="token operator">:</span> Strategy <span class="token operator">=</span> <span class="token keyword">new</span> Strategy <span class="token punctuation">{</span>    <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> r <span class="token operator">=</span> a      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> r    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day05 - 순수 함수적 상태</title>
      <link href="/2018/12/25/20181226-scala-and-functional-programming-day05/"/>
      <url>/2018/12/25/20181226-scala-and-functional-programming-day05/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 6장</p><h2 id="Chapter-06-순수-함수적-상태"><a href="#Chapter-06-순수-함수적-상태" class="headerlink" title="Chapter 06. 순수 함수적 상태"></a>Chapter 06. 순수 함수적 상태</h2><p>이번 챕터에서 다룰 내용</p><ul><li>난수 발생(scala.util.Random)의 문제점</li><li>순수 함수적으로 난수 발생하기</li><li>상태가 있는 함수를 순수하게 하기</li><li>난수 발생기 일반화하기</li><li>순수 상태 함수 일반화하기</li></ul><p><br></p><p><br></p><h3 id="난수-발생-scala-util-Random-의-문제점"><a href="#난수-발생-scala-util-Random-의-문제점" class="headerlink" title="난수 발생(scala.util.Random)의 문제점"></a>난수 발생(scala.util.Random)의 문제점</h3><p>스칼라의 난수 발생기 클래스(scala.util.Random)은 부수 효과에 의존하는 메소드를 제공한다. 왜 이렇게 말하는걸까?</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Randomrng<span class="token operator">:</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random <span class="token operator">=</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token annotation punctuation">@74fab04a</span>scala<span class="token operator">></span> rng<span class="token punctuation">.</span>nextDoubleres0<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">0.8020301517138297</span>scala<span class="token operator">></span> rng<span class="token punctuation">.</span>nextDoubleres1<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">0.169106827118352</span>scala<span class="token operator">></span> rng<span class="token punctuation">.</span>nextIntres2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">968884305</span>scala<span class="token operator">></span> rng<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>res3<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>scala.util.Random.nextDouble</code>, <code>scala.util.Random.nextInt</code> 메소드를 보면 호출할 때마다 다른 값(난수)이 나오는 것을 볼 수 있다. <u>이것은 해당 메소드들이 호출될 때마다 갱신되는 어떤 내부 상태가 존재한다고 가정할 수 있다</u> (즉 부수효과가 있는 메소드라는 의미). <u>상태 갱신은 부수효과로서 수행되므로 이 메소드들은 참조에 투명하지 않다고 볼 수 있다.</u></p><blockquote><p>부수효과가 있으면 뭐가 안좋다고?</p><ul><li>검사, 합성, 모듈화가 어려워진다.</li><li>병렬화가 쉽지 않다.</li></ul></blockquote><p>과연 그럴까? 부수효과가 있는 함수의 검사성을 살펴보자.</p><h5 id="문제"><a href="#문제" class="headerlink" title="문제)"></a>문제)</h5><p>주사위 메소드를 구현해보자. 이 메소드는 반드시 1 이상 6 이하의 정수를 돌려주어야 한다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> rollDie<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> rng <span class="token operator">=</span> <span class="token keyword">new</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random    rng<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// *</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>그런데 <code>rng.nextInt(6)</code>은 0 이상 5 이하의 난수를 돌려준다. 그러므로 1 이상 6 이하의 값을 준다는 검사에서 여섯 번 중 다섯 번은 실패하게 되는데 이는 랜덤하게 발생된다. 이 버그를 문제라고 말한다. 왜 이 버그가 이슈일까?</p><ul><li>이슈: 버그가 명백하지만 재현하기가 어렵다.</li><li>이슈: 만약 프로그램이 복잡해지고 버그가 그에 비례하여 복잡해진다면 이를 재현하기가 점점 더 어려워지고 이를 재현하기 위해 프로그래머의 능력이 훨씬 중요해진다.</li></ul><h5 id="해결1"><a href="#해결1" class="headerlink" title="해결1)"></a>해결1)</h5><p>해결책으로는 난수 발생기 <code>rng</code> 를 인수로 전달하는 것이다. 왜 이렇게 할까?</p><ul><li>답: 실패한 검사를 재현할 때 당시에 인수로 쓰인 <code>rng</code>를 재사용하기 위해</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> rollDie<span class="token punctuation">(</span>rng<span class="token operator">:</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>그러나 여기에도 이슈가 있다.</p><ul><li>이슈: rng를 인수로 받았다고 해도 여전히 <code>rng.nextInt</code> 를 호출하면 rng 내부의 상태가 변한다.</li><li>이슈: 검사를 재현할 때 당시에 인수로 쓰인 rng의 상태가 동일하게 하기 위해서는 nextInt 메소드 호출을 추적해야 되는 메커니즘을 따로 개발해야 된다.</li></ul><p>결국 해결하기 위해서는 <u>부수효과</u>를 피해야 한다.</p><h3 id="순수-함수적으로-난수-발생하기"><a href="#순수-함수적으로-난수-발생하기" class="headerlink" title="순수 함수적으로 난수 발생하기"></a>순수 함수적으로 난수 발생하기</h3><p>앞의 문제를 어떻게 해결할까? 상태 갱신을 명시적으로 드러내는 방법으로 난수 생성 함수 호출 시 난수와 상태를 담고 있는 난수생성기를 함께 반환하는 것이다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> RNG <span class="token punctuation">{</span>    <span class="token keyword">def</span> nextInt<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (난수, 난수 생성에 사용된 난수 생성기)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>이 트레이트를 사용해서 간단한 난수 생성기를 구현하면 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> SimpleRNG<span class="token punctuation">(</span>seed<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> RNG <span class="token punctuation">{</span>    <span class="token keyword">def</span> nextInt<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> newSeed <span class="token operator">=</span> <span class="token punctuation">(</span>seed <span class="token operator">*</span> 0x5DEECE66DL <span class="token operator">+</span> 0xBL<span class="token punctuation">)</span> <span class="token operator">&amp;</span> 0xFFFFFFFFFFFFL        <span class="token keyword">val</span> nextRNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span>newSeed<span class="token punctuation">)</span>        <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>newSeed <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt        <span class="token punctuation">(</span>n<span class="token punctuation">,</span> nextRNG<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u><code>nextInt</code> 메소드를 살펴보면 <code>newSeed</code>(상태)가 담긴 새로운 <code>SimpleRNG</code> 인스턴스를 생성하여 난수를 생성하고 있다.</u></p><p>그렇기 때문에 동일한 객체의 <code>nextInt</code> 함수를 아무리 많이 호출해도 동일한 <code>newSeed</code>를 사용하여 난수를 생성하기 때문에 이 함수는 순수하다.</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> rng <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>rng<span class="token operator">:</span> SimpleRNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt <span class="token comment" spellcheck="true">// 1</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">16159453</span>rng2<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">1059025964525</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>n2<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> rng2<span class="token punctuation">.</span>nextInt <span class="token comment" spellcheck="true">// 2</span>n2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1281479697</span>rng3<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">197491923327988</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>n3<span class="token punctuation">,</span> rng4<span class="token punctuation">)</span> <span class="token operator">=</span> rng2<span class="token punctuation">.</span>nextInt <span class="token comment" spellcheck="true">// 3</span>n3<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1281479697</span>rng4<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">197491923327988</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>n4<span class="token punctuation">,</span> rng5<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt <span class="token comment" spellcheck="true">// 4</span>n4<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">16159453</span>rng5<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">1059025964525</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 예제에서 보면 <code>rng.nextInt</code>1과 4 두 번 실행했음에도 불구하고 동일한 난수를 얻었다. 마찬가지로 2와 3에서도 동일한 난수 생성기로 난수 생성 호출 <code>rng2.nextInt</code> 을 했음에도 불구하고 동일한 난수를 얻었다. 따라서 nextInt 함수는 이제 순수해졌다. (상태가 사라짐)</p><p>이 난수 생성기를 사용하면 다음과 같이 동일한 랜덤값을 갖는 튜플을 만들수도 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> randomPair<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>i1<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt    <span class="token keyword">val</span> <span class="token punctuation">(</span>i2<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt    <span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>더 발전하여 서로 다른 두 수와 이를 만들 때 사용한 난수 생성기를 반환하는 함수도 만들 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> randomPair<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>i1<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt    <span class="token keyword">val</span> <span class="token punctuation">(</span>i2<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> rng2<span class="token punctuation">.</span>nextInt <span class="token comment" spellcheck="true">// i1과 i2가 다르게 하기 위해 rng2 난수 생성기를 사용</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 최종 상태가 담긴 rng3을 함께 반환한다.</span>                     <span class="token comment" spellcheck="true">// 왜 이렇게 할까? 호출자는 이 rng3을 이용해서 다른 난수를 생성하게 하기 위해</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="상태가-있는-함수를-순수하게-하기"><a href="#상태가-있는-함수를-순수하게-하기" class="headerlink" title="상태가 있는 함수를 순수하게 하기"></a>상태가 있는 함수를 순수하게 하기</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Foo <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> s<span class="token operator">:</span> FooState <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> bar<span class="token operator">:</span> Bar    <span class="token keyword">def</span> baz<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">}</span><span class="token keyword">trait</span> Foo <span class="token punctuation">{</span>    <span class="token keyword">def</span> bar<span class="token operator">:</span> <span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span>    <span class="token keyword">def</span> baz<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> Foo<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bar</code> 과 <code>baz</code> 가 상태 s를 변이한다고 하자. 이 함수들을 순수 함수적으로 만들려면 앞의 난수 생성기와 같이 새로운 상태가 담긴 Foo 객체를 반환하는 패턴을 사용하면 된다. </p><blockquote><p>이 패턴을 적용한다는 것은 계산된 다음 상태를 프로그램의 나머지 부분에 전달하는 책임을 호출자에게 넘기는 것과 같다.</p></blockquote><p>앞의 난수 생성의 순수함수 패턴을 일반화가 필요한 시점이다.</p><p>잠깐 연습문제를 풀고 넘어가자.</p><h5 id="연습문제-6-1"><a href="#연습문제-6-1" class="headerlink" title="연습문제 6.1"></a>연습문제 6.1</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 0 이상, Int.MaxValue 이하의 난수 Int를 반환하는 함수 만들기</span><span class="token comment" spellcheck="true">// Int.MinValue도 대응하기 (Math.abs(Int.MinValue) == -2147483648)</span><span class="token keyword">def</span> nonNegativeInt<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> newRng<span class="token punctuation">)</span> <span class="token operator">=</span> rng<span class="token punctuation">.</span>nextInt    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token builtin">Int</span><span class="token punctuation">.</span>MinValue<span class="token punctuation">)</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">else</span> i    <span class="token keyword">val</span> t <span class="token operator">=</span> result <span class="token operator">>></span> <span class="token number">31</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">^</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newRng<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 참고: 조건문 없는 절대값 함수 구하기 (http://alloc.tistory.com/137)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>i<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">16159453</span>rng2<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">1059025964525</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>i2<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng2<span class="token punctuation">)</span>i2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1281479697</span>rng3<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">197491923327988</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>i3<span class="token punctuation">,</span> rng4<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng3<span class="token punctuation">)</span>i3<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">340305902</span>rng4<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">259172689157871</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="연습문제-6-2"><a href="#연습문제-6-2" class="headerlink" title="연습문제 6.2"></a>연습문제 6.2</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 0 이상, 1 미만의 Double 난수 구하기</span><span class="token keyword">def</span> double<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>    <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">.</span>toDouble <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> rng1<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>d<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">0.007524831686168909</span>rng1<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">1059025964525</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng1<span class="token punctuation">)</span>d<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">0.5967354853637516</span>rng2<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">197491923327988</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng2<span class="token punctuation">)</span>d<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">0.15846728440374136</span>rng3<span class="token operator">:</span> RNG <span class="token operator">=</span> SimpleRNG<span class="token punctuation">(</span><span class="token number">259172689157871</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>연습문제 6.3</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> intDouble<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng2<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> rng3<span class="token punctuation">)</span><span class="token punctuation">}</span>intDouble<span class="token operator">:</span> <span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span><span class="token keyword">def</span> doubleInt<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng2<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> rng3<span class="token punctuation">)</span><span class="token punctuation">}</span>doubleInt<span class="token operator">:</span> <span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span><span class="token keyword">def</span> double3<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>d1<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>d2<span class="token punctuation">,</span> rng3<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng2<span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>d3<span class="token punctuation">,</span> rng4<span class="token punctuation">)</span> <span class="token operator">=</span> double<span class="token punctuation">(</span>rng3<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">)</span><span class="token punctuation">,</span> rng4<span class="token punctuation">)</span><span class="token punctuation">}</span>double3<span class="token operator">:</span> <span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> intDouble<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res35<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16159453</span><span class="token punctuation">,</span><span class="token number">0.5967354853637516</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SimpleRNG<span class="token punctuation">(</span><span class="token number">197491923327988</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scala<span class="token operator">></span> doubleInt<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res36<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.007524831686168909</span><span class="token punctuation">,</span><span class="token number">1281479697</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SimpleRNG<span class="token punctuation">(</span><span class="token number">197491923327988</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scala<span class="token operator">></span> double3<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res37<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.007524831686168909</span><span class="token punctuation">,</span><span class="token number">0.5967354853637516</span><span class="token punctuation">,</span><span class="token number">0.15846728440374136</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SimpleRNG<span class="token punctuation">(</span><span class="token number">259172689157871</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>연습문제 6.4</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> ints<span class="token punctuation">(</span>count<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> loop<span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> result<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pastRng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> newRng<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>pastRng<span class="token punctuation">)</span>            loop<span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">:</span><span class="token operator">:</span> result<span class="token punctuation">,</span> newRng<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span>result<span class="token punctuation">,</span> pastRng<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    loop<span class="token punctuation">(</span>count<span class="token punctuation">,</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rng<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> ints<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res41<span class="token operator">:</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1837487774</span><span class="token punctuation">,</span> <span class="token number">94901159</span><span class="token punctuation">,</span> <span class="token number">1163632441</span><span class="token punctuation">,</span> <span class="token number">1015914512</span><span class="token punctuation">,</span> <span class="token number">1934589059</span><span class="token punctuation">,</span> <span class="token number">1770001318</span><span class="token punctuation">,</span> <span class="token number">2015756020</span><span class="token punctuation">,</span> <span class="token number">340305902</span><span class="token punctuation">,</span> <span class="token number">1281479697</span><span class="token punctuation">,</span> <span class="token number">16159453</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SimpleRNG<span class="token punctuation">(</span><span class="token number">120421598792892</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scala<span class="token operator">></span> ints<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res42<span class="token operator">:</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1770001318</span><span class="token punctuation">,</span> <span class="token number">2015756020</span><span class="token punctuation">,</span> <span class="token number">340305902</span><span class="token punctuation">,</span> <span class="token number">1281479697</span><span class="token punctuation">,</span> <span class="token number">16159453</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SimpleRNG<span class="token punctuation">(</span><span class="token number">115998806404289</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scala<span class="token operator">></span> ints<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res43<span class="token operator">:</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">994512970</span><span class="token punctuation">,</span> <span class="token number">1835563077</span><span class="token punctuation">,</span> <span class="token number">1166376033</span><span class="token punctuation">,</span> <span class="token number">384268462</span><span class="token punctuation">,</span> <span class="token number">250029321</span><span class="token punctuation">,</span> <span class="token number">1911657181</span><span class="token punctuation">,</span> <span class="token number">1660936491</span><span class="token punctuation">,</span> <span class="token number">1571634817</span><span class="token punctuation">,</span> <span class="token number">141607732</span><span class="token punctuation">,</span> <span class="token number">122709694</span><span class="token punctuation">,</span> <span class="token number">1837487774</span><span class="token punctuation">,</span> <span class="token number">94901159</span><span class="token punctuation">,</span> <span class="token number">1163632441</span><span class="token punctuation">,</span> <span class="token number">1015914512</span><span class="token punctuation">,</span> <span class="token number">1934589059</span><span class="token punctuation">,</span> <span class="token number">1770001318</span><span class="token punctuation">,</span> <span class="token number">2015756020</span><span class="token punctuation">,</span> <span class="token number">340305902</span><span class="token punctuation">,</span> <span class="token number">1281479697</span><span class="token punctuation">,</span> <span class="token number">16159453</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SimpleRNG<span class="token punctuation">(</span><span class="token number">65176402051806</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="난수-발생기-일반화하기"><a href="#난수-발생기-일반화하기" class="headerlink" title="난수 발생기 일반화하기"></a>난수 발생기 일반화하기</h3><p>앞의 구현 패턴들을 살펴보면 <code>RNG =&gt; (A, RNG)</code>의 형태를 따른다. RNG에 대해 새로운 상태를 담은 RNG로 변환한다고 해서 이런 함수를 상태 동작(state action) or 상태 전이(state transition)이라고 부른다.</p><p>위 함수에 대해 앨리어스를 만들자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">type</span> Rand<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> RNG <span class="token keyword">=></span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> RNG<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// +A == A 일수도 있고 A의 상위일 수도 있다.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>이를 사용하면 좀 더 간단하게 표시할 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> int<span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> _<span class="token punctuation">.</span>nextInt<span class="token keyword">def</span> unit<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> rng <span class="token keyword">=></span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> rng<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>자 이제 난수 생성기는 건들지 않고 난수 값을 변환하는 map 함수를 만들어보자. (잉? 갑자기 쌩뚱맞게…)</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Rand<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span>B<span class="token punctuation">]</span> <span class="token operator">=</span>     rng <span class="token keyword">=></span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>        <span class="token punctuation">(</span>f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> rng2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 map 함수를 사용하면 0 이상이면서 2로 나누어지는 Int를 발생하는 함수를 쉽게 만들 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> nonNegativeEven<span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">(</span>nonNegativeInt<span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token keyword">=></span> i <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="연습문제-6-5"><a href="#연습문제-6-5" class="headerlink" title="연습문제 6.5"></a>연습문제 6.5</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// double 함수를 map 함수를 이용해서 다시 만들어라.</span><span class="token comment" spellcheck="true">// 0 이상, 1 미만의 Double 난수 구하기</span><span class="token keyword">def</span> double<span class="token punctuation">(</span>rng<span class="token operator">:</span> RNG<span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">(</span>nonNegativeInt<span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">.</span>toDouble <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>결과</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> double<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>res45<span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span> $$Lambda$<span class="token number">1497</span><span class="token operator">/</span><span class="token number">760675871</span><span class="token annotation punctuation">@6882c069</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="연습문제-6-6"><a href="#연습문제-6-6" class="headerlink" title="연습문제 6.6"></a>연습문제 6.6</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// ra, rb라는 난수 결과와 이 결과들을 조합하는 함수 f를 조합한 함수를 만들어라</span><span class="token keyword">def</span> map2<span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">]</span><span class="token punctuation">(</span>ra<span class="token operator">:</span> Rand<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> rb<span class="token operator">:</span> Rand<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token keyword">=></span> C<span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span>C<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>지금까지의 구현에서 보면 RNG 값을 명시적으로 언급하거나 전달하지 않았다. 특히 map, map2라는 변환 함수에서는 RNG를 명시적으로 다루지 않아도 되어서 개발자가 실수할 일이 줄어들었다.</p><blockquote><p>그러나 map, map2로 커버할 수 없는 함수들도 있다.</p><p>바로 nonNegativeLessThan 이다.</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> nonNegativeLessThan<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">(</span>nonNegativeInt<span class="token punctuation">)</span><span class="token punctuation">{</span> _ <span class="token operator">%</span> n <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>이게 왜 문제일까?</p><ul><li>Int.MaxValue가 n으로 나누어떨어지지 않을 수도 있으므로 전체적으로 난수들이 치우치게 된다.</li><li>Int.MaxValue == 2147483647 이므로 n으로 나누어 떨어지지 않는 수가 발생하므로 0이 나오지 않고 0 이상의 값들이 좀 더 자주 나오게 된다.</li></ul><p>어떻게 해결해야 될까?</p><ul><li>n을 통해 나올 수 있는 최대 배수보다 더 큰 난수가 발생하면 난수를 다시 발생하게 한다.</li><li>왜? 난수가 균등하게 나오게 하기 위해</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> nonNegativeLessThan<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span>     map<span class="token punctuation">(</span>nonNegativeInt<span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token keyword">=></span>        <span class="token keyword">val</span> mod <span class="token operator">=</span> i <span class="token operator">%</span> n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> mod <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> mod <span class="token keyword">else</span> nonNegativeLessThan<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 난수(i)가 32비트 Int를 벗어나지 않는 n의 최대 배수보다 크면 난수를 다시 발생한다.</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nonNegativeLessThan 함수는 애초에 커링이 안되는 함수인데 난수를 새로 만들려면 새로운 상태의 rng가 필요하다. 그런데 우리는 <code>Rand[Int]</code> 를 쓰기 때문에 rng를 명시적으로 넘길 수 없다. 어떻게 해결할까?</p><ul><li>답은 <code>map</code> 함수를 쓰지 않고 명시적으로 <code>(result, RNG)</code> 을 반환하는 식으로 코딩한다.</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> nonNegativeLessThan<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> rng <span class="token keyword">=></span>     <span class="token keyword">val</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span> <span class="token operator">=</span> nonNegativeInt<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>    <span class="token keyword">val</span> mod <span class="token operator">=</span> i <span class="token operator">%</span> n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> mod <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mod<span class="token punctuation">,</span> rng2<span class="token punctuation">)</span>    <span class="token keyword">else</span> nonNegativeLessThan<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">(</span>rng2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이걸 쓰면 맨 앞에 나왔던 주사위의 버그를 손쉽게 해결할 수 있다. (주사위 함수가 0 ~ 5 까지 밖에 안나왔던 이슈)</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> rollDie<span class="token operator">:</span> Rand<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">(</span>nonNegativeLessThan<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nonNegativeLessThan 함수에서 쓸 map 함수와 같은 조합기가 필요한 시점이다. 우리는 이걸 flatMap이라 부른다.</p><h5 id="연습문제6-8"><a href="#연습문제6-8" class="headerlink" title="연습문제6.8"></a>연습문제6.8</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> flatMap<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> Rand<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g<span class="token operator">:</span> A <span class="token keyword">=></span> Rand<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Rand<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="연습문제6-9"><a href="#연습문제6-9" class="headerlink" title="연습문제6.9"></a>연습문제6.9</h5><pre class="line-numbers language-scala"><code class="language-scala">map과 map2를 flatMap을 이용해서 다시 구현하라<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="순수-상태-함수-일반화하기"><a href="#순수-상태-함수-일반화하기" class="headerlink" title="순수 상태 함수 일반화하기"></a>순수 상태 함수 일반화하기</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> map<span class="token punctuation">[</span>S<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> S <span class="token keyword">=></span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> S <span class="token keyword">=></span> <span class="token punctuation">(</span>B<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>이제 임의이 상태를 처리할 수 있는 Rand보다 더 일반적인 형식을 고려해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">type</span> State<span class="token punctuation">[</span>S<span class="token punctuation">,</span> <span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> S <span class="token keyword">=></span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">class</span> State<span class="token punctuation">[</span>S<span class="token punctuation">,</span> <span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>run<span class="token operator">:</span> S <span class="token keyword">=></span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> S<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>이제 Rand는 그냥 State로도 표현할 수 있게 된다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">type</span> Rand<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> State<span class="token punctuation">[</span>RNG<span class="token punctuation">,</span> A<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>또 flatMap 함수를 명령식으로도 작성할 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> ns<span class="token operator">:</span> Rand<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span>     int<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>x <span class="token keyword">=></span>         int<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>y <span class="token keyword">=></span>            ints<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>xs <span class="token keyword">=></span>                xs<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">%</span> y<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> ns<span class="token operator">:</span> Rand<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">{</span>    x <span class="token keyword">&lt;-</span> int    y <span class="token keyword">&lt;-</span> int    xs <span class="token keyword">&lt;-</span> ints<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">yield</span> xs<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">%</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day04 - 엄격성과 나태성</title>
      <link href="/2018/12/17/20181218-scala-and-functional-programming-day04/"/>
      <url>/2018/12/17/20181218-scala-and-functional-programming-day04/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 5장</p><h2 id="Chapter-05-엄격성과-나태성"><a href="#Chapter-05-엄격성과-나태성" class="headerlink" title="Chapter 05. 엄격성과 나태성"></a>Chapter 05. 엄격성과 나태성</h2><p>이번 챕터에서 다룰 내용</p><ul><li>List의 한계</li><li>Stream (Lazy List)</li><li>스트림 순회의 비엄격성과 나태성</li></ul><p><br></p><p><br></p><h3 id="List의-한계"><a href="#List의-한계" class="headerlink" title="List의 한계"></a>List의 한계</h3><p>스칼라에서 다음 코드는 어떻게 수행될까?</p><pre class="line-numbers language-scala"><code class="language-scala">List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>스칼라 List의 map과 filter 함수는 임시적인 목록을 만들어서 그 결과를 반환한다. 즉 <code>List(1,2,3,4).map(_ + 10)</code>을 수행하면 <code>List(11,12,13,14)</code>를 반환하고 <code>List(11,12,13,14).filter(_ % 2 == 0)</code>을 수행하면 <code>List(12,14)</code>를 반환한다. 위 코드의 추적 과정은 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala">List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>List<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>List<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>List<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>위 방법은 마치 포커 카드에서 홀수 카드를 모두 제거하고 모든 퀸 카드를 뒤집는 놀이가 있다면, 루프를 한 번만 돌게하여 홀수 카드를 제거한 다음 퀸 카드를 찾는 것이아니라, 루프 한 번에 홀수카드를 제거하고 루프를 또 한 번 돌아서 퀸 카드를 찾는 것과 같은 코드이다.</p><p>위 행동을 요약하자면 아래와 같다.</p><ul><li>루프 1<ul><li>변환 작업(map)</li><li>임시 결과 목록 1</li><li>루프 2<ul><li>필터링 작업(filter)</li><li>임시 결과 목록 2</li><li>루프 3<ul><li>변환 작업(map)</li><li>결과 목록 3</li></ul></li></ul></li></ul></li></ul><p>좀 더 나은 방법은 없을까? 아래와 같은 방법을 생각할 것이다.</p><ul><li>그럼 임시 자료구조를 생성하는 방식보다는 한 번의 루프로 변환 작업을 합성하여 실행하는 것이 어떨까?</li></ul><p>변환 작업을 하나의 패스로 융합(fusion)해서 루프를 한 번만 돌 때 변환 작업을 수행하는 방식을 택하여 임시 자료구조의 생성을 피하는 것이다.</p><p>쉽게 말하자면 다음과 같다.</p><ul><li>루프 1<ul><li>변환 작업(map)</li><li>필터링 작업(filter)</li><li>변환 작업(map)</li><li>결과 목록 1</li></ul></li></ul><p>루프 1이 한 번 돌 때 map, filter, map을 수행하는 것이다. 어떻게 이걸 할까?</p><p>스칼라에는 이걸 하기 위해 Stream이라는 목록 자료형이 있다.</p><h3 id="Stream-Lazy-List"><a href="#Stream-Lazy-List" class="headerlink" title="Stream (Lazy List)"></a>Stream (Lazy List)</h3><p>스트림에는 이런 일련의 변환 작업을 나태성(laziness)을 이용하여 하나의 패스로 융합하는 방법이 담겨 있다. 따라서 List보다 경제적이다.</p><p>위에서 List로 풀었던 문제를 Stream을 사용해보자.</p><pre class="line-numbers language-scala"><code class="language-scala">Stream<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Stream을 사용하여 map과 filter를 합성하여 리스트를 만들려면 Stream을 어떻게 만들어야 할까? 앞 장에서 본 List와 마찬가지로 빈 Stream인 Empty와 값이 들어있는 Stream인 Cons를 선언한다.  그리고 마찬가지로 Stream 컴패니언 오브젝트를 만든다. (관례)</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> Stream<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">object</span> Empty <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span><span class="token builtin">Nothing</span><span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token keyword">object</span> Stream <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>앞의 리스트의 Cons에서는 head와 tail이 명시적인 평가된 파라미터 였다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> List<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">object</span> Nil <span class="token keyword">extends</span> List<span class="token punctuation">[</span><span class="token builtin">Nothing</span><span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>head<span class="token operator">:</span> A<span class="token punctuation">,</span> tail<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token keyword">object</span> List <span class="token punctuation">{</span>  <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>as<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> Nil    <span class="token keyword">else</span> Cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>왜 Stream에서는 head와 tail이 함수 타입일까? 추후 설명이 나오겠지만 Stream 컴패니언 오브젝트에서 apply 메소드를 구현할 때 h와 t를 필요할 때만 평가하여 값을 가져와야 하기 때문이다. (왜냐고? Stream은 나태성을 갖는 리스트, 즉 여러 개의 변환 작업을 나태성을 이용하여 한번의 변환 작업으로 합쳐서 수행하는 자료 나열이기 때문이다)</p><blockquote><h5 id="여기서-잠깐-Thunk와-비엄격한-함수"><a href="#여기서-잠깐-Thunk와-비엄격한-함수" class="headerlink" title="여기서 잠깐?! Thunk와 비엄격한 함수"></a>여기서 잠깐?! Thunk와 비엄격한 함수</h5><p><u>이와 같이 값이 필요할 때만 함수를 호출하여 가져오는 즉 평가되지 않은 채 전달될 인수 타입인 <code>() =&gt; A</code>와 같은 자료형은 성크(thunk)라고 부른다.</u> 이 성크는 연산이 필요할 때만 강제로 평가(인수를 호출)하여 값을 가져올 수 있다. 다음은 성크의 예시이다.</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> if2<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>cond<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">,</span> onTrue<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> onFalse<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> onTrue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> onFalse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>위 if2 함수를 보면 cond의 조건 true일 때는 onTrue를 강제로 평가(onTrue 인수를 호출)하고 cond의 조건이 false일 때는 onFalse를 강제로 평가한다.즉 cond의 조건을 if로 체크하기 전까지는 onTrue나 onFalse가 호출되지 않는다. <u>onTrue나 onFalse와 같이 조건에 따라 평가가 될 수도 있고 안될 수도 있기 때문에 if2와 같은 함수를 <strong>비엄격한 함수다</strong> 라고 부른다.</u></p><p>스칼라에서는 성크를 다음과 같이 <code>()</code>를 생략해서 표현할 수도 있다.</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> if2<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>cond<span class="token operator">:</span> <span class="token builtin">Boolean</span><span class="token punctuation">,</span> onTrue<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> onFalse<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> A <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cond<span class="token punctuation">)</span> onTrue <span class="token keyword">else</span> onFalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>스칼라에서는 인자에 값을 넘기듯이 if2를 호출하면 표현식을 알아서 감싸준다.</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala">if2<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p> 스칼라 말고도 다른 언어에서도 비엄격성을 표현할 수 있다. 바로 부울 함수 <code>&amp;&amp;</code>와 <code>||</code>의 단축 평가는 엄격하지 않다.</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span> println<span class="token punctuation">(</span><span class="token string">"!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// print문이 실행되질 않는다.</span><span class="token comment" spellcheck="true">// &amp;&amp;의 특성상 앞의 조건이 false가 되면 &amp;&amp; 뒤의 조건이 평가되지 않기 때문이다.</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">{</span> println<span class="token punctuation">(</span><span class="token string">"!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ||도 마찬가지로 앞의 조건이 true이면 || 뒤의 조건이 평가되지 않기 때문에 print 문이 실행되질 않는다. </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>이와 같이  <code>&amp;&amp;</code>와 <code>||</code>는 비엄격성을 띄고 있다.</p></blockquote><p>따라서 List.apply 메소드를 참조하여 Stream.apply 메소드를 만들면 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Stream <span class="token punctuation">{</span>    <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>as<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> Empty        <span class="token keyword">else</span> Cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// * 컴파일 오류 *</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>List.apply와 거의 동일한 모습이지만, Stream의 Cons를 위와 같이 사용하면 안된다. 왜냐면 Cons의 생성자 인수는 성크이지만, call by name으로 인수의 평가 값을 가져올 수 없기 때문이다. 따라서 인수에 값을 함수로 감싸는 것이 자동으로 되질 않는다.</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span>defined <span class="token keyword">class</span> Consscala<span class="token operator">></span> <span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span> error<span class="token operator">:</span> `<span class="token keyword">val</span>' parameters may not be call<span class="token operator">-</span>by<span class="token operator">-</span>name       <span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span>                              <span class="token operator">^</span><span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span> error<span class="token operator">:</span> `<span class="token keyword">val</span>' parameters may not be call<span class="token operator">-</span>by<span class="token operator">-</span>name       <span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span>                                       <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">object</span> Stream <span class="token punctuation">{</span>     <span class="token operator">|</span>     <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token operator">|</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>as<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> Empty     <span class="token operator">|</span>         <span class="token keyword">else</span> Cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span> error<span class="token operator">:</span> <span class="token keyword">type</span> mismatch<span class="token punctuation">;</span> found   <span class="token operator">:</span> A required<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A               <span class="token keyword">else</span> Cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">^</span><span class="token operator">&lt;</span>console<span class="token operator">></span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span> error<span class="token operator">:</span> <span class="token keyword">type</span> mismatch<span class="token punctuation">;</span> found   <span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> required<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span>               <span class="token keyword">else</span> Cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                       <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이에 대한 해결 방법은 Cons와 Empty의 성크를 갖는 스마트 생성자를 Stream 컴패니언 오브젝트에 추가하면 된다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Stream <span class="token punctuation">{</span>    <span class="token keyword">def</span> cons<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>hd<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> tl<span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> Cons<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> hd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> tl<span class="token punctuation">)</span>    <span class="token keyword">def</span> empty<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> Empty    <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>as<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> empty        <span class="token keyword">else</span> cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그러나 여기에도 문제가 있다.</p><h4 id="Cons에-숨어-있는-재계산"><a href="#Cons에-숨어-있는-재계산" class="headerlink" title="Cons에 숨어 있는 재계산"></a>Cons에 숨어 있는 재계산</h4><p>일단 Cons는 인자로 받은 성크를 계속 실행시키기 때문에 인자로 넘긴 함수가 퍼포먼스를 많이 잡아먹는 함수라면 그 함수가 두 번 호출되는 이슈가 생긴다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Stream <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> headOption<span class="token operator">:</span> Option<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token keyword">match</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Empty <span class="token keyword">=></span> None        <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>h<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token keyword">=></span> Some<span class="token punctuation">(</span>h<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">val</span> x <span class="token operator">=</span> Cons<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> expensive<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span><span class="token keyword">val</span> h1 <span class="token operator">=</span> x<span class="token punctuation">.</span>headOption<span class="token keyword">val</span> h2 <span class="token operator">=</span> x<span class="token punctuation">.</span>headOption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이건 뭘 의미할까? 위에 cons 스마트 생성자에서 hd와 tl 성크를 Cons로 넘겼는데 Cons의 head와 tail이 참조될 때마다 hd, tl성크가 평가된다는 의미이다. 이는 굉장히 비효율적이다. (hd, tl 성크의 값을 한 번만 평가하고 캐싱하는게 좋지 않을까?)</p><p>이렇게 성크의 값을 캐싱하기 위해서는 <code>lazy val</code>을 이용한다. 이를 이용한 cons 메소드는 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> Stream<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">object</span> Empty <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span><span class="token builtin">Nothing</span><span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>h<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token keyword">object</span> Stream <span class="token punctuation">{</span>    <span class="token keyword">def</span> cons<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>hd<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">,</span> tl<span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">lazy</span> <span class="token keyword">val</span> head <span class="token operator">=</span> hd        <span class="token keyword">lazy</span> <span class="token keyword">val</span> tail <span class="token operator">=</span> tl        Cons<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> head<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> tail<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> empty<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> Empty    <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>as<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> empty        <span class="token keyword">else</span> cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>다시 본론으로 돌아와서 아래 코드를 수행해보자.</p><pre class="line-numbers language-scala"><code class="language-scala">Stream<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>일단 먼저 <code>Stream(1,2,3,4)</code>는 Stream.apply 메소드에 의해 cons 메소드를 통해 다음과 같이 변환된다. </p><pre class="line-numbers language-scala"><code class="language-scala">cons<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Stream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toListcons<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> Stream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>그 다음 cons의 head와 tail에 filter를 적용하게 된다.</p><pre class="line-numbers language-scala"><code class="language-scala">cons<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> Stream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toListStream<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>마찬가지로 <code>Stream(2,3,4)</code>에 대해서도 cons와 map과 filter를 차례로 수행한다.</p><pre class="line-numbers language-scala"><code class="language-scala">cons<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> Stream<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> cons<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Stream<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> cons<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> Stream<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token operator">:</span><span class="token operator">:</span> Stream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12</span> <span class="token operator">:</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token operator">:</span><span class="token operator">:</span> List<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이제 그럼 <code>toList()</code> 과 <code>takeWhile()</code>를 구현해보자.</p><h5 id="연습문제-5-1-3"><a href="#연습문제-5-1-3" class="headerlink" title="연습문제 5.1 ~ 3"></a>연습문제 5.1 ~ 3</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Stream<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">def</span> toList<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>  <span class="token keyword">def</span> drop<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>  <span class="token keyword">def</span> takeWhile<span class="token punctuation">(</span>p<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script src="https://scastie.scala-lang.org/icednut/wr7XsHyfS9K22yZJTscn1w.js"></script><h5 id="연습문제-5-4-7"><a href="#연습문제-5-4-7" class="headerlink" title="연습문제 5.4 ~ 7"></a>연습문제 5.4 ~ 7</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Stream<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> forAll<span class="token punctuation">(</span>p<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>    <span class="token comment" spellcheck="true">// TODO: 아래 메소드들은 foldRight를 이용할 것</span>    <span class="token keyword">def</span> takeWhile2<span class="token punctuation">(</span>p<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Stream<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>    <span class="token keyword">def</span> headOption <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>    <span class="token keyword">def</span> map <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>    <span class="token keyword">def</span> filter <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>    <span class="token keyword">def</span> append <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span> <span class="token comment" spellcheck="true">// 인자에 대해 비엄격해야 한다.</span>    <span class="token keyword">def</span> flatMap <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day03 - 예외를 이용하지 않은 오류 처리</title>
      <link href="/2018/12/10/20181210-scala-and-functional-programming-day03/"/>
      <url>/2018/12/10/20181210-scala-and-functional-programming-day03/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 4장</p><h2 id="Chapter-04-예외를-이용하지-않은-오류-처리"><a href="#Chapter-04-예외를-이용하지-않은-오류-처리" class="headerlink" title="Chapter 04. 예외를 이용하지 않은 오류 처리"></a>Chapter 04. 예외를 이용하지 않은 오류 처리</h2><p>이번 챕터에서 다룰 내용</p><ul><li>예외를 던지는 기존의 방식 살펴보기<ul><li>예외를 던지는게 왜 어때서?</li><li>예외를 안던지고 반환하면 뭐가 좋을까?</li></ul></li><li>예외를 던지지 않고 예외 처리를 미루는 방법 Option</li><li>예외를 미루지 말고 예외를 반환하기 Either</li></ul><p><br></p><p><br></p><h3 id="예외를-던지는-기존-방식"><a href="#예외를-던지는-기존-방식" class="headerlink" title="예외를 던지는 기존 방식"></a>예외를 던지는 기존 방식</h3><p>1장에서 예외(exception)을 던지는 것이 하나의 부수 효과라고 말했다. (함수형 프로그래밍에서는 부수 효과가 쥐약인데…)</p><blockquote><h5 id="여기서-잠깐"><a href="#여기서-잠깐" class="headerlink" title="여기서 잠깐?!"></a>여기서 잠깐?!</h5><p>Q: 그럼 예외를 던지지 않는다면 어떻게 처리할까?</p><ul><li>A: <code>예외를 값으로 돌려주기</code>를 하면 부수효과 없는 함수를 만들 수 있게 된다.</li></ul><p>Q: 예외를 값으로 돌려주면 뭐가 좋을까?</p><ul><li>A: <code>참조 투명성</code>을 유지할 수 있게 된다. (참조 투명성을 유지하는 것이 왜 중요한지는 생략)</li></ul><p>오류(유효하지 않은 출력)에 대한 처리를 컴파일 타임에 명시할 수 있게 된다.</p></blockquote><p>예외를 명시적으로 처리하게 하거나 예외를 값으로 반환하기 위해서는 Option과 Either를 사용해야 한다. 이번 장에서는 Option과 Either를 직접 만들어보면서 이해와 사용 방법을 익혀보자.</p><h4 id="예외가-왜-참조-투명성을-해칠까"><a href="#예외가-왜-참조-투명성을-해칠까" class="headerlink" title="예외가 왜 참조 투명성을 해칠까?"></a>예외가 왜 참조 투명성을 해칠까?</h4><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> failingFn1<span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> y<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> Exception<span class="token punctuation">(</span><span class="token string">"fail!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">+</span> <span class="token number">5</span>        x <span class="token operator">+</span> y    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> <span class="token number">43</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> failingFn2<span class="token punctuation">(</span>i<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">+</span> <span class="token number">5</span>        x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">throw</span> <span class="token keyword">new</span> Exception<span class="token punctuation">(</span><span class="token string">"fail!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> <span class="token number">43</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 함수들을 실행하면 failingFn1을 실행하면 예외가 발생하고 failingFn2를 실행하면 43이 반환된다. 이 결과가 시사하는 바가 뭘까?</p><p>참조에 투명한 문맥이라면 y를 값으로 치환해도 항상 동일한 결과를 반환해야 한다. 하지만 위 예외 발생코드는 문맥의 위치에 따라서 결과값이 달라지는 현상이 발생하고 있다.(try 안에 있느냐 밖에 있느냐..) 즉 문맥(Context)에 의존적이라는 의미다. </p><p>따라서 예외의 문제점은 다음과 같다.</p><ul><li>예외는 참조 투명성을 위반하고 문맥 의존성을 갖게 만든다.</li><li>예외가 있는 함수는 리턴에 대해 예측 불가능하다.<ul><li>failingFn 함수형식인 Int =&gt; Int 만 보고도 예외가 발생할지 알 수 있는가?</li></ul></li></ul><h4 id="그럼-참조-투명성-있는-예외를-다루는-함수를-만들려면"><a href="#그럼-참조-투명성-있는-예외를-다루는-함수를-만들려면" class="headerlink" title="그럼 참조 투명성 있는 예외를 다루는 함수를 만들려면?"></a>그럼 참조 투명성 있는 예외를 다루는 함수를 만들려면?</h4><p>이거 한 가지만 기억하자. <code>예외를 던지지 말고, 예외적인 조건이 발생했음을 뜻하는 값을 돌려주자.</code></p><p>그렇게 하면 예외적인 조건에 대한 처리를 받는 쪽에서 처리해야만 컴파일 통과하게 된다. 참조 투명성도 지키고 예외 처리를 빼먹는 실수도 미연에 방지할 수 있게 된다.</p><blockquote><h5 id="여기서-잠깐-1"><a href="#여기서-잠깐-1" class="headerlink" title="여기서 잠깐?!"></a>여기서 잠깐?!</h5><p>Q: Java의 Checked Exception은 예외를 던지면서 동시에 예외 처리를 컴파일 타임에 강제하지 않는가? 이거랑 뭐가 다른건지?</p><ul><li>A: Checked Exception은 고차함수에는 통하지 않는 단점이 있다. 예를 들어 List.map과 같은 고차함수에는 익명 함수에서 Checked Exception이 발생한다면 그 모든 Checked Exception 마다 List.map에 처리를 추가할 것인가?</li><li>(그야말로 이건 미친짓이다..)</li></ul></blockquote><p>그럼 또 다른 예외를 반환하는 부수효과가 있는 함수를 살펴보고 부수효과를 없애보는 과정을 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> mean<span class="token punctuation">(</span>xs<span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>xs<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> ArithmeticException<span class="token punctuation">(</span><span class="token string">"mean of empty list!"</span><span class="token punctuation">)</span>  <span class="token keyword">else</span> xs<span class="token punctuation">.</span>sum <span class="token operator">/</span> xs<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>위 mean 함수는 xs 파라미터에 따라 예외를 발생할 수도 있고 계산된 결과 값을 반환할 수도 있다. 즉 일부 입력에 대해서는 값을 반환하지 않는 부분함수(partial function)이다.</p><h5 id="해결1-예외-대신-null을-반환한다"><a href="#해결1-예외-대신-null을-반환한다" class="headerlink" title="해결1: 예외 대신 null을 반환한다."></a>해결1: 예외 대신 null을 반환한다.</h5><p>null을 반환하면 또 다른 문제만 만들뿐이다.</p><ul><li>null 처리를 빼먹을 수 있는 실수를 발생하게 만든다. (게다가 이건 컴파일 타임에 잡히지도 않는다.)</li><li>혹은 null을 검사하는 로직을 넣어야 한다. (if문으로 null을 체크하는 판에 박힌 코드가 생긴다.)</li><li>지금은 반환 가능한 Double이지만 커링에서는 어떻게 할 것인가? 이때는 null로도 반환할 수 없다.<ul><li><code>def max[A](xs: Seq[A])(greater: (A, A) =&gt; Boolean): A</code></li><li>위와 같은 함수 형식에서 xs.isEmpty일 때 null을 반환한다고? null 반환 못한다고!!</li></ul></li></ul><h5 id="해결2-예외적인-상황에-처했을-때-반환할-값을-인자로-전달한다"><a href="#해결2-예외적인-상황에-처했을-때-반환할-값을-인자로-전달한다" class="headerlink" title="해결2: 예외적인 상황에 처했을 때 반환할 값을 인자로 전달한다."></a>해결2: 예외적인 상황에 처했을 때 반환할 값을 인자로 전달한다.</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> mean_1<span class="token punctuation">(</span>xs<span class="token operator">:</span> IndexedSeq<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">,</span> onEmpty<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>xs<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> onEmpty  <span class="token keyword">else</span> xs<span class="token punctuation">.</span>sum <span class="token operator">/</span> xs<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>이렇게 되면 모든 입력 값에 대해 모든 반환 값을 받으므로 완전 함수(total function)이 되지만, 여기에도 문제가 있다.</p><ul><li>onEmpty를 넘기지 않고도 mean_1 호출하는 것 자체를 취소하고 싶으면 어떻게 할까? (또 if라는 틀에 박힌 코드가 생기겠지..)</li><li>아니면 예외적인 상황에서 완전히 다른 분기로 넘기려면? (역시 중복코드와 실수를 유발할 수 있음)</li></ul><p>결국 해결1, 2는 진정한 해결이 아니라는 의미다.</p><h5 id="해결3-예외-처리를-호출하는-곳으로-미루자"><a href="#해결3-예외-처리를-호출하는-곳으로-미루자" class="headerlink" title="해결3: 예외 처리를 호출하는 곳으로 미루자."></a>해결3: 예외 처리를 호출하는 곳으로 미루자.</h5><p>바로 다음과 같이 말이다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> mean<span class="token punctuation">(</span>xs<span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>xs<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> None  <span class="token keyword">else</span> Some<span class="token punctuation">(</span>xs<span class="token punctuation">.</span>sum <span class="token operator">/</span> xs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>이렇게 되면 mean을 호출하면 항상 Option을 받기 때문에 완전 함수(total function)이 된다. (야호!) 또한 유효하지 않은 값(None)에 대한 처리를 호출하는 곳에서 명시를 해야하기 때문에 컴파일 타임에서 오류를 미연에 방지하는 코드를 작성하게 된다.</p><h3 id="예외를-던지지-않고-예외-처리를-미루는-방법-Option"><a href="#예외를-던지지-않고-예외-처리를-미루는-방법-Option" class="headerlink" title="예외를 던지지 않고 예외 처리를 미루는 방법 Option"></a>예외를 던지지 않고 예외 처리를 미루는 방법 Option</h3><p>그럼 Option의 정의를 살펴보고 직접 구현해보자.</p><h4 id="연습문제-4-1"><a href="#연습문제-4-1" class="headerlink" title="연습문제 4.1"></a>연습문제 4.1</h4><script src="https://scastie.scala-lang.org/icednut/FsLInrZaQIaPGDHqE0tCnQ.js"></script><blockquote><h5 id="여기서-잠깐-2"><a href="#여기서-잠깐-2" class="headerlink" title="여기서 잠깐?!"></a>여기서 잠깐?!</h5><ul><li><code>default: =&gt; B</code>는 타입은 B이지만 default가 실제로 쓰이기 전까지는 평가(실행 혹은 참조)하지 않는다.</li><li><code>B &gt;: A</code>는 B가 A와 같거나 A의 상위 형식(Supertype)이어야 함을 뜻한다.</li></ul></blockquote><p>Option을 쓰게 되면 값이 없다거나라는 점검 코드를 작성하지 않고도 그냥 코드를 작성하면 된다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Employee<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> department<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">def</span> lookupByName<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>Employee<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token keyword">def</span> joeDepartment<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> lookupByName<span class="token punctuation">(</span><span class="token string">"Joe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>department<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// lookupByName("Joe")의 결과가 없으면 None을 반환하기 때문에 .map 호출이 유효하다.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 코드를 보면 None일 때 점검하는 코드를 작성했는가? 전혀 아니다.</p><p>또 예외처리에 대해 호출자에서 일관된 처리를 하게 만들 수 있고 문맥에 의존적인 오류로직 따위는 저멀리 사라지게 된다.</p><p>그렇다면 Option을 사용하지 않는 기존의 함수들에 대해서 Option을 적용하고 싶다면 어떻게 할까?</p><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">def</span> insuranceRateQuote<span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> numberOfSpeedingTickets<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>예를 들어 위 함수를 호출하는 함수를 만든다고 해보자. 이 때 인자에 문자열에서 숫자로 파싱하여 전달한다고 할 때 제대로 파싱되면 호출하고 아니라면 호출하지 않게 하려면 어떻게 할까?</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> parseInsuranceRateQuote<span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> numberOfSpeedingTickets<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> optAge<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Try<span class="token punctuation">(</span>age<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span>    <span class="token keyword">val</span> optNumberOfSpeedingTickets<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Try<span class="token punctuation">(</span>numberOfSpeedingTickets<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span>    insuranceRateQuote<span class="token punctuation">(</span>optAge<span class="token punctuation">,</span> optNumberOfSpeeedingTickets<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">def</span> Try<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>   <span class="token keyword">try</span> Some<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token keyword">catch</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> None <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>여기서 <code>age.toInt</code>와 <code>numberOfSpeedingTickets.toInt</code>는 충분히 예외가 발생할 수 있는 로직이다. 그러나 Try라는 함수 덕분에 Option으로 감쌀 수 있다. 그러나 문제는 insuranceRateQuote 함수의 인자는 Option을 받을 수 없고 Int만 받을 수 있다.</p><p>이걸 어떻게 해결할까? insuranceRateQuote 함수의 인자를 고쳐야 하는 것일까?</p><p>답은 커링을 써서 값이 있으면 insuranceRateQuote 함수를 호출하고 아니라면 None을 반환하는 고차함수(map2)를 작성한다. 그 고차함수 호출은 다음과 같은 형태가 된다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> parseInsuranceRateQuote<span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> numberOfSpeedingTickets<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> optAge<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Try <span class="token punctuation">{</span> age<span class="token punctuation">.</span>toInt <span class="token punctuation">}</span>    <span class="token keyword">val</span> optTickets<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Try <span class="token punctuation">{</span> numberOfSpeedingTickets<span class="token punctuation">.</span>toInt <span class="token punctuation">}</span>    map2<span class="token punctuation">(</span>optAge<span class="token punctuation">,</span> optTickets<span class="token punctuation">)</span><span class="token punctuation">(</span>insuranceRateQuote<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그럼 map2를 구현해보자.</p><h4 id="연습문제-4-3"><a href="#연습문제-4-3" class="headerlink" title="연습문제 4.3"></a>연습문제 4.3</h4><script src="https://scastie.scala-lang.org/icednut/p0C17LMMTb2ahDZjQ3nKZw.js"></script><p>그럼 map2 함수에서 좀 더 발전하여 인수 2개 뿐만 아니라 목록으로 받는 고차함수를 작성해보자.</p><h4 id="연습문제-4-4"><a href="#연습문제-4-4" class="headerlink" title="연습문제 4.4"></a>연습문제 4.4</h4><script src="https://scastie.scala-lang.org/icednut/ftjs3S72RLGQQ8kIv52iCQ.js"></script><p><code>parseInts</code> 함수를 보면 문제점이 하나 있다.</p><p><code>a map (i =&gt; MyTry(i.toInt))</code> 때문에 리스트를 한 번 훑어서 <code>Option[Int]</code>로 변환한 뒤 <code>sequence()</code>의 함수 내부에서 한 번 또 훑는 작업(for-comprehension)을 타서 총 2번의 루프를 타게 된다.</p><p>이걸 해결하기 위해 traverse라는 고차함수를 만들어보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> traverse<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> Option<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>List<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="연습문제-4-5"><a href="#연습문제-4-5" class="headerlink" title="연습문제 4.5"></a>연습문제 4.5</h4><script src="https://scastie.scala-lang.org/icednut/yDX7Ah8wTFSnimPOqVpWPg.js"></script><h3 id="예외를-미루지-말고-예외를-반환하기-Either"><a href="#예외를-미루지-말고-예외를-반환하기-Either" class="headerlink" title="예외를 미루지 말고 예외를 반환하기 Either"></a>예외를 미루지 말고 예외를 반환하기 Either</h3><p>Option은 무엇이 잘못 되었는지는 생략되고 그냥 None이 반환될 뿐이다. 그러나 아래와 같이 하고 싶을 때도 있을 것이다.</p><ul><li>예외적인 상황에 마주했을 때 예외적인 상황에 대한 자세한 정보를 담은 String을 받고 싶다.</li><li>예외가 발생한 경우 실제 그 예외를 알고 싶다. (Option일 경우는 무슨 예외인지 알 수 없고 그냥 None이기 때문)</li></ul><p>위 문제를 해결하기 위해 실패의 원인을 담고 있는 Either라는 자료 형식을 만들어보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> Either<span class="token punctuation">[</span><span class="token operator">+</span>E<span class="token punctuation">,</span> <span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Left<span class="token punctuation">[</span><span class="token operator">+</span>E<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token operator">:</span> E<span class="token punctuation">)</span> <span class="token keyword">extends</span> Either<span class="token punctuation">[</span>E<span class="token punctuation">,</span> <span class="token builtin">Nothing</span><span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Right<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token keyword">extends</span> Either<span class="token punctuation">[</span><span class="token builtin">Nothing</span><span class="token punctuation">,</span> A<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Either와 같은 자료 형식을 서로 소 합집합 즉 분리합집합이라고 한다. (왜? 값과 예외라는 서로 공통점이 없는 값들을 하나의 합집합으로 묶은 자료형이기 때문)</p><p>Either의 사용방법은 다음과 같다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> mean<span class="token punctuation">(</span>xs<span class="token operator">:</span> IndexedSeq<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>xs<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> Left<span class="token punctuation">(</span><span class="token string">"mean of empty list!"</span><span class="token punctuation">)</span>  <span class="token keyword">else</span> Right<span class="token punctuation">(</span>xs<span class="token punctuation">.</span>sum <span class="token operator">/</span> xs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">def</span> Try<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">=></span> A<span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token punctuation">[</span>Exception<span class="token punctuation">,</span> A<span class="token punctuation">]</span> <span class="token operator">=</span>   <span class="token keyword">try</span> Right<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token keyword">catch</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> Left<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="연습문제-4-6"><a href="#연습문제-4-6" class="headerlink" title="연습문제 4.6"></a>연습문제 4.6</h4><script src="https://scastie.scala-lang.org/icednut/7uOiUSYvQBuD5HyWHB5HXg.js"></script><p>Either의 사용 예시를 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> parseInsuranceRateQuote<span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> numberOfSpeedingTickets<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token punctuation">[</span>Exception<span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token keyword">for</span> <span class="token punctuation">{</span>        a <span class="token keyword">&lt;-</span> Try <span class="token punctuation">{</span> age<span class="token punctuation">.</span>toInt <span class="token punctuation">}</span>        tickets <span class="token keyword">&lt;-</span> Try <span class="token punctuation">{</span> numberOfSpeedingTickets<span class="token punctuation">.</span>toInt <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">yield</span> insuranceRateQuote<span class="token punctuation">(</span>a<span class="token punctuation">,</span> tickets<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>name<span class="token operator">:</span> Name<span class="token punctuation">,</span> age<span class="token operator">:</span> Age<span class="token punctuation">)</span><span class="token keyword">sealed</span> <span class="token keyword">class</span> Name<span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">sealed</span> <span class="token keyword">class</span> Age<span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">def</span> mkName<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Name<span class="token punctuation">]</span> <span class="token operator">=</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> Left<span class="token punctuation">(</span><span class="token string">"Name is empty."</span><span class="token punctuation">)</span>  <span class="token keyword">else</span> Right<span class="token punctuation">(</span><span class="token keyword">new</span> Name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> mkAge<span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Age<span class="token punctuation">]</span> <span class="token operator">=</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> Left<span class="token punctuation">(</span><span class="token string">"Age is out of range."</span><span class="token punctuation">)</span>  <span class="token keyword">else</span> Right<span class="token punctuation">(</span><span class="token keyword">new</span> Age<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> mkPerson<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Either<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> Person<span class="token punctuation">]</span> <span class="token operator">=</span>   mkName<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>map2<span class="token punctuation">(</span>mkAge<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person<span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day02 - 함수적 자료구조</title>
      <link href="/2018/12/04/20181204-scala-and-functional-programming-day02/"/>
      <url>/2018/12/04/20181204-scala-and-functional-programming-day02/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 3장</p><h2 id="Chapter-03-함수적-자료구조"><a href="#Chapter-03-함수적-자료구조" class="headerlink" title="Chapter 03. 함수적 자료구조"></a>Chapter 03. 함수적 자료구조</h2><p>이번 챕터에서 다룰 내용</p><ul><li>함수형 프로그래밍 스타일 작성된 <code>Single Linked List</code> 살펴보기 (함수적 자료구조)</li><li>Pattern Matching</li><li>함수형 자료구조에서의 Data Sharing</li><li>고차함수와 타입추론, 그리고 고차함수 일반화</li><li>함수형 프로그래밍 스타일로 <code>Binary Tree</code> 구현하기</li></ul><p><br></p><p><br></p><h3 id="함수적-자료구조"><a href="#함수적-자료구조" class="headerlink" title="함수적 자료구조"></a>함수적 자료구조</h3><p>먼저 함수적 자료구조의 정의부터 살펴보자. 함수적 자료구조란 무엇일까?</p><ul><li>순수한 함수만으로 조작되는 자료구조</li><li>함수적 자료구조는 조작이 일어나도 그 원본은 영원히 불변이다.</li><li>예를 들어 List()와 같은 빈 리스트는 정수 값 3이나 4처럼 영원히 불변이(Immutable) 값이다.</li><li>3 + 4를 수행하면 새로운 정수 값 7이 나오는 것처럼 두 리스트를 합쳐도 입력으로 받은 두 리스트는 변경되지 않는다.</li></ul><p>스칼라에서는 List가 불변이라니 어떻게 그럴수가 있을까? 여기 스칼라로 작성된 불변 싱글 링크드 리스트 구현을 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> List<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">object</span> Nil <span class="token keyword">extends</span> List<span class="token punctuation">[</span><span class="token builtin">Nothing</span><span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Cons<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>head<span class="token operator">:</span> A<span class="token punctuation">,</span> tail<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token keyword">object</span> List <span class="token punctuation">{</span>  <span class="token keyword">def</span> apply<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>as<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> Nil    <span class="token keyword">else</span> Cons<span class="token punctuation">(</span>as<span class="token punctuation">.</span>head<span class="token punctuation">,</span> apply<span class="token punctuation">(</span>as<span class="token punctuation">.</span>tail<span class="token operator">:</span> _<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 코드를 사용하여 List를 생성해보자. (여기서는 List 동반객체companion object를 사용하면 된다.)</p><script src="https://scastie.scala-lang.org/icednut/pNNYh0CGRUSsAUDB1yfS3w.js"></script><pre><code>xs와 ys 자료 구조 형태Cons(&quot;a&quot;, tail)           ㄴㅡㅡ Cons(&quot;b&quot;, tail)                            ㄴㅡㅡ Nil</code></pre><p>여기서 List 트레이트와 Cons 케이스 클래스의 타입 파라미터에 왜  +A라고 붙였을까? 이유는 다음과 같다.</p><ul><li>Cons의 구성 요소로는 타입 A가 될 수도 있고 A의 하위 형식이 올 수도 있기 때문</li><li>(여기서 A의 하위 형식은 Nothing이 되고 Nothing은 모든 타입의 서브타입이다.)</li><li>여기서는 +A 는 공변(Covariant)를 뜻한다.</li></ul><p>만약 리스트의 타입 파라미터가 공변이 아니라면 어떻게 될까? 그럼 Cons와 같이 리스트에 데이터를 추가하는 행위를 할 수 없게 된다. (이유: <code>List[Nothing]</code> 타입인 Nil을 다룰 수 없기 때문)</p><script src="https://scastie.scala-lang.org/icednut/FxZrfkH6RBeL92ioJOmQWw.js"></script><blockquote><h5 id="공변-Covariant-과-불변-Invariant"><a href="#공변-Covariant-과-불변-Invariant" class="headerlink" title="공변(Covariant)과 불변(Invariant)"></a>공변(Covariant)과 불변(Invariant)</h5><p>예를 들어, 만일 Dog가 Animal의 서브타입이면 <code>List[Dog]</code>가 <code>List[Animal]</code>의 하위 형식으로 간주되도록 하고 싶을 경우 <code>trait List[+A]</code>라고 타입 파라미터에 +를 붙여주면 공변 타입 파라미터가 된다.</p><p><br></p><p>반면, 만약 A 앞에 +가 없다면 <code>List[Dog]</code>와 <code>List[Animal]</code>은 하위 형식 관계가 아닌 서로 다른 타입이 된다. 여기서 타입 파라미터를 불변(invariant)이라고 표현한다.</p></blockquote><p><br></p><p><br></p><h3 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h3><p>먼저 패턴 매칭을 쓴 메소드를 먼저 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> ints <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Nil <span class="token keyword">=></span> <span class="token number">0</span>    <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">+</span> sum<span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">def</span> product<span class="token punctuation">(</span>ds<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> ds <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Nil <span class="token keyword">=></span> <span class="token number">1.0</span>    <span class="token keyword">case</span> Cons<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token number">0.0</span>    <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">*</span> product<span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sum</code> 메소드부터 살펴보면, 파라미터로 받은 ints가 빈 배열일 경우(case Nil) 0을 반환하고, 첫 번째 요소가 있고 꼬리로 다음 리스트가 있을 경우(<code>case Cons(x, xs)</code>) 재귀적으로 요소를 더하는 과정을 거친다.</p><p>이렇게 패턴 매칭은 자료구조의 내용이 매칭되는지를 판단할 때 쓰인다. 또한 책에 따르면 재귀호출과 결합하여 쓰는 경우도 많다고 한다.</p><p>다음 패턴 매칭은 어떤 값을 반환할까?</p><ul><li><code>List(1,2,3) match { case _ =&gt; 42 }</code></li><li><code>List(1,2,3) match { case Cons(h, _) =&gt; h }</code></li><li><code>List(1,2,3) match { case Cons(_, t) =&gt; t }</code></li><li><code>List(1,2,3) match { case Nil =&gt; 42 }</code></li></ul><p>는 읽는 사람의 상상에..</p><p>참고로 스칼라 표준 라이브러리의 List를 써서 패턴 매칭을 할 경우 case Cons(h, t)로 쓰기보다는 case h :: t라고 쓴다. 즉 더 많은 요소를 추출하기 위해 괄호를 중첩할 필요 없이 case h :: h2 :: t 같이 간편하게 쓸 수 있다.</p><p><br></p><p><br></p><h3 id="함수적-자료구조에서의-Data-Sharing"><a href="#함수적-자료구조에서의-Data-Sharing" class="headerlink" title="함수적 자료구조에서의 Data Sharing"></a>함수적 자료구조에서의 Data Sharing</h3><p>앞에서 작성한 List가 불변이라면 해당 리스트에 요소를 추가하거나 요소를 제거하는 함수는 어떻게 작성할까?</p><p>답은 요소를 추가한 리스트를 반환하거나 요소를 제거한 리스트를 반환하는 함수를 만들면 된다.</p><h4 id="연습문제3-2"><a href="#연습문제3-2" class="headerlink" title="연습문제3.2)"></a>연습문제3.2)</h4><p>List의 첫 요소를 제거하는 함수 tail 구현하기</p><script src="https://scastie.scala-lang.org/icednut/ubFvVTh3QOikuMN5GlSuvw.js"></script><h4 id="연습문제3-3"><a href="#연습문제3-3" class="headerlink" title="연습문제3.3)"></a>연습문제3.3)</h4><p>List의 첫 요소를 다른 값으로 대체하는 함수 setHead 구현하기</p><script src="https://scastie.scala-lang.org/icednut/4RsjXHZZQRWzDMdf8Bszug.js"></script><p>Data Sharing을 사용하면 리스트의 끝에 다른 리스트를 붙이는 것을 할 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> append<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>a1<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> a2<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>     a1 <span class="token keyword">match</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Nil <span class="token keyword">=></span> a2        <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>h<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token keyword">=></span> Cons<span class="token punctuation">(</span>h<span class="token punctuation">,</span> append<span class="token punctuation">(</span>t<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="고차함수와-타입추론-그리고-고차함수-일반화"><a href="#고차함수와-타입추론-그리고-고차함수-일반화" class="headerlink" title="고차함수와 타입추론, 그리고 고차함수 일반화"></a>고차함수와 타입추론, 그리고 고차함수 일반화</h3><p>아래와 같이 고차함수가 있을 경우 이 고차함수를 호출할 때 넘기는 익명함수에는 익명함수의 파라미터를 명시해야 한다고 한다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> dropWhile<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>l<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span><span class="token keyword">val</span> xs<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">val</span> ex1 <span class="token operator">=</span> dropWhile<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>그러나 아래와 같이 커링을 사용하면 익명함수의 파라미터 타입이 고정되어 버린다. </p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> dropWhile<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span> <span class="token operator">=</span>     as <span class="token keyword">match</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>h<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token keyword">if</span> f<span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token keyword">=></span> dropWhile<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> as    <span class="token punctuation">}</span><span class="token keyword">val</span> xs<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">val</span> ex1 <span class="token operator">=</span> dropWhile<span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">(</span>x <span class="token keyword">=></span> x <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위와 같은 경우 커링되는 결과의 파라미터가 A로 고정되기 때문에 Int가 된다. 인수들을 이런 식으로 묶는 것은 스칼라의 타입 추론을 돕기 위한 행위라고 볼 수 있다.</p><p>위에서 본 sum과 product 코드를 보면 핵심 연산만 다를 뿐 패턴 매칭하는 과정이 비슷하다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ints<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> ints <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Nil <span class="token keyword">=></span> <span class="token number">0</span>    <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">+</span> sum<span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">def</span> product<span class="token punctuation">(</span>ds<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> ds <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Nil <span class="token keyword">=></span> <span class="token number">1.0</span>    <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">*</span> product<span class="token punctuation">(</span>xs<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이 경우 부분 표현식들을 추출해서 커링의 인수로 대체하는 것으로 일반화하는 것이 가능하다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> foldRight<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> as <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Nil <span class="token keyword">=></span> z    <span class="token keyword">case</span> Cons<span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span> <span class="token keyword">=></span> f<span class="token punctuation">(</span>x<span class="token punctuation">,</span> foldRight<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">def</span> sum<span class="token punctuation">(</span>ns<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> foldRight<span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token keyword">def</span> product<span class="token punctuation">(</span>ns<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Double</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> foldRight<span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">*</span> _<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 sum 메소드를 사용하면 다음과 같이 치환된다.</p><pre class="line-numbers language-scala"><code class="language-scala">foldRight<span class="token punctuation">(</span>Cons<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Nil<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">+</span> foldRight<span class="token punctuation">(</span>Cons<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Cons<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Nil<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> foldRight<span class="token punctuation">(</span>Cons<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Nil<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> foldRight<span class="token punctuation">(</span>Cons<span class="token punctuation">(</span>Nil<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br></p><p><br></p><h3 id="함수형-프로그래밍-스타일로-Binary-Tree-구현하기"><a href="#함수형-프로그래밍-스타일로-Binary-Tree-구현하기" class="headerlink" title="함수형 프로그래밍 스타일로 Binary Tree 구현하기"></a>함수형 프로그래밍 스타일로 Binary Tree 구현하기</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">sealed</span> <span class="token keyword">trait</span> Tree<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Leaf<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token keyword">extends</span> Tree<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token keyword">case</span> <span class="token keyword">class</span> Branch<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>left<span class="token operator">:</span> Tree<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token operator">:</span> Tree<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Tree<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>나중에 size, maximum, depth, map 함수를 작성해보자. 그리고 이 4개의 함수를 일반화한 fold도 작성해보자.</p>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스칼라 스터디 Day01 - 함수형 프로그래밍이란?</title>
      <link href="/2018/11/25/20181125-scala-and-functional-programming-day01/"/>
      <url>/2018/11/25/20181125-scala-and-functional-programming-day01/</url>
      
        <content type="html"><![CDATA[<p>출처: 스칼라로 배우는 함수형 프로그래밍 1장, 2장</p><h2 id="CHAPTER-01-함수형-프로그래밍이란-무엇인가"><a href="#CHAPTER-01-함수형-프로그래밍이란-무엇인가" class="headerlink" title="CHAPTER 01. 함수형 프로그래밍이란 무엇인가?"></a>CHAPTER 01. 함수형 프로그래밍이란 무엇인가?</h2><p>함수형 프로그래밍이란 부수 효과(Side Effect)가 없는 순수 함수(Pure Function)으로만 프로그램을 구축한다는 것을 의미한다. 그럼 <u>부수효과란 무엇일까? 결과를 돌려주는 것 이외에 어떤 일을 수행하는 함수를 카리켜 <strong>부수효과가 있는 함수</strong></u> 라고 칭한다.</p><ul><li>부수효과가 있는 함수 예시<ul><li>파라미터 변수를 수정한다.</li><li>자료구조를 제자리에서 수정한다.</li><li>객체의 필드를 설정한다.</li><li>에외(exception)을 던지거나 오류를 내면서 실행을 중단한다.</li><li>콘솔에 출력하거나 사용자의 입력을 읽어들인다.</li><li>파일에 기록하거나 파일에서 읽어들인다.</li><li>화면에 그린다.</li></ul></li></ul><p>이 책은 모든 종류의 프로그램을 부수 효과 없이 표현하는 방법을 설명한다. 부수 효과 없는 함수들로만 프로그램을 개발하면 뭐가 좋을까?</p><ul><li>순수 함수들로만 프로그램을 작성하면 모듈성(modularity)이 증가하게 됨</li><li>모듈성 덕분에 test, 재사용, 병렬화, 일반화, 분석이 쉬워 진다.</li><li>순수 함수는 버그가 생길 여지가 훨씬 적다 (부수 효과가 없기 때문)</li></ul><p>그럼 부수 효과가 있는 간단한 함수 예시를 바탕으로 부수 효과를 제거해가면서 FP의 이점을 살펴보자.</p><h3 id="Step1-부수-효과가-있는-프로그램"><a href="#Step1-부수-효과가-있는-프로그램" class="headerlink" title="Step1. 부수 효과가 있는 프로그램"></a>Step1. 부수 효과가 있는 프로그램</h3><p>커피숍에서 사용하는 커피구매 프로그램을 구현해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Cafe <span class="token punctuation">{</span>  <span class="token keyword">def</span> buyCoffee<span class="token punctuation">(</span>cc<span class="token operator">:</span> CreditCard<span class="token punctuation">)</span><span class="token operator">:</span> Coffee <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> cup <span class="token operator">=</span> <span class="token keyword">new</span> Coffee<span class="token punctuation">(</span><span class="token punctuation">)</span>    cc<span class="token punctuation">.</span>charge<span class="token punctuation">(</span>cup<span class="token punctuation">.</span>price<span class="token punctuation">)</span>    cup  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>buyCoffee 메소드는 부수 효과가 있는 메소드다. 왜?</p><ul><li>여기서 buyCoffee 메소드의 목적은 단지 하나. Coffee 객체를 돌려주는 것이다.</li><li>Coffee를 돌려주는 것 말고 그 외의 모든 동작은 부수 효과이다.</li><li>정확히 말하자면<code>cc.charge(cup.price)</code>가 부수 효과이다.</li><li>왜? 여기서 청구(charge)는 외부 세계와의 일정한 상호 작용이기 때문이다.</li></ul><p>부수 효과가 있으면 왜 안좋을까?</p><ul><li>테스트 코드를 작성하기 어려워 진다.</li><li><code>buyCoffee()</code> 메소드의 테스트 코드를 작성하기 위해 실제로 신용카드 회사와 연결해서 카드 이용 대금을 청구하고 싶지는 않을 것이다.</li><li>그러므로 신용카드 연동 방법에 관한 지식을 CreditCard에 집어넣는 것은 좋지 않다.</li></ul><p>그럼 어떻게 고칠까?</p><h3 id="Step2-커피-결제를-Payments로-분리하기"><a href="#Step2-커피-결제를-Payments로-분리하기" class="headerlink" title="Step2. 커피 결제를 Payments로 분리하기"></a>Step2. 커피 결제를 Payments로 분리하기</h3><p>커피 대금 지급을 위한 Payments 객체를 <code>buyCoffee</code>에 전달하면 코드의 모듈성(Modularity)과 검사성(Testability)을 좀 더 높일 수 있다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Cafe <span class="token punctuation">{</span>    <span class="token keyword">def</span> buyCoffee<span class="token punctuation">(</span>cc<span class="token operator">:</span> CreditCard<span class="token punctuation">,</span> p<span class="token operator">:</span> Payments<span class="token punctuation">)</span><span class="token operator">:</span> Coffee <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> cup <span class="token operator">=</span> <span class="token keyword">new</span> Coffee<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>charge<span class="token punctuation">(</span>cc<span class="token punctuation">,</span> cup<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        cup    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p: Payments</code> 파라미터 부분에 Mock 객체를 전달하여 결제에 대한 행동을 목킹할 수 있게 되었다. (검사성이 조금 높아짐)</p><p>그러나 이상적인 방법은 아니다. 왜?</p><ul><li>Payments를 인터페이스로 만들어야 한다. (Mock 구현을 넘겨주기 위해)</li><li>Payment를 목킹한다고 해도 charge 메소드 동작에 대한 상태 변이가 잘 되었는지 확인하는 코드가 필요<ul><li>Mock Framework를 써서 처리할 수 있지만 프레임워크를 사용하지 않고 해결할 수 있는 방법이 있다.</li></ul></li><li>buyCoffee 메소드는 재사용이 어렵다.<ul><li>만약 손님이 커피 열두 잔을 주문한다고 하자.</li><li>buyCoffee 메소드를 루프를 돌아서 12번 호출하면 문제가 발생한다.</li><li>신용카드를 12번 청구되기 때문에 수수료도 12번 지불된다. (수수료에 대해 중복 결제 발생)</li></ul></li></ul><h3 id="Step3-부수-효과가-제거된-buyCoffee"><a href="#Step3-부수-효과가-제거된-buyCoffee" class="headerlink" title="Step3. 부수 효과가 제거된 buyCoffee"></a>Step3. 부수 효과가 제거된 buyCoffee</h3><p>위 문제를 해결하기 위해 buyCoffee를 새로 만들어야 한다. <u>함수적 해법은 부수 효과(creditCard.charge 혹은 payment.charge)를 제거하고 buyCoffee가 Coffee 뿐만 아니라 청구건을 하나의 값으로 돌려주는 것</u>이다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Cafe <span class="token punctuation">{</span>    <span class="token keyword">def</span> buyCoffee<span class="token punctuation">(</span>cc<span class="token operator">:</span> CreditCard<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Coffee<span class="token punctuation">,</span> Charge<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> cup <span class="token operator">=</span> <span class="token keyword">new</span> Coffee<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>cup<span class="token punctuation">,</span> Charge<span class="token punctuation">(</span>cc<span class="token punctuation">,</span> cup<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>무슨 차이일까?</p><ul><li>청구건의 생성 문제(creditCard.charge 혹은 payment.charge)가 청구건의 처리 또는 연동 문제와 분리 되었다. (charge  메소드를 직접 호출하지 않아도 되기 때문에 연동을 신경쓰지 않아도 됨)</li><li>Charge에 결제 정보를 담아서 반환하기 때문에 여러 잔의 커피 구매에도 결제 정보 변경이 쉬워졌다. 어떻게 그럴까?</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Charge<span class="token punctuation">(</span>cc<span class="token operator">:</span> CreditCard<span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> combine<span class="token punctuation">(</span>other<span class="token operator">:</span> Charge<span class="token punctuation">)</span><span class="token operator">:</span> Charge <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>cc <span class="token operator">==</span> other<span class="token punctuation">.</span>cc<span class="token punctuation">)</span>            Charge<span class="token punctuation">(</span>cc<span class="token punctuation">,</span> amount <span class="token operator">+</span> other<span class="token punctuation">.</span>amount<span class="token punctuation">)</span>        <span class="token keyword">else</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> Exception<span class="token punctuation">(</span><span class="token string">"다른 종류의 카드끼리는 결제 정보를 결합할 수 없습니다."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>커피를 n잔 구매는 어떻게 할까?</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Cafe <span class="token punctuation">{</span>    <span class="token keyword">def</span> buyCoffee<span class="token punctuation">(</span>cc<span class="token operator">:</span> CreditCard<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Coffee<span class="token punctuation">,</span> Charge<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 이전과 같음 */</span> <span class="token punctuation">}</span>    <span class="token keyword">def</span> buyCoffees<span class="token punctuation">(</span>cc<span class="token operator">:</span> CreditCard<span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span>Coffee<span class="token punctuation">]</span><span class="token punctuation">,</span> Charge<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> purchases<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token punctuation">(</span>Coffee<span class="token punctuation">,</span> Charge<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">(</span>buyCoffee<span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// List.fill(n)(x)는 x의 복사본 n개로 이루어진 List를 생성한다.</span>        <span class="token keyword">val</span> <span class="token punctuation">(</span>coffees<span class="token punctuation">,</span> charges<span class="token punctuation">)</span> <span class="token operator">=</span> purchases<span class="token punctuation">.</span>unzip        <span class="token punctuation">(</span>coffees<span class="token punctuation">,</span> charges<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token keyword">=></span> c1<span class="token punctuation">.</span>combine<span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>뭐가 좋아진걸까?</p><ul><li>buyCoffee를 직접 재사용해서 여러번 구매가 가능해졌다. (buyCoffees 메소드)</li><li>두 메소드 모두 Payments 인터페이스를 추출해서 Mock 구현을 하지 않아도 되었다.</li><li>Cafe는 Charge의 대금이 어떻게 처리되는지 알 수 없게 되었기 때문에, 결제 연동을 신경쓸 필요가 없다.</li></ul><h3 id="순수-함수란-구체적으로-무엇인가"><a href="#순수-함수란-구체적으로-무엇인가" class="headerlink" title="순수 함수란 구체적으로 무엇인가?"></a>순수 함수란 구체적으로 무엇인가?</h3><pre class="line-numbers language-scala"><code class="language-scala">A <span class="token keyword">=></span> B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>위 표현식이 순수 함수라는 가정을 한다면,</p><ul><li>타입이 A인 모든 값 a를 각각 타입이 B인 하나의 값 b에 연관시키되, b가 오직 a에 의해서만 결정되어야 한다.</li><li>내부 또는 외부 공정의 상태 변경은 f(a)의 결과를 계산하는 데 어떠한 영향도 주지 않는다.</li><li>예를 들어 <code>Int =&gt; String</code>함수는 모든 정수를 그에 대응되는 문자열로 반환할 뿐, 그 이외의 일은 전혀 하지 않아야 한다.</li><li>또 다른 특성으로는 정수 값을 두 개 받고 정수 값 하나를 반환하는 함수가 있다고 하자.<ul><li>주어진 임의의 두 정수에 대해 항상 같은 값을 돌려준다.</li><li>그런 의미에서 String.length 메소드도 순수 함수다. (주어진 임의의 문자열에 대해 항상 같은 길이를 돌려주기만 하고 그 외의 일은 전혀 일어나지 않음)</li></ul></li></ul><p>위와 같은 속성을 <strong><u>참조 투명성</u></strong>이라고 한다.</p><ul><li>만일 어떤 표현식을 그 평가 결과로 바꾸어도 프로그램의 의미가 변하지 않는다면, 그 표현식은 참조에 투명한 것이다.</li><li>2 + 3은 하나의 표현식이고 그에 대한 결과는 5다. 여기서 2 + 3을 5로 바꾸어도 프로그램의 의미는 바뀌지 않는다.</li></ul><blockquote><h5 id="참조-투명성과-순수성"><a href="#참조-투명성과-순수성" class="headerlink" title="참조 투명성과 순수성"></a>참조 투명성과 순수성</h5><p>만일 모든 프로그램 p에 대해 표현식 e의 모든 출현(occurrence)을 e의 평가 결과로 치환해도 p의 의미에 아무 영향이 미치지 않는다면, 그 표현식 e는 <strong>참조에 투명하다</strong>(referentially transparent). 만일 ㅍ현식 f(x)가 참조에 투명한 모든 x에 대해 참조에 투명하면, 함수 f는 <strong>순수하다</strong>(pure).</p></blockquote><p>Step1에서 봤던 <code>buyCoffee</code> 메소드는 참조 투명할까?</p><ul><li>임의의 p라는 함수가 커피를 받는다고 가정하자.</li><li><code>p(buyCoffee(aliceCreditCard))</code>가 <code>p(new Coffee())</code>와 동일하게 작동해야 한다.<ul><li><code>new Coffee()</code>는 커피만 전달할 뿐 아무 일도 일어나지 않지만</li><li><code>buyCoffee(aliceCreditCard)</code>는 커피를 전달하는 것 뿐만 아니라 신용카드 회사에 연결하여 대금을 청구한다.</li><li>따라서 참조 투명하지 않다.</li></ul></li></ul><p>또 다른 예를 살펴보자.</p><h3 id="java-lang-StringBuilder는-참조-투명하지-않다"><a href="#java-lang-StringBuilder는-참조-투명하지-않다" class="headerlink" title="java.lang.StringBuilder는 참조 투명하지 않다."></a>java.lang.StringBuilder는 참조 투명하지 않다.</h3><p>왜 그럴까? 다음 예제 코드를 보자.</p><pre class="line-numbers language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token keyword">new</span> StringBuilder<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span>x<span class="token operator">:</span> StringBuilder <span class="token operator">=</span> Helloscala<span class="token operator">></span> <span class="token keyword">val</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">", world"</span><span class="token punctuation">)</span>y<span class="token operator">:</span> StringBuilder <span class="token operator">=</span> Hello<span class="token punctuation">,</span> world<span class="token keyword">val</span> r1 <span class="token operator">=</span> y<span class="token punctuation">.</span>toString <span class="token comment" spellcheck="true">// "Hello, world"</span><span class="token keyword">val</span> r2 <span class="token operator">=</span> y<span class="token punctuation">.</span>toString <span class="token comment" spellcheck="true">// "Hello, world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>r1과 r2는 같다. 여기서 y의 모든 출현을 append 호출로 치환하면 어떻게 될까?</p><pre><code>scala&gt; val x = new StringBuilder(&quot;Hello&quot;)x: StringBuilder = Helloscala&gt; val y = x.append(&quot;, world&quot;)y: StringBuilder = Hello, worldval r1 = x.append(&quot;, world&quot;).toStringval r2 = x.append(&quot;, world&quot;).toString</code></pre><p>r1과 r2의 결과는 같지 않다. (r1은 “Hello, world” r2는 “Hello, world, world”)</p><h2 id="Chapter-02-스칼라로-함수형-프로그래밍-시작하기"><a href="#Chapter-02-스칼라로-함수형-프로그래밍-시작하기" class="headerlink" title="Chapter 02. 스칼라로 함수형 프로그래밍 시작하기"></a>Chapter 02. 스칼라로 함수형 프로그래밍 시작하기</h2><p>이번 챕터에서 다루는 내용</p><ul><li>스칼라 언어의 몇 가지 기본 요소</li><li><strong>꼬리 재귀 함수</strong>를 이용한 루프 작성법</li><li><strong>고차 함수</strong> (다른 함수를 인수로 받는 함수, 결과로 또 다른 함수를 돌려줄 수도 있다.)</li><li><strong>다형적 고차함수</strong></li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> MyModule <span class="token punctuation">{</span>    <span class="token keyword">def</span> abs<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span>n        <span class="token keyword">else</span> n    <span class="token keyword">private</span> <span class="token keyword">def</span> formatAbs<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token string">"The absolute value of %d is %d"</span>        msg<span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">,</span> abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span>         println<span class="token punctuation">(</span>formatAbs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h5 id="object-키워드"><a href="#object-키워드" class="headerlink" title="object 키워드"></a>object 키워드</h5><p>object 키워드는 새로운 싱글톤 객체를 만든다.</p><p>스칼라에는 Java의 static 키워드에 해당하는 것이 없으며, Java에서 정적 멤버를 가진 클래스를 사용할 만한 상황일 때 Scala에서는 object를 사용한다.</p></blockquote><h4 id="예제코드를-통해-살펴본-스칼라의-기본-개념"><a href="#예제코드를-통해-살펴본-스칼라의-기본-개념" class="headerlink" title="예제코드를 통해 살펴본 스칼라의 기본 개념"></a>예제코드를 통해 살펴본 스칼라의 기본 개념</h4><ul><li>위의 예제 코드에서 abs와 formatAbs는 순수 함수이다.</li><li>main 메소드는 순수 함수를 호출하고 그 결과를 콘솔에 출력하는 일을 한다. 부수 효과가 발생함을 강조하기 위해 이런 메소드를 절차(Procedure) 또는 <strong>불순 함수</strong>(impure function)라고 부르기도 한다.</li><li>일반적으로, 반환 형식이 Unit이라는 것은 그 메서드에 부수 효과가 존재함을 암시한다.</li><li>MyModule 객체와 같이 자신의 멤버들에게 이름 공간을 제공하는 것이 주된 목적인 객체를 흔히 <strong>모듈</strong>(module)이라고 부른다.</li><li>스칼라에는 연산자(operator)라는 특별한 개념이 존재하지 않으며, 모든 행동은 메소드이다.</li></ul><h4 id="고차-함수"><a href="#고차-함수" class="headerlink" title="고차 함수"></a>고차 함수</h4><p>고차 함수(higher-order function, HOF; 또는 고계 함수)를 이해하기 위해, 계승을 구하는 factorial 함수를 작성해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> factorial<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> go<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> acc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> acc        <span class="token keyword">else</span> go<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">*</span>acc<span class="token punctuation">)</span>    go<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>factorial 함수의 본문 안에 재귀적인 보조 함수를 하나 정의함 (go)</li><li>이런 루프용 보조 함수에는 go나 loop 같은 이름을 붙이는 것이 관례</li><li>factorial 함수의 본문은 루프 초기 조건에 해당하는 값으로 go를 호출하는것 뿐이다.</li><li>go 함수는 factorial 함수 안에서만 호출이 가능함</li></ul><p>위 코드는 스칼라에서 꼬리 재귀 호출로 컴파일한다. 왜?</p><ul><li>go의 인수는 남아 있는 값 n과 현재 누적된 계승 acc 다음 반복으로 넘어갈 때는 go 자신을 호출한다.</li><li>루프에서 벗어날 때 (n &lt;= 0)는 재귀 호출 없이 값을 돌려준다.<ul><li>이러한 특성 때문에 재귀 호출이 꼬리 위치(tail position)에서 일어난다면 while 루프를 사용했을 때와 동일한 바이트코드로 컴파일한다. (스택을 소비하지 않는 루프 형태로 컴파일)</li></ul></li></ul><blockquote><h5 id="스칼라의-꼬리-호출"><a href="#스칼라의-꼬리-호출" class="headerlink" title="스칼라의 꼬리 호출"></a>스칼라의 꼬리 호출</h5><p>호출자가 재귀 호출의 결과를 그대로 돌려주는 것 외에는 아무 일도 하지 않을 때, 그런 호출을 꼬리 호출이라고 말한다.</p><ul><li>예를 들어 go(n-1, n*acc)는 꼬리 위치에서 일어난다.)</li></ul><p>반면 1 + go(n -1, n*acc) 같은 재귀 호출은 꼬리 호출이 아니다.</p><ul><li>go의 결과에 대해 다른 일(1을 더하는 것)을 수행해야 하기 때문</li></ul></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> MyModule <span class="token punctuation">{</span>    <span class="token keyword">def</span> abs<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span>n        <span class="token keyword">else</span> n    <span class="token keyword">private</span> <span class="token keyword">def</span> formatAbs<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token string">"The absolute value of %d is %d"</span>        msg<span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">,</span> abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">def</span> formatFactorial<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token string">"The factorial of %d is %d."</span>        msg<span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">,</span> factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span>formatAbs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        println<span class="token punctuation">(</span>formatFactorial<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>formatAbs와 formatFactorial을 하나의 함수 formatResult로 일반화 하면 어떨까?</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> formatResult<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> f<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token keyword">=></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token string">"The %s of %d is %d."</span>    msg<span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> n<span class="token punctuation">,</span> f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala">formatResult<span class="token punctuation">(</span><span class="token string">"absolute value"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span> abs<span class="token punctuation">)</span>formatResult<span class="token punctuation">(</span><span class="token string">"factorial"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> factorial<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>여기서 formatResult는 f라는 다른 함수를 받는 일종의 고차 함수이다.</u></p><ul><li>고차 함수의 인수에는 f, g, n 같은 이름을 사용하는 것이 관례.</li><li>FP에서는 아주 짧은 변수 이름을 사용하는 경향이 있다.</li><li>왜냐면 인수로 받은 함수가 실제로 수행하는 일에 대해 구체적으로 알지 못하기 때문이다. (고차함수는 그냥 인수의 형식만 알 뿐)</li></ul><h3 id="다형적-함수"><a href="#다형적-함수" class="headerlink" title="다형적 함수"></a>다형적 함수</h3><p>다형적 함수(polymorphic function)을 이해하기 위해, 예제를 살펴보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> findFirst<span class="token punctuation">(</span>ss<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@annotation</span><span class="token punctuation">.</span>tailrec    <span class="token keyword">def</span> loop<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> ss<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ss<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> n        <span class="token keyword">else</span> loop<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    loop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 배열의 첫 요소에서 루프를 시작한다.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>여기서는 String 배열로 한정되었지만, Int나 혹은 사용자가 정의한 타입의 배열에서 찾을 수 있게 일반화해보자.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> findFirst<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">(</span>as<span class="token operator">:</span> Array<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">:</span> A <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@annotation</span><span class="token punctuation">.</span>tailrec    <span class="token keyword">def</span> loop<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">(</span>as<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> n <span class="token comment" spellcheck="true">// 함수 p가 현재 요소와 부합한다면 원하는 요소를 찾은 것.</span>        <span class="token keyword">else</span> loop<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    loop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>파라미터 매개변수의 이름으로는 보통 [A, B, C] 같은 짧은 한 글자짜리 대문자를 사용하는게 관례</li><li>findFirst 함수 호출은 다음과 같이 한다.<ul><li><code>findFirst(Array(7, 9, 13), (x: Int) =&gt; x == 9)</code></li><li>여기서 Array(7, 9, 13)을 <strong>배열 리터럴</strong>이라 한다.</li><li>(x: Int) =&gt; x == 9는 <strong>함수 리터럴</strong> 혹은 <strong>익명 함수</strong>라 한다.</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> functional programming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gRPC 살펴보기 (gRPC Overview)</title>
      <link href="/2018/07/04/20180706-about-grpc/"/>
      <url>/2018/07/04/20180706-about-grpc/</url>
      
        <content type="html"><![CDATA[<h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ul><li><strong>About gRPC</strong><ul><li>Why gRPC?</li><li>gRPC 내부 구조 및 동작 과정</li><li>gRPC 개발 맛보기<ul><li>protobuf 정의</li><li>gRPC Server</li><li>gRPC Client</li></ul></li></ul></li><li><p><strong>gRPC 통신의 4가지 방식</strong></p><ul><li>Unary</li><li>Server Streaming</li><li>Client Streaming</li><li>양방향 Streaming</li></ul></li><li><strong>고민해볼 문제</strong><ul><li>Testing</li><li>Authenticatoin (TLS, OAuth)</li><li>Load Balancing (Client-side, Server-side)</li><li>Monitoring</li><li>Proxies, Web (REST Adapter, grpc-gateway)</li><li>Versioning</li></ul></li><li><strong>참고 자료</strong></li></ul><h2 id="About-gRPC"><a href="#About-gRPC" class="headerlink" title="About gRPC"></a>About gRPC</h2><p><strong>gRPC는 HTTP2 기반의 오픈 소스 하이 퍼포먼스 원격 프로시저 호출(RPC) 프레임워크 입니다.</strong> gRPC에서 클라이언트 어플리케이션은 다른 서버 어플리케이션의 메서드를 마치 로컬 객체인 것처럼 직접 호출할 수 있으므로 분산 어플리케이션 및 서비스를 보다 쉽게 만들 수 있습니다. 많은 RPC 처럼 gRPC는 서비스를 정의하고 파라미터 및 리턴 유형을 사용하여 원격으로 호출할 수있는 메소드를 지정한다는 아이디어를 기반으로 합니다.</p><blockquote><h5 id="RPC-Remote-Procedure-Call-이란"><a href="#RPC-Remote-Procedure-Call-이란" class="headerlink" title="RPC(Remote Procedure Call)이란?"></a>RPC(Remote Procedure Call)이란?</h5><p><strong>원격 프로시저 호출</strong>(remote procedure call, 리모트 프로시저 콜, RPC)은 별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게 하는 프로세스 간 통신 기술이다. 다시 말해, 원격 프로시저 호출을 이용하면 프로그래머는 함수가 실행 프로그램에 로컬 위치에 있든 원격 위치에 있든 동일한 코드를 이용할 수 있다.</p><p><img src="/images/20180706-about-grpc/rpc.png"></p><p>출처: <a href="https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9_%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80_%ED%98%B8%EC%B6%9C" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9_%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80_%ED%98%B8%EC%B6%9C</a></p></blockquote><p>또한 구글은 사내에서 Stubby라는 RPC 프레임워크를 만들어서 사용하고 있었는데 하루에 초당 100억건의 RPC Call을 처리한다고 합니다. 구글은 Stubby 다음 버전을 계획하면서 오픈소스로 외부에 공개하기로 결정하였고 이에 따라 gRPC가 탄생하게 되었습니다. 참고로 gRPC는 성능을 중요시하기 때문에 HTTP2 기반으로 동작합니다.</p><p><img src="/images/20180706-about-grpc/google_rpcs_per_second.png"></p><h3 id="잠깐-왜-이제와서-RPC를-거들먹거리는건가-Why-gRPC"><a href="#잠깐-왜-이제와서-RPC를-거들먹거리는건가-Why-gRPC" class="headerlink" title="잠깐! 왜 이제와서 RPC를 거들먹거리는건가? (Why gRPC?)"></a>잠깐! 왜 이제와서 RPC를 거들먹거리는건가? (Why gRPC?)</h3><ul><li>RPC 기술들: CORBA, DCOM, RMI (Java RMI)</li><li>CORBA (with Java)로 헬로 월드 찍어 보셨어요? (<a href="http://www.ejbtutorial.com/programming/tutorial-for-corba-hello-world-using-java" target="_blank" rel="noopener">http://www.ejbtutorial.com/programming/tutorial-for-corba-hello-world-using-java</a>)</li></ul><p>이렇게 힘든데 왜 구글은 RPC를 사용하는걸까요? 구글은 Stubby를 통해 다음과 같은 점들을 배웠다고 합니다. (gRPC Motivation)</p><ol><li>HTTP/JSON doesn`t cut it!</li><li>Establish a lingua granca[^1]</li><li>Design for fault tolerance and provide control knobs</li><li>Don`t fly blind: Service Analytics</li><li>Diagonosing problems: Tracing</li><li>Load Balancing is critical</li></ol><p>(시간 관계상 이 부분은 다른 자료로 대체하도록 하겠습니다. <a href="https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google" target="_blank" rel="noopener">https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google</a>)</p><p>그리하여 gRPC는 다음과 같은 사양 갖추었습니다.</p><ul><li>Transport: HTTP/2[^2]</li><li>Wire format: Protocol Buffers 3<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">^3</a> (Binary)</li><li>Service definition: Protocol Buffers IDL</li></ul><p>gRPC는 이런 HTTP/2의 특징을 기반으로 하기때문에 양방향 스트리밍이 가능하고, 기본적인 통신 속도가 빠릅니다. on-connection 상태에서 비동기 통신의 구현이 용이합니다. 정리하자면 gRPC를 사용해야할 이유는 다음과 같습니다.</p><ul><li>Binary protocol (HTTP/2),</li><li>Multiplexing many requests on one connection (HTTP/2)</li><li>Header compression (HTTP/2)</li><li>Strongly typed service and message definition (Protobuf)</li><li>Idiomatic client/server library implementations in many languages</li><li>gRPC Benchmarking: <a href="https://github.com/david-cao/gRPCBenchmarks" target="_blank" rel="noopener">https://github.com/david-cao/gRPCBenchmarks</a></li></ul><h3 id="gRPC의-특징"><a href="#gRPC의-특징" class="headerlink" title="gRPC의 특징"></a>gRPC의 특징</h3><ul><li><p><strong>간단한 서비스 정의 (Simple Service Definition)</strong></p><ul><li><p>서비스 정의(모델 정의, 통신 과정 정의)를 Protocol Buffer를 사용</p></li><li><p>Protocol Buffer는 XML과 같은 구조화된 데이터 정의라고 보면 되며, 일종의 IDL(Interface Definition Language)이다. (그러나 XML보다 직관적이고 표현이 풍부하다)</p></li><li><p>Protocol Buffer는 .proto 파일로 정의하며 서비스 인터페이스와 메세지 페이로드를 정의할 때 사용</p></li><li><p>protobuf example</p><pre class="line-numbers language-protobuf"><code class="language-protobuf">service HelloService <span class="token punctuation">{</span>  rpc <span class="token function">SayHello</span><span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> HelloRequest <span class="token punctuation">{</span>  <span class="token primitive symbol">string</span> greeting <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> HelloResponse <span class="token punctuation">{</span>  <span class="token primitive symbol">string</span> reply <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>다양한 언어와 플랫폼에서 동작 (Works across language and platforms)</strong></p><ul><li>protobuf로 생성한 서비스 정의에 따라 클라이언트와 서버에서 사용하는 언어에 맞게 모델과 인터페이스 Stubs를 생성</li><li>각 언어에 맞는 gRPC 프레임워크를 통해 개발 및 실행 진행</li><li>공식 지원하는 변환 타겟 언어: C/C++, C#, Dart*, Go, Java, Node.js, PHP*, Python, Ruby (*은 아직 Beta 단계)</li></ul><p><img src="/images/20180706-about-grpc/grpc_interoperability.png"></p></li><li><p><strong>양방향 스트리밍과 통합 인증 (Bi-directional streaming and integrated auth)</strong></p><ul><li>http/2 기반의 양방향 스트리밍과 조립 가능한 인증 및 인터셉터 인터페이스를 제공</li><li>인증에는 SSL/TLS 혹은 Google Token-based authentication을 사용하거나 직접 인증 시스템을 연동할 수 있음</li></ul></li></ul><h3 id="따라서-gRPC는-이런-곳에-적용하면-좋습니다"><a href="#따라서-gRPC는-이런-곳에-적용하면-좋습니다" class="headerlink" title="따라서 gRPC는 이런 곳에 적용하면 좋습니다."></a>따라서 gRPC는 이런 곳에 적용하면 좋습니다.</h3><ul><li>Server to Server</li><li>Server to Mobile device</li><li>ex) 주식 시장, 게임, 스마트홈 디바이스 등등</li></ul><h3 id="이쯤에서-gRPC의-내부-구조와-동작-과정을-살펴봅시다"><a href="#이쯤에서-gRPC의-내부-구조와-동작-과정을-살펴봅시다" class="headerlink" title="이쯤에서 gRPC의 내부 구조와 동작 과정을 살펴봅시다"></a>이쯤에서 gRPC의 내부 구조와 동작 과정을 살펴봅시다</h3><p>gRPC는 여러 가지 언어(C/C++, C#, Dart, Go, Java, Node.js, PHP, Python, Ruby에서 동작 가능합니다. 그러나 gRPC는 3가지 언어(C, Java, Go)로 동일하게 구현되어 있습니다.  그 외 나머지 언어들은 핵심은 C-Runtime 라이브러리로 형태로 개발하여 각 언어별로 랩핑되어 있습니다. 이렇게 한 이유는 개발 비용 절감과 구현, 언어별 퍼포먼스 일관성을 가져갈 수 있기 때문입니다.</p><ul><li>grpc-java (<a href="https://github.com/grpc/grpc-java" target="_blank" rel="noopener">https://github.com/grpc/grpc-java</a>)</li><li>grpc-go (<a href="https://github.com/grpc/grpc-go" target="_blank" rel="noopener">https://github.com/grpc/grpc-go</a>)</li><li>grpc (<a href="https://github.com/grpc/grpc" target="_blank" rel="noopener">https://github.com/grpc/grpc</a>)</li></ul><p>그 중에서 gRPC Java는 다음과 같은 아키텍처를 갖추고 있습니다.</p><p><img src="/images/20180706-about-grpc/grpc_architecture.png"></p><p><img src="/images/20180706-about-grpc/grpc_java.png"></p><p>gRPC 동작과정을 살펴보기 전에 간단하게 gRPC를 사용하여 Hello world 메세지를 주고 받는 Server, Client Java Application을 개발해보도록 하겠습니다. 개발 과정은 다음과 같습니다.</p><ol><li>Protocol Buffer 3 (IDL)을 이용하여 RPC 인터페이스 및 모델 정의</li><li>프로젝트 셋팅 (with Gradle)</li><li>서버 개발</li><li>클라이언트 개발</li></ol><h4 id="개발-과정"><a href="#개발-과정" class="headerlink" title="개발 과정"></a>개발 과정</h4><h5 id="1-프로젝트-셋팅-with-Gradle"><a href="#1-프로젝트-셋팅-with-Gradle" class="headerlink" title="1. 프로젝트 셋팅 (with Gradle)"></a>1. 프로젝트 셋팅 (with Gradle)</h5><pre class="line-numbers language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'com.google.protobuf'</span>targetCompatibility <span class="token operator">=</span> versionJavaLangsourceCompatibility <span class="token operator">=</span> versionJavaLangprotobuf <span class="token punctuation">{</span>    protoc <span class="token punctuation">{</span>        artifact <span class="token operator">=</span> <span class="token string">"com.google.protobuf:protoc:${protocVersion}"</span>    <span class="token punctuation">}</span>    plugins <span class="token punctuation">{</span>        grpc <span class="token punctuation">{</span>            artifact <span class="token operator">=</span> <span class="token string">"io.grpc:protoc-gen-grpc-java:${grpcVersion}"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    generateProtoTasks <span class="token punctuation">{</span>        <span class="token function">ofSourceSet</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token operator">.</span>each <span class="token punctuation">{</span> task <span class="token operator">-></span>            task<span class="token operator">.</span>builtins <span class="token punctuation">{</span>                java <span class="token punctuation">{</span>                    outputSubDir <span class="token operator">=</span> <span class="token string">'protoGen'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            task<span class="token operator">.</span>plugins <span class="token punctuation">{</span>                grpc <span class="token punctuation">{</span>                    outputSubDir <span class="token operator">=</span> <span class="token string">'protoGen'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    generatedFilesBaseDir <span class="token operator">=</span> <span class="token string">"$projectDir/src/"</span><span class="token punctuation">}</span>sourceSets <span class="token punctuation">{</span>    main <span class="token punctuation">{</span>        java <span class="token punctuation">{</span>            srcDir <span class="token string">'src/main/java'</span>            srcDir <span class="token string">'src/main/protoGen'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"com.google.api.grpc:proto-google-common-protos:1.0.0"</span><span class="token punctuation">)</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"com.google.protobuf:protobuf-java-util:${protobufVersion}"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task cleanProtoGen <span class="token punctuation">{</span>    doFirst <span class="token punctuation">{</span>        <span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"$projectDir/src/main/protoGen"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>clean<span class="token operator">.</span>dependsOn cleanProtoGen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-Protocol-Buffer-3을-이용하여-RPC-인터페이스-및-모델-정의"><a href="#2-Protocol-Buffer-3을-이용하여-RPC-인터페이스-및-모델-정의" class="headerlink" title="2. Protocol Buffer 3을 이용하여 RPC 인터페이스 및 모델 정의"></a>2. Protocol Buffer 3을 이용하여 RPC 인터페이스 및 모델 정의</h5><p>아래와 같이 모델과 RPC Stub 인터페이스를 정의합니다. 그런 뒤 Gradle의 generateProto를 수행하면 HelloRequest, HelloReply 모델 클래스와 커넥션 처리 로직이 담긴 Greeter Stub 클래스가 생성이 됩니다. 특이한 점은 모델 클래스 안에 파싱 로직이 담겨있고 Stub은 서버 측 뿐만 아니라 Java Client 측에서 호출할 수 있는 Stub 로직도 같이 생성됩니다. (서버 측 GreeterGrpc.GreeterImplBase, 클라이언트 측: GreeterGrpc.GreeterBlockingStub)</p><pre class="line-numbers language-protobuf"><code class="language-protobuf">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span>option java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>option java_package <span class="token operator">=</span> <span class="token string">"io.icednut.grpc.common.exercise.helloworld"</span><span class="token punctuation">;</span>option java_outer_classname <span class="token operator">=</span> <span class="token string">"HelloWorldProto"</span><span class="token punctuation">;</span>option objc_class_prefix <span class="token operator">=</span> <span class="token string">"HLW"</span><span class="token punctuation">;</span><span class="token keyword">package</span> helloworld<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Greeting 서비스 정의</span>service Greeter <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 파라미터로 받은 인사요청에 담긴 이름으로 인사 메세지가 담긴 모델 반환하기</span>  rpc <span class="token function">SayHello</span><span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>HelloReply<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token keyword">message</span> HelloRequest <span class="token punctuation">{</span>    <span class="token primitive symbol">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token keyword">message</span> HelloReply <span class="token punctuation">{</span>    <span class="token primitive symbol">string</span> <span class="token keyword">message</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-서버-개발"><a href="#3-서버-개발" class="headerlink" title="3. 서버 개발"></a>3. 서버 개발</h5><p>Java 서버 측 디펜던시를 추가합니다.</p><pre class="line-numbers language-groovy"><code class="language-groovy">compile <span class="token string">'io.grpc:grpc-netty:1.13.1'</span>compile <span class="token string">'io.grpc:grpc-protobuf:1.13.1'</span>compile <span class="token string">'io.grpc:grpc-stub:1.13.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Greeter 서비스를 개발합니다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreeterService</span> <span class="token keyword">extends</span> <span class="token class-name">GreeterGrpc<span class="token punctuation">.</span>GreeterImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>HelloRequest req<span class="token punctuation">,</span> StreamObserver<span class="token operator">&lt;</span>HelloReply<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HelloReply reply <span class="token operator">=</span> HelloReply<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Greeter 서비스 처리를 진행할 서버를 개발합니다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrpcCommonServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GrpcCommonServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Server server<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GrpcCommonServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>BindableService<span class="token operator">></span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        ServerBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> serverBuilder <span class="token operator">=</span> ServerBuilder<span class="token punctuation">.</span><span class="token function">forPort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        services<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>service <span class="token operator">-</span><span class="token operator">></span> serverBuilder<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>server <span class="token operator">=</span> serverBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Server started, listening on "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">blockUntilShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** shutting down gRPC server since JVM is shutting down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            GrpcCommonServer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** server shut down"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockUntilShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java Main 메소드에서 서버를 실행합니다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrpcServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        GrpcCommonServer server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GrpcCommonServer</span><span class="token punctuation">(</span><span class="token number">50551</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GreeterService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">blockUntilShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-서버측-동작-과정"><a href="#3-1-서버측-동작-과정" class="headerlink" title="3.1. 서버측 동작 과정"></a>3.1. 서버측 동작 과정</h5><p>서버측 동작 과정은 크게 서버 생성, 서버 실행 및 대기, 서버 종료 과정으로 나뉩니다. gRPC 프레임워크에 따라 RPC를 처리할 서버를 생성한 뒤 Netty 서버를 실행하고 Netty 서버가 소켓 및 HTTP2 프로토콜을 사용하여 RPC Call 요청 처리 대기를 합니다. RPC Call 요청이 들어오면 HTTP2 프로토콜로 바이너리 데이터를 주고 받는 방식으로 진행 됩니다. 서버 생성 과정을 살펴보면 다음과 같습니다.</p><p><strong>[서버 생성]</strong></p><p><img src="/images/20180706-about-grpc/grpc_server_sequence_diagram-build.png"></p><p>요청을 받을 프로세스의 포트와 요청에 부름을 받을 메소드가 담긴 service 객체를 조합하여 최종적으로 NettyServer를 생성한다</p><p>이렇게 생성한 서버에 start 메소드를 실행하면 요청 처리 대기 상태가 됩니다.</p><p><strong>[서버 실행]</strong></p><p><img src="/images/20180706-about-grpc/grpc_server_sequence_diagram-start.png"></p><p>요청 처리 대기 상태라는 말은 NioEventLoop가 실행되어 의미 있는 커넥션이 맺어질 때 <strong>io.grpc.netty.NettyServerTransport</strong> 와 <strong>io.grpc.netty.ProtocolNegotiators</strong>를 통해 <strong>io.grpc.netty.GrpcHttp2ConnectionHandler</strong> 타입의 응답 처리기(Handler)를 만들어서 클라이언트와의 연결 및 클라이언트와 주고 받는 데이터(byte array)를 처리하게 됩니다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ProtocolNegotiator <span class="token function">serverPlaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolNegotiator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Handler <span class="token function">newHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> GrpcHttp2ConnectionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">class</span> <span class="token class-name">PlaintextHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          handler<span class="token punctuation">.</span><span class="token function">handleProtocolNegotiationCompleted</span><span class="token punctuation">(</span>Attributes<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Grpc<span class="token punctuation">.</span>TRANSPORT_ATTR_REMOTE_ADDR<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PlaintextHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GrpcHttp2ConnectionHandler는 <strong>io.netty.handler.codec.http2.Http2ConnectionHandler</strong> 를 상속받은 구현체로 HTTP2 스펙을 따르며 그에 따른 커낵션 및 라이프사이클을 수행합니다.</p><p><img src="/images/20180706-about-grpc/grpc_server_sequence_diagram-connect.png"></p><p>그런 다음 클라이언트와 커낵션을 맺은 뒤 해당 커넥션과 protobuf Stub을 사용해서 byte array 형태의 데이터를 주고 받습니다. 앞의 Hello world 예제를 기준으로 설명하면 클라이언트는 sayHello()라는 함수를 호출하면 HelloRequest의 멤버인 String name을 byte array로 변환하여 전송합니다. 그러면 서버에서는 byte array stream으로 받고 연결을 끊지 않은채 스트림에서 데이터를 읽어와 <strong>io.grpc.protobuf.ProtoLiteUtils</strong> 클래스를 통해 모델 객체로 파싱합니다. (궁금해서 모델의 byte array를 열어보니 JSON 형태가 아닌 tag: value 형태의 문자열이었습니다.) 이렇게 파싱한 모델 객체와 byte array에 명시된 호출할 메소드를 호출하여 비로소 우리가 작성한 비지니스 로직을 실행하게 됩니다.</p><p><img src="/images/20180706-about-grpc/grpc_server_sequence_diagram-run.png"></p><h5 id="4-클라이언트-개발"><a href="#4-클라이언트-개발" class="headerlink" title="4. 클라이언트 개발"></a>4. 클라이언트 개발</h5><p>클라이언트는 일반 Java command line application으로 가정하고 진행하도록 하겠습니다. 먼저 아래와 같이 디펜던시를 추가합니다.</p><pre class="line-numbers language-groovy"><code class="language-groovy">compile <span class="token string">'io.grpc:grpc-netty:1.13.1'</span>compile <span class="token string">'io.grpc:grpc-protobuf:1.13.1'</span>compile <span class="token string">'io.grpc:grpc-stub:1.13.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>앞에 서버측에서 정의한 protobuf를 그대로 똑같이 사용하여 모델 및 Stub을 사용합니다. 그런 다음 해당 Stub을 사용하는 HelloWroldClient 클래스를 정의합니다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ManagedChannel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> GreeterGrpc<span class="token punctuation">.</span>GreeterBlockingStub blockingStub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloWorldClient</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>ManagedChannelBuilder<span class="token punctuation">.</span><span class="token function">forAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usePlaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">HelloWorldClient</span><span class="token punctuation">(</span>ManagedChannel channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> channel<span class="token punctuation">;</span>        blockingStub <span class="token operator">=</span> GreeterGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>여기서 서버와의 접속 수단인 ManagedChannel 객체를 생성하고 Stub에 조립하여 사용합니다. 이렇게 하면 사실 개발자는 내부 통신 과정을 알 필요가 없습니다. 그 다음 stub.sayHello() 메소드를 사용하면 개발자가 보기엔 서버측의 메소드를 사용한 것처럼 보이지만 내부적으로는 Netty Client를 통해 HTTP2 방식으로 byte array 데이터를 전송하게 됩니다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ManagedChannel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> GreeterGrpc<span class="token punctuation">.</span>GreeterBlockingStub blockingStub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloWorldClient</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>ManagedChannelBuilder<span class="token punctuation">.</span><span class="token function">forAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usePlaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">HelloWorldClient</span><span class="token punctuation">(</span>ManagedChannel channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> channel<span class="token punctuation">;</span>        blockingStub <span class="token operator">=</span> GreeterGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HelloRequest request <span class="token operator">=</span> HelloRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloReply response<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response <span class="token operator">=</span> blockingStub<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StatusRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span> <span class="token string">"RPC failed: {0}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Greeting: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-1-클라이언트-측-동작-과정"><a href="#4-1-클라이언트-측-동작-과정" class="headerlink" title="4.1. 클라이언트 측 동작 과정"></a>4.1. 클라이언트 측 동작 과정</h5><p>클라이언트 측은 사실 Stub 객체의 동작과정만 잘 알면 됩니다. 그 안에서 데이터 변환 및 서버 호출을 결정하고 수행하고 있습니다.</p><pre><code>1.io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND SETTINGS: ack=false settings={ENABLE_PUSH=0, MAX_CONCURRENT_STREAMS=0, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_SIZE=8192}io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=983041io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND SETTINGS: ack=false settings={MAX_CONCURRENT_STREAMS=2147483647, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_SIZE=8192}io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND SETTINGS: ack=trueio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=9830412.io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND DATA: streamId=3 padding=0 endStream=true length=14 bytes=00000000090a05776f726c64100a3.io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND HEADERS: streamId=3 headers=GrpcHttp2ResponseHeaders[:status: 200, content-type: application/grpc, grpc-encoding: identity, grpc-accept-encoding: gzip] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false4.io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND DATA: streamId=3 padding=0 endStream=false length=18 bytes=000000000d0a0b48656c6c6f20776f726c645.io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND HEADERS: streamId=3 headers=GrpcHttp2ResponseHeaders[grpc-status: 0] streamDependency=0 weight=16 exclusive=false padding=0 endStream=true6.io.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND GO_AWAY: lastStreamId=0 errorCode=0 length=0 bytes=</code></pre><h2 id="gRPC-통신의-4가지-방식"><a href="#gRPC-통신의-4가지-방식" class="headerlink" title="gRPC 통신의 4가지 방식"></a>gRPC 통신의 4가지 방식</h2><p>길찾기(?) 서비스를 통해 gRPC의 4가지 통신 방식을 살펴보도록 하겠습니다. 먼저 protobuf를 먼저 정의합니다.</p><pre class="line-numbers language-protobuf"><code class="language-protobuf">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span>option java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>option java_package <span class="token operator">=</span> <span class="token string">"io.grpc.examples.routeguide"</span><span class="token punctuation">;</span>option java_outer_classname <span class="token operator">=</span> <span class="token string">"RouteGuideProto"</span><span class="token punctuation">;</span>option objc_class_prefix <span class="token operator">=</span> <span class="token string">"RTG"</span><span class="token punctuation">;</span><span class="token keyword">package</span> routeguide<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// RouteGuide 서비스 정의합니다.</span><span class="token comment" spellcheck="true">// 서비스가 제공하는 RPC 메서드를 선언하고, 각 메서드의 요청/응답 메시지를 정의합니다.</span>service RouteGuide <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 단순한 RPC</span>  <span class="token comment" spellcheck="true">// 클라이언트에서 요청를 보내고 서버의 응답을 리턴합니다</span>  rpc <span class="token function">GetFeature</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>Feature<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 서버에서 클라이언트로 스트리밍하는 RPC</span>  <span class="token comment" spellcheck="true">// 클라이언트에서 요청을 보내고 서버로 부터 더이상 받을 메시지가 없을때까지</span>  <span class="token comment" spellcheck="true">// 스트림(sequence of messages)을 읽습니다</span>  <span class="token comment" spellcheck="true">// 스트림을 사용하기 위해서 stream 키워드를 사용합니다</span>  rpc <span class="token function">ListFeatures</span><span class="token punctuation">(</span>Rectangle<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>stream Feature<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 클라이언트에서 서버로 스트리밍하는 RPC</span>  <span class="token comment" spellcheck="true">// 클라이언트에서 스트림을 모두 서버에 쓰고 끝나면 서버의 응답을 리턴합니다</span>  rpc <span class="token function">RecordRoute</span><span class="token punctuation">(</span>stream Point<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>RouteSummary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 양방향 스트리밍 RPC</span>  <span class="token comment" spellcheck="true">// 클라이언트와 서버가 서로 독립적으로 스트림을 읽고 씁니다.</span>  rpc <span class="token function">RouteChat</span><span class="token punctuation">(</span>stream RouteNote<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>stream RouteNote<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 서비스의 요청/응답 메시지와 타입 정의를 작성합니다.</span><span class="token keyword">message</span> Point <span class="token punctuation">{</span>  <span class="token primitive symbol">int32</span> latitude <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int32</span> longitude <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> Rectangle <span class="token punctuation">{</span>  Point lo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Point hi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> Feature <span class="token punctuation">{</span>  <span class="token primitive symbol">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Point location <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> FeatureDatabase <span class="token punctuation">{</span>  <span class="token builtin">repeated</span> Feature feature <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// repeated를 사용하면 자바에서 List&lt;Feature>로 생성</span><span class="token punctuation">}</span><span class="token keyword">message</span> RouteNote <span class="token punctuation">{</span>  Point location <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token primitive symbol">string</span> <span class="token keyword">message</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> RouteSummary <span class="token punctuation">{</span>  <span class="token primitive symbol">int32</span> point_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;-- 추후 메시지 변화에 따른 하위 호환성을 위해서 숫자를 지정해야함.</span>  <span class="token primitive symbol">int32</span> feature_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int32</span> distance <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token primitive symbol">int32</span> elapsed_time <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-Unary-call"><a href="#1-Unary-call" class="headerlink" title="1. Unary call"></a>1. Unary call</h3><h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideService</span> <span class="token keyword">extends</span> <span class="token class-name">RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFeature</span><span class="token punctuation">(</span>Point request<span class="token punctuation">,</span> StreamObserver<span class="token operator">&lt;</span>Feature<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token function">checkFeature</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ManagedChannel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideBlockingStub blockingStub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RouteGuideClient</span><span class="token punctuation">(</span>ManagedChannelBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> channelBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        channel <span class="token operator">=</span> channelBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingStub <span class="token operator">=</span> RouteGuideGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFeature</span><span class="token punctuation">(</span><span class="token keyword">int</span> lat<span class="token punctuation">,</span> <span class="token keyword">int</span> lon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Point request <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token punctuation">.</span><span class="token function">setLatitude</span><span class="token punctuation">(</span>lat<span class="token punctuation">)</span>                             <span class="token punctuation">.</span><span class="token function">setLongitude</span><span class="token punctuation">(</span>lon<span class="token punctuation">)</span>                             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Feature feature<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            feature <span class="token operator">=</span> blockingStub<span class="token punctuation">.</span><span class="token function">getFeature</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StatusRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Server-Streaming"><a href="#2-Server-Streaming" class="headerlink" title="2. Server Streaming"></a>2. Server Streaming</h3><h5 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideService</span> <span class="token keyword">extends</span> <span class="token class-name">RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listFeatures</span><span class="token punctuation">(</span>Rectangle request<span class="token punctuation">,</span> StreamObserver<span class="token operator">&lt;</span>Feature<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getLo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getLo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getLo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bottom <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getLo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Feature feature <span class="token operator">:</span> features<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RouteGuideUtil<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> lat <span class="token operator">=</span> feature<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lon <span class="token operator">=</span> feature<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lon <span class="token operator">>=</span> left <span class="token operator">&amp;&amp;</span> lon <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> lat <span class="token operator">>=</span> bottom <span class="token operator">&amp;&amp;</span> lat <span class="token operator">&lt;=</span> top<span class="token punctuation">)</span> <span class="token punctuation">{</span>                responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ManagedChannel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideBlockingStub blockingStub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RouteGuideClient</span><span class="token punctuation">(</span>ManagedChannelBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> channelBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        channel <span class="token operator">=</span> channelBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingStub <span class="token operator">=</span> RouteGuideGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listFeatures</span><span class="token punctuation">(</span><span class="token keyword">int</span> lowLat<span class="token punctuation">,</span> <span class="token keyword">int</span> lowLon<span class="token punctuation">,</span> <span class="token keyword">int</span> hiLat<span class="token punctuation">,</span> <span class="token keyword">int</span> hiLon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Rectangle request <span class="token operator">=</span>                Rectangle<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setLo</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLatitude</span><span class="token punctuation">(</span>lowLat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLongitude</span><span class="token punctuation">(</span>lowLon<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setHi</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLatitude</span><span class="token punctuation">(</span>hiLat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLongitude</span><span class="token punctuation">(</span>hiLon<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Feature<span class="token operator">></span> features<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            features <span class="token operator">=</span> blockingStub<span class="token punctuation">.</span><span class="token function">listFeatures</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> features<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Feature feature <span class="token operator">=</span> features<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Result #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": {0}"</span><span class="token punctuation">,</span> feature<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StatusRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Client-Streaming"><a href="#3-Client-Streaming" class="headerlink" title="3. Client Streaming"></a>3. Client Streaming</h3><h5 id="Server-2"><a href="#Server-2" class="headerlink" title="Server"></a>Server</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideService</span> <span class="token keyword">extends</span> <span class="token class-name">RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> StreamObserver<span class="token operator">&lt;</span>Point<span class="token operator">></span> <span class="token function">recordRoute</span><span class="token punctuation">(</span>StreamObserver<span class="token operator">&lt;</span>RouteSummary<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token operator">&lt;</span>Point<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pointCount<span class="token punctuation">;</span>            <span class="token keyword">int</span> featureCount<span class="token punctuation">;</span>            <span class="token keyword">int</span> distance<span class="token punctuation">;</span>            Point previous<span class="token punctuation">;</span>            <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Point point<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pointCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>RouteGuideUtil<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token function">checkFeature</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    featureCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    distance <span class="token operator">+=</span> <span class="token function">calcDistance</span><span class="token punctuation">(</span>previous<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                previous <span class="token operator">=</span> point<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span> <span class="token string">"Encountered error in recordRoute"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> seconds <span class="token operator">=</span> NANOSECONDS<span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>RouteSummary<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPointCount</span><span class="token punctuation">(</span>pointCount<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setFeatureCount</span><span class="token punctuation">(</span>featureCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDistance</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> seconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Client-2"><a href="#Client-2" class="headerlink" title="Client"></a>Client</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ManagedChannel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideStub asyncStub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RouteGuideClient</span><span class="token punctuation">(</span>ManagedChannelBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> channelBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        channel <span class="token operator">=</span> channelBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncStub <span class="token operator">=</span> RouteGuideGrpc<span class="token punctuation">.</span><span class="token function">newStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordRoute</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Feature<span class="token operator">></span> features<span class="token punctuation">,</span> <span class="token keyword">int</span> numPoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> CountDownLatch finishLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StreamObserver<span class="token operator">&lt;</span>RouteSummary<span class="token operator">></span> responseObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token operator">&lt;</span>RouteSummary<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>RouteSummary summary<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// summary 처리</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>testHelper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    testHelper<span class="token punctuation">.</span><span class="token function">onRpcError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finishLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                finishLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        StreamObserver<span class="token operator">&lt;</span>Point<span class="token operator">></span> requestObserver <span class="token operator">=</span> asyncStub<span class="token punctuation">.</span><span class="token function">recordRoute</span><span class="token punctuation">(</span>responseObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numPoints<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Point point <span class="token operator">=</span> features<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                requestObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>finishLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            requestObserver<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        requestObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>finishLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"recordRoute can not finish within 1 minutes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-양방향-Streaming"><a href="#4-양방향-Streaming" class="headerlink" title="4. 양방향 Streaming"></a>4. 양방향 Streaming</h3><h5 id="Server-3"><a href="#Server-3" class="headerlink" title="Server"></a>Server</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideService</span> <span class="token keyword">extends</span> <span class="token class-name">RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> StreamObserver<span class="token operator">&lt;</span>RouteNote<span class="token operator">></span> <span class="token function">routeChat</span><span class="token punctuation">(</span>StreamObserver<span class="token operator">&lt;</span>RouteNote<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token operator">&lt;</span>RouteNote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>RouteNote note<span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>RouteNote<span class="token operator">></span> notes <span class="token operator">=</span> <span class="token function">getOrCreateNotes</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Respond with all previous notes at this location.</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteNote prevNote <span class="token operator">:</span> notes<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RouteNote</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>prevNote<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Now add the new note to the list</span>                notes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span> <span class="token string">"Encountered error in routeChat"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Client-3"><a href="#Client-3" class="headerlink" title="Client"></a>Client</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteGuideClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ManagedChannel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RouteGuideGrpc<span class="token punctuation">.</span>RouteGuideStub asyncStub<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RouteGuideClient</span><span class="token punctuation">(</span>ManagedChannelBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> channelBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        channel <span class="token operator">=</span> channelBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        asyncStub <span class="token operator">=</span> RouteGuideGrpc<span class="token punctuation">.</span><span class="token function">newStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> CountDownLatch <span class="token function">routeChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> CountDownLatch finishLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StreamObserver<span class="token operator">&lt;</span>RouteNote<span class="token operator">></span> requestObserver <span class="token operator">=</span>                asyncStub<span class="token punctuation">.</span><span class="token function">routeChat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token operator">&lt;</span>RouteNote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>RouteNote note<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"RouteChat Failed: {0}"</span><span class="token punctuation">,</span> Status<span class="token punctuation">.</span><span class="token function">fromThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>testHelper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            testHelper<span class="token punctuation">.</span><span class="token function">onRpcError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        finishLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Finished RouteChat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        finishLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RouteNote<span class="token punctuation">[</span><span class="token punctuation">]</span> requests <span class="token operator">=</span>                    <span class="token punctuation">{</span><span class="token function">newNote</span><span class="token punctuation">(</span><span class="token string">"First message"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newNote</span><span class="token punctuation">(</span><span class="token string">"Second message"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token function">newNote</span><span class="token punctuation">(</span><span class="token string">"Third message"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newNote</span><span class="token punctuation">(</span><span class="token string">"Fourth message"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteNote request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                requestObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            requestObserver<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        requestObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> finishLatch<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="고민해볼-문제"><a href="#고민해볼-문제" class="headerlink" title="고민해볼 문제"></a>고민해볼 문제</h2><ul><li><h5 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h5><ul><li>gRPC client <a href="https://www.npmjs.com/package/grpcc" target="_blank" rel="noopener">https://www.npmjs.com/package/grpcc</a></li><li>gRPC JUnit Test <a href="https://grpc.io/blog/gracefully_clean_up_in_grpc_junit_tests" target="_blank" rel="noopener">https://grpc.io/blog/gracefully_clean_up_in_grpc_junit_tests</a></li></ul></li><li><h5 id="Authenticatoin"><a href="#Authenticatoin" class="headerlink" title="Authenticatoin"></a>Authenticatoin</h5><ul><li>TLS, OAuth</li></ul></li><li><h5 id="Load-Balancing-Client-side-Server-side"><a href="#Load-Balancing-Client-side-Server-side" class="headerlink" title="Load Balancing (Client-side, Server-side)"></a>Load Balancing (Client-side, Server-side)</h5><ul><li>Load Balancing in gRPC <a href="https://grpc.io/blog/loadbalancing" target="_blank" rel="noopener">https://grpc.io/blog/loadbalancing</a> <a href="https://github.com/grpc/grpc/blob/master/doc/load-balancing.md" target="_blank" rel="noopener">https://github.com/grpc/grpc/blob/master/doc/load-balancing.md</a></li><li>gRPC Load Balancing Example in Kubernetes <a href="https://github.com/saturnism/grpc-java-by-example/tree/master/kubernetes-lb-example" target="_blank" rel="noopener">https://github.com/saturnism/grpc-java-by-example/tree/master/kubernetes-lb-example</a></li><li>Spring-gRPC Load Balancing with Eureka <a href="https://github.com/saturnism/grpc-java-by-example/tree/master/springboot-example" target="_blank" rel="noopener">https://github.com/saturnism/grpc-java-by-example/tree/master/springboot-example</a></li></ul></li><li><h5 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h5><ul><li>Zipkin, Prometheus, Statsd, Google, DIY</li><li>java-grpc-prometheus example <a href="https://github.com/grpc-ecosystem/java-grpc-prometheus" target="_blank" rel="noopener">https://github.com/grpc-ecosystem/java-grpc-prometheus</a></li></ul></li><li><h5 id="Proxies-Web"><a href="#Proxies-Web" class="headerlink" title="Proxies, Web"></a>Proxies, Web</h5><ul><li>haproxy, traefik, grpc-gateway</li><li>Grpc LB, Service Discovery (etcd, zookeeper, eureka)</li></ul></li><li><h5 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h5></li></ul><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><ul><li><a href="https://grpc.io/docs/guides/concepts.html" target="_blank" rel="noopener">https://grpc.io/docs/guides/concepts.html</a></li><li><a href="https://github.com/grpc/grpc-java" target="_blank" rel="noopener">https://github.com/grpc/grpc-java</a></li><li><a href="https://github.com/grpc/grpc-web" target="_blank" rel="noopener">https://github.com/grpc/grpc-web</a></li><li><a href="https://github.com/grpc-ecosystem" target="_blank" rel="noopener">https://github.com/grpc-ecosystem</a></li><li><p><a href="https://github.com/grpc-ecosystem/awesome-grpc" target="_blank" rel="noopener">https://github.com/grpc-ecosystem/awesome-grpc</a></p></li><li><p><a href="https://github.com/saturnism/grpc-java-by-example" target="_blank" rel="noopener">https://github.com/saturnism/grpc-java-by-example</a></p></li><li><a href="https://medium.com/@goinhacker/microservices-with-grpc-d504133d191d" target="_blank" rel="noopener">https://medium.com/@goinhacker/microservices-with-grpc-d504133d191d</a></li><li><a href="https://www.slideshare.net/borisovalex/enabling-googley-microservices-with-http2-and-grpc?next_slideshow=1" target="_blank" rel="noopener">https://www.slideshare.net/borisovalex/enabling-googley-microservices-with-http2-and-grpc?next_slideshow=1</a></li><li><a href="https://www.slideshare.net/VarunTalwar4/grpc-design-and-implementation" target="_blank" rel="noopener">https://www.slideshare.net/VarunTalwar4/grpc-design-and-implementation</a></li><li><a href="https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google" target="_blank" rel="noopener">https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google</a></li><li><a href="http://www.baeldung.com/grpc-introduction" target="_blank" rel="noopener">http://www.baeldung.com/grpc-introduction</a></li><li>Armeria</li></ul><p>[^1]: 링구아 프랑카(lingua franca)는 서로 다른 모어를 사용하는 화자들이 의사소통을 하기 위해 공통어로 사용하는 제 3의 언어(때로는 한 집단의 모어)를 말하며 국가나 단체에서 공식적으로 정한 언어를 뜻하는 공용어와는 다른 개념이다. 정의를 통해 알 수 있듯, <strong>링구아 프랑카</strong>는 특정 언어를 지칭하는 표현이 아니라, 언어 가교의 기능을 수행하는 언어들을 통칭하는 표현이다. 여기에서 의미가 파생되어 학술, 상업 등의 특정 분야에서 널리 사용되는 언어라는 뜻으로 사용되기도 한다. 피진이나 크리올은 <strong>링구아 프랑카</strong>와 유사한 개념이지만 정의상 완전히 일치하지는 않는다. (그러나 대다수가 언어 가교의 기능을 수행하기에 많은 부분 겹친다고 볼 수 있다) - <a href="https://ko.wikipedia.org/wiki/%EB%A7%81%EA%B5%AC%EC%95%84_%ED%94%84%EB%9E%91%EC%B9%B4" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/%EB%A7%81%EA%B5%AC%EC%95%84_%ED%94%84%EB%9E%91%EC%B9%B4</a><br>[^2]: HTTP/1은 기본적으로 클라이언트가 서버에 요청을 보내고, 서버가 요청에 대한 응답을 보내는 구조입니다. 따라서 요청 단위로 클라이언트와 서버를 왕복해야 합니다. 또한 쿠키를 포함한 헤더 크기는 불필요하게 큽니다. 이런 특징때문에 HTTP/1은 느립니다. 성능을 개선하기 위해서 구글은 SPDY를 개발하고, 이를 기반으로 HTTP/2 표준이 만들어집니다. 성능이 개선된 HTTP/2의 주요 특징은 아래와 같습니다. <strong>Header Compression</strong>: Header Table과 Huffman Encoding 기법을 사용하여 HTTP/2 헤더정보를 압축하였습니다. <strong>Multiplexed Streams</strong>: HTTP/1에서 요청마다 새로운 커넥션을 자주 만드는 것과는 달리 HTTP/2는 한개의 커넥션으로 동시에 여러개의 메시지를 주고 받을 수 있습니다. <strong>Server Push</strong>: HTTP/2에서는 클라이언트의 요청없이도 서버가 리소스를 보낼 수 있습니다. 클라이언트 요청이 최소화되기 때문에 성능이 향상될 수 있습니다. <strong>Stream Priority</strong>: 요청에 우선순위를 지정하여 중요한 리소스를 먼저 전달받을 수 있습니다. <a href="http://www.http2demo.io/" target="_blank" rel="noopener">http://www.http2demo.io/</a>  <a href="http://http2.golang.org/gophertiles?latency=1000" target="_blank" rel="noopener">http://http2.golang.org/gophertiles?latency=1000</a></p><p><img src="/images/20180706-about-grpc/http2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java9에서의 Stream에 관한 짧은 팁</title>
      <link href="/2018/05/24/20180524-java-stream-tips/"/>
      <url>/2018/05/24/20180524-java-stream-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p><code>가장 빨리 만나는 코어 자바9</code> 책을 읽다가 실무에서도 많이 쓰일 것 같은 Java9에서의 Stream 다루기가 나오길래 정리!! </p><h2 id="null이-제거된-Stream-얻기"><a href="#null이-제거된-Stream-얻기" class="headerlink" title="null이 제거된 Stream 얻기"></a>null이 제거된 Stream 얻기</h2><h3 id="id-목록-스트림이-있고-아래의-lookup-메소드를-이용하여-얻어진-User-목록-중-null이-제거된-목록-스트림을-얻어내려면-어떻게-할까"><a href="#id-목록-스트림이-있고-아래의-lookup-메소드를-이용하여-얻어진-User-목록-중-null이-제거된-목록-스트림을-얻어내려면-어떻게-할까" class="headerlink" title="id 목록 스트림이 있고, 아래의 lookup 메소드를 이용하여 얻어진 User 목록 중 null이 제거된 목록 스트림을 얻어내려면 어떻게 할까?"></a>id 목록 스트림이 있고, 아래의 lookup 메소드를 이용하여 얻어진 User 목록 중 null이 제거된 목록 스트림을 얻어내려면 어떻게 할까?</h3><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">lookup</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>보통 아래와 같이 작성할 것이다.</p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> ids <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Users<span class="token operator">:</span><span class="token operator">:</span>lookup<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Optional<span class="token operator">:</span><span class="token operator">:</span>isPresent<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Optinal<span class="token operator">:</span><span class="token operator">:</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>하지만 flatMap을 이용하면 좀 더 우아하게 작성할 수 있다.</p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Users<span class="token operator">:</span><span class="token operator">:</span>lookup<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Optional<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>이렇게 stream으로 변환하면 각 stream 호출은 User 인스턴스가 없거나 혹은 1개로 구성된 stream을 반환한다. 그 후 flatMap 메소드에서 이 스트림들을 결합하면 null인 user 인스턴스는 제거되어 처리된다.</p><blockquote><p>라고 책에서 봤는데 실제로 그런가 해서 코드를 뜯어봤더니 flatMap 메소드를 호출한다고 해서 null 인스턴스가 그 즉시 제거되는 것은 아니었다.</p><p>정확히 말하자면 결과를 모으는 작업, 즉 collect 메소드를 호출할 때 flatMap의 파라미터로 들어온 Function 람다를 실행(apply 메소드 호출)을 하게 된다.  이 때 람다는 위에서 작성한 <code>Optaion&lt;User&gt;</code>를 <code>Stream&lt;User&gt;</code>로 변환하는 람다인데 null 인스턴스를 품고 있는 Optional일 경우 <code>Stream.empty()</code>을 통해 빈 스트림으로 변환하고 결과를 모으는 Spliterator는 EmptySpliterator로 결정되어 결국엔 결과를 모으는 작업에서 제외된다. 그렇기 때문에 결국 null인 user 인스턴스가 제거된다.</p></blockquote><p><del>뭔 소리여?</del></p><p>일단 아래와 같이 flatMap 메소드까지 호출해서 얻어낸 stream은 결과가 처리되기를 기다리고 있는 stream 인스턴스가 반환된다.</p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Users<span class="token operator">:</span><span class="token operator">:</span>lookup<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Optional<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>아래와 같이 collect 메소드를 호출해야지만 map과 flatMap에 주어진 람다를 호출해서 걸러진 결과가 ArrayList로 모아진다. 이렇게 결과를 모을 때 처리과정을 살펴보자.</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Users<span class="token operator">:</span><span class="token operator">:</span>lookup<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Optional<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>일단 map은 생략하고 flatMap 메소드의 코드를 살펴보자. ids는 Array의 stream이기 때문에 <code>ReferencePipeline.Head</code> 인스턴스로 시작되는 스트림으로 결정된다. 이후 map을 거쳐 flatMap으로 들어오면 <code>ReferencePipeline</code>에 있는 flatMap 메소드를 호출하게 된다.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ReferencePipeline</span><span class="token operator">&lt;</span>P_IN<span class="token punctuation">,</span> P_OUT<span class="token operator">></span>        <span class="token keyword">extends</span> <span class="token class-name">AbstractPipeline</span><span class="token operator">&lt;</span>P_IN<span class="token punctuation">,</span> P_OUT<span class="token punctuation">,</span> Stream<span class="token operator">&lt;</span>P_OUT<span class="token operator">>></span>        <span class="token keyword">implements</span> <span class="token class-name">Stream</span><span class="token operator">&lt;</span>P_OUT<span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> Stream<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">flatMap</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> P_OUT<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Stream</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token operator">>></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// We can do better than this, by polling cancellationRequested when stream is infinite</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StatelessOp</span><span class="token operator">&lt;</span>P_OUT<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> StreamShape<span class="token punctuation">.</span>REFERENCE<span class="token punctuation">,</span>                                     StreamOpFlag<span class="token punctuation">.</span>NOT_SORTED <span class="token operator">|</span> StreamOpFlag<span class="token punctuation">.</span>NOT_DISTINCT <span class="token operator">|</span> StreamOpFlag<span class="token punctuation">.</span>NOT_SIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            Sink<span class="token operator">&lt;</span>P_OUT<span class="token operator">></span> <span class="token function">opWrapSink</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> Sink<span class="token operator">&lt;</span>R<span class="token operator">></span> sink<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sink<span class="token punctuation">.</span>ChainedReference</span><span class="token operator">&lt;</span>P_OUT<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>P_OUT u<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">(</span>Stream<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token operator">></span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// We can do better that this too; optimize for depth=0 case and just grab spliterator and forEach it</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span>                                result<span class="token punctuation">.</span><span class="token function">sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>downstream<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이 때 flatMap 메소드의 22번째 줄인 <code>try (Stream&lt;? extends R&gt; result = mapper.apply(u))</code>라는 코드 실행되는데 이 코드를 실행하면 앞에서 파라미터로 넘겨준 <code>Optional::stream</code> 메소드 레퍼런스가 실행된다. 이후 다음과 같이 실행된다.</p><ol><li>user 인스턴스를 품고 있는 Optional 인스턴스 일 때<ul><li>해당 Optional 인스턴스는 <code>Stream.of(user)</code>로 변환</li><li>user 인스턴스를 처리할 수 있는 spliterator 인스턴스를 갖고 있는 stream으로 결정</li><li><code>.collect(Collector.toList)</code> 실행 시 해당 spliterator 인스턴스를 실행하여 user 인스턴스를 ArrayList에 add하여 결과를 모은다.</li></ul></li><li>null을 품고 있는 Optional 일 때<ul><li>해당 Optional 인스턴스는 <code>Stream.empty()</code>로 변환</li><li>이 스트림은 EmptySpliterator를 갖고 있는 stream으로 결정</li><li><code>.collect(Collector.toList)</code> 실행 시 EmptySpliterator 인스턴스를 처리하면 해당 스트림에는 처리할 요소가 없으므로 ArrayList에는 아무런 인스턴스도 add하지 않고 끝난다.</li></ul></li></ol><p>정리하자면 결과를 모으는 작업을 호출해야지 빈 스트림에 대해 아무런 처리하지 않고 넘어간다.</p><p><br></p><h3 id="이번에는-lookup-메소드가-null을-반환할-수-있는-경우라면-stream-처리를-어떻게-할까"><a href="#이번에는-lookup-메소드가-null을-반환할-수-있는-경우라면-stream-처리를-어떻게-할까" class="headerlink" title="이번에는 lookup 메소드가 null을 반환할 수 있는 경우라면 stream 처리를 어떻게 할까?"></a>이번에는 lookup 메소드가 null을 반환할 수 있는 경우라면 stream 처리를 어떻게 할까?</h3><pre class="line-numbers language-java"><code class="language-java">User <span class="token function">classicLookup</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>이럴 때 보통 아래와 같이 filter 메소드를 통해 null 인스턴스를 필터링할 것이다.</p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Users<span class="token operator">:</span><span class="token operator">:</span>classicLookup<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Objects<span class="token operator">:</span><span class="token operator">:</span>nonNull<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>하지만 jdk9을 쓴다면 아래와 같이 null을 Stream으로 변환하여 처리하면 아까와 같이 null인 요소는 건너뛰고 결과를 모을 수 있다.</p><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>id <span class="token operator">-</span><span class="token operator">></span> Stream<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token function">classicLookup</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Users<span class="token operator">:</span><span class="token operator">:</span>classLookup<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Stream<span class="token operator">:</span><span class="token operator">:</span>ofNullable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="스트림-결과-모으기를-할-때-합계-카운트-평균-최댓값-최솟값으로-모으려면"><a href="#스트림-결과-모으기를-할-때-합계-카운트-평균-최댓값-최솟값으로-모으려면" class="headerlink" title="스트림 결과 모으기를 할 때 합계, 카운트, 평균, 최댓값, 최솟값으로 모으려면?"></a>스트림 결과 모으기를 할 때 합계, 카운트, 평균, 최댓값, 최솟값으로 모으려면?</h2><p>jdk9을 쓴다면 <code>summarizing(Int|Long|Double)</code> 메소드를 사용하여 SummaryStatistics 타입의 인스턴스를 받아서 처리하면 간단하게 구할 수 있다. 이 메서드는 스트림 객체를 숫자로 매핑하는 함수를 받고 합계, 카운트, 평균, 최댓값, 최솟값을 동시에 계산해서 <code>(Int|Long|Double)SummaryStatistics</code> 타입으로 결과를 돌려준다. </p><pre class="line-numbers language-java"><code class="language-java">IntSummaryStatistics summary <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>  Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> averageWordLength <span class="token operator">=</span> summary<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> maxWordLegnth <span class="token operator">=</span> summary<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li>가장 빨리 만나는 코어 자바9 p.320, p.322</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java9 </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>To-Do App 개발을 통한 Observer Pattern 이해하기 (javascript 버전)</title>
      <link href="/2018/04/12/20180412-understanding-observer-pattern/"/>
      <url>/2018/04/12/20180412-understanding-observer-pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="다룰-내용"><a href="#다룰-내용" class="headerlink" title="다룰 내용"></a>다룰 내용</h2><ul><li>앞에서 Reverse Visitor 패턴까지 적용한 To-Do 앱의 개선할 부분이 있는지 파악</li><li>개선에 대해 Observer Pattern을 적용할 예정</li></ul><p>나머지는 나중에 작성 예정…</p>]]></content>
      
      
      
        <tags>
            
            <tag> design pattern </tag>
            
            <tag> observer pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>중국커머스 서비스 개발기 세미나 후기</title>
      <link href="/2018/04/06/20180406-chinese-commerce-development-experience-seminar/"/>
      <url>/2018/04/06/20180406-chinese-commerce-development-experience-seminar/</url>
      
        <content type="html"><![CDATA[<p>얼마전 회사에 ‘김형준’님께서 오셔서 ‘중국 커머스 서비스 개발기’라는 제목으로 약 2시간 동안 세미나를 하셨다. 어디서 많이 본 얼굴인데 하고 긴가민가 했는데 알고보니 Popit에 기고를 하고 계셨던 분이었다. 평소에도 그 분 글을 재미있게 보고 있었는데 우리회사에서 세미나를 하신다니 와!!! (popit 관련 글: <a href="http://www.popit.kr/author/babokim/" target="_blank" rel="noopener">http://www.popit.kr/author/babokim/</a>)</p><p>아무튼 세미나 내용은 중국 개발업체로 파견 나가셔서 개발자 약 50명을 이끌고 서비스 개선 및 광군제(쐉쓰이) 대응에 관해 어떤 식으로 진행했는지에 대한 말씀을 해주셨는데 쉽고 재미있게 설명해주셔서 개인적으로 상당히 감명깊었다. 굳이 커머스 개발을 하지 않아도 대용량 트래픽과 유연한 서비스 대응에 대해 MSA를 고민을 하고 있는 상황이라면 이 세미나에서 영감을 받을 수 있으리라.</p><p>그럼 기억력에 의지하여 세미나 때 들은 내용을 적어볼까 한다.</p><h2 id="중국-진출-및-처한-상황"><a href="#중국-진출-및-처한-상황" class="headerlink" title="중국 진출 및 처한 상황"></a>중국 진출 및 처한 상황</h2><p>사실 앞에서 제목이 ‘중국 커머스 서비스 개발기’라고 했지만 원래 세미나 제목은 ‘그럭저럭 돌아가는 서비스 만들기’ 였다. 그럭저럭 돌아가는, 대충 돌아가는 서비스를 중국에서 해봤다 이 말인데 뭐야 중국까지 가서 왜 대충 그럭저럭 돌아가는 서비스를 만들고 온거지 라는 의문 첫 인상이었다. 대충 그럭저럭 돌아간다는 의미가 무엇일까?</p><p>대충 그럭저럭 돌아간다는 시스템을 차차 알아가기로 하고, 발표자가 중국 개발업체에 파견을 나가게 되었는데 거기서 받은 미션이</p><ul><li>현재 운영 중인 시스템을 경쟁력 있는 시스템으로 만들어달라.</li></ul><p>라는 미션이었다고 한다. 그런데 현재 운영 중인 시스템은…</p><ul><li>Windows Form</li><li>Stored Procedure</li><li>SQLServer (Table: 675개)</li></ul><p>아키텍처는 심플했지만 시대에 맞는 기민한 대응이 힘들었고 한다. (중복되는 구조의 Stored Procedure가 많았고, 비슷한 이름의 테이블이 많은데다가 특정 테이블의 구조를 변경할 경우 시스템에 미치는 영향을 예측할 수 없었다고 함. 이런 상황에서 요구사항 대응은 힘들었으리라..)</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/screenshot_01.png"></p><p>이런 상황에서 기존 서비스를 경쟁력 있는 서비스가 될 수 있도록 개선해야 되는 미션이 있었다고 한다.</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/mission.png"></p><h2 id="그래도-시작은-해야…"><a href="#그래도-시작은-해야…" class="headerlink" title="그래도 시작은 해야…"></a>그래도 시작은 해야…</h2><p>기존 시스템을 개선하기 전에 어떤식으로 개선할 것인지 기준을 정했는데 아래와 같은 기준을 정했다고 한다.</p><ul><li>다른 개발 언어, 플랫폼</li><li>다른 운영 환경</li><li>기존 시스템과 연결 안하기</li></ul><p>특히 놀라웠던 것은 기존에 있던 시스템을 새로운 언어로 다시 개발하기 위해 기존에 일했던 팀원에게 업무 분배를 했는데 아래와 같이 당부를 했다고 한다.</p><ul><li>개발자 한 명에 기능 하나</li><li>테이블은 1 or 2개</li><li>화면 역시 1 or 2개</li><li>1주일 동안 무조건 동작하는 것 만들기</li><li>하드코딩 허용</li><li>HTML 날 코딩 허용 등등</li><li>가장 놀라웠던 것은 테이블 간에 JOIN하지 말기</li></ul><p>위와 같이 당부하면서 사용하는 기술도 개발자들이 직접 선택하게 하였는데 이는 변화에 자발적인 참여를 유도하고 내 선택이 서비스에 미치는 영향도 느껴보게 하기 위함이었다고 한다. 다수의 개발자들이 멘붕에 빠지고 다소 혼란스러워 보였으나 중국 개발자들은 시키면 어떻게서든 꾸역꾸역하는 끈기가 있었다고 한다. (퀄리티는 만족스럽진 않았지만..)</p><p>시행착오 끝에 결국 사용기술은 아래와 같이 결정이 되었다고 한다.</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/tech_stack.png"></p><p>서비스를 개발하기 위해 처음 써본 언어를 공부해 가면서 개발한다는 것은 경영진 입장에선 썩 달가운 모습은 아니었을 것이다. 그렇다고 손 놓고 있으면 미션을 달성할 수 없지 않은가? 이들이 중요하게 생각하는 것은 지금 이게 뭔지 이해는 할 수 없어도 돌아가는 어떤 것을 빨리 만드는 것. 그리고 개발이 끝나면 회고는 하지 않지만 만들었던 것을 잊고 다시 한 번 또 만들면서 개선해보는 것, 이 두 가지를 중요하게 생각하고 실천 했다고 한다. 그러면서 개발자 전체가 조금씩 성장할 수는 있었지만 여전히 한계는 존재했고 사건 사고도 있었다고 한다. (자세한 사고는 생략)</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/just_go.png"></p><h2 id="그들이-했던-MSA"><a href="#그들이-했던-MSA" class="headerlink" title="그들이 했던 MSA"></a>그들이 했던 MSA</h2><p>Micro Service Architecture는 쉬운 아키텍처가 아니고 개발 성숙도가 높은 조직에서나 적용해야 성공적으로 운영할까 말까 한다고 한다. 그런데 그들은 기능을 잘게 나누고 기능만 나눈 것 뿐만 아니라 물리적으로도 서비스를 잘게 나누었다. 결국 기능 하나하나가 Microservice 였던 것이다. 왜 그렇게 했을까?</p><ul><li>현재 개발 조직의 능력으로 할 수 있는 최선이 작게 만드는 것</li></ul><p>위와 같은 이유 였다고 한다. 즉 현재 상황에서 최선을 선택한 것이다. (의도치 않게 MSA를 하게 됨)</p><p>Microservice를 실제로 하면서 가장 큰 장벽은 아래와 같았다고 한다.</p><ul><li>JOIN 없이 기능을 개발하는 것</li><li>떄문에 여러 서비스 호출을 하나의 Transaction으로 묶을 수 없었음</li><li>너무 많은 고민/걱정<ul><li>서비스 단위는 어떻게 쪼갤가..</li><li>트렌젝션 장애 처리는 어떻게…</li><li>서비스 간 의존/호출 관계가 복잡해지면 어떻게 할까?</li></ul></li></ul><p>JOIN이 없이 개발한다는 것은 서비스 간에 서로의 데이터가 필요한 순간이 있을텐데 이런 상황이 발생할 경우 두 서비스에 같은 테이블을 두고 같은 데이터를 쌓도록 했다고 한다. 중복처럼 보일 수 있지만 한 서비스에서는 해당 테이블에 데이터를 쌓은 뒤 이벤트를 발생시키고 다른 서비스에서는 그 이벤트를 구독해서 데이터를 복사해오는 방식으로 개발했다고 한다. 이렇게 각 서비스별로 중복되는 데이터를 갖고 있게 되거나 서비스 간에 데이터 정합성이 안맞는 문제가 발생할 수도 있지만 서비스간에 조인을 해야되는 골치아픈 상황은 피할 수 있게 되었다고 한다.</p><p>또 트렌젝션 처리는 안하는 것으로 하였는데 이는 비용에 따른 선택 이었다고 한다. 트렌젝션을 엄격하게 지키면서 광군제와 같은 대용량 트래픽이 몰리는 이벤트를 처리할 수 있을까?</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/no_transaction.png"></p><p>MSA를 하게 되면 빠지지 않고 따라오는 개념이 바로 Event Driven이다. 서비스 간에 통신은 이벤트 드리븐으로 하게 되면 서비스 고유의 역할에만 집중할 수 있게 되고 서비스 플로우에 대한 오류는 관련 있는 서비스만 처리하게 되는 구조가 되게 된다. 거기다가 이벤트 드리븐 특성 상 이러한 일들은 비동기(Async)로 동작하게 된다. (ex: A 서비스에서 처리가 끝나면 Event Queue에 이벤트 전송 -&gt; B 서비스에서 받아가서 처리)</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/event_driven.png"></p><p>특히 이 부분에서 좀 감명 깊었는데 실제로 MSA를 하다보니 아래와 같이 MSA가 쉽지 않은 것이라는 것을 몸소 체득하게 되었다고 한다.</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/msa_is_difficult.png"></p><p>그리고 MSA를 하면서 모든 서비스에 대해 모니터링이 필요한데 모니터링을 하기 위해서는 로그가 중요하다. 모든 서비스에서 발생하는 로그, 이벤트를 기록했는데 눈에 띄는 것은 모든 로그를 HDFS에 저장하고 Presto로 이벤트 및 로그를 제플린에서 질의하고 있었다.</p><p><img src="/images/20180406-chinese-commerce-development-experience-seminar/data_federation.png"></p><p>또 감명깊었던 부분은 모든 서비스 플로우에 대해 Requst ID를 부여하여 request를 추적할 수 있도록 로그를 남겼다는 점이다. 예를들어 서비스 플로우 A가 있으면 A에 해당하는 서비스가 ㄱ 서비스, ㄴ 서비스, ㄷ 서비스가 있으면 request가 서비스를 거칠 때 마다 requestID를 부여하고 덧붙이는 방식이었다. 이렇기 떄문에 서비스 플로우 A에 대한 콜 스택이 어떻게 되는지 추적도 할 수 있고 어느 서비스에서 오류가 발생해서 그 다음 서비스로 못넘어 갔는지도 모니터링이 가능했다고 한다. 더 나아가 이러한 데이터를 바탕으로 실시간 모니터링 툴까지 개발한 모습도 보여주었다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>MSA를 하면서 오류가 발생하는 것은 어쩔 수 없다. 그런데 이들은 어쩔 수 없음을 윗선(경영진)에서 부터 공감하고 허용하고 있었다. 오류는 즉 매출에 영향이 있음에도 불구하고 이런 인식을 갖고 있던 것은 무엇일까? 중국의 많은 인구로 인한 대규모 트래픽과 기민한 서비스 대응만이 살아남는 구조이기 때문에 오류가 발생해도 매출 발생 대응이 중요했기 때문이라고 본다. 이러한 상황이 애자일을 할 수 밖에 없는 상황이 된 것으로 본다. 우리나라 정서에는 안맞는 부분이 있을 수도 있겠지만 배울건 있다고 본다. MSA를 하기 위해 공부를 멈추지 말아야 겠다.</p><h2 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h2><ul><li><a href="http://www.popit.kr/%EB%8C%80%EC%9A%A9%EB%9F%89-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9F%AD%EC%A0%80%EB%9F%AD-%EB%8F%8C%EC%95%84%EA%B0%80%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0/" target="_blank" rel="noopener">http://www.popit.kr/%EB%8C%80%EC%9A%A9%EB%9F%89-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9F%AD%EC%A0%80%EB%9F%AD-%EB%8F%8C%EC%95%84%EA%B0%80%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0/</a></li><li><a href="http://www.popit.kr/micro-service-docker%EB%A1%9C-%ED%95%A0-%EC%88%98-%EB%B0%96%EC%97%90-%EC%97%86%EC%97%88%EB%8D%98-%EC%82%AC%EC%97%B0/" target="_blank" rel="noopener">http://www.popit.kr/micro-service-docker%EB%A1%9C-%ED%95%A0-%EC%88%98-%EB%B0%96%EC%97%90-%EC%97%86%EC%97%88%EB%8D%98-%EC%82%AC%EC%97%B0/</a></li><li><a href="http://www.popit.kr/author/babokim/page/2/" target="_blank" rel="noopener">http://www.popit.kr/author/babokim/page/2/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> microservice </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>To-Do App 개발을 통한 Visitor Pattern 이해하기 (javascript 버전)</title>
      <link href="/2018/03/29/20180329-understanding-visitor-pattern/"/>
      <url>/2018/03/29/20180329-understanding-visitor-pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="다룰-내용"><a href="#다룰-내용" class="headerlink" title="다룰 내용"></a>다룰 내용</h2><ul><li>앞에 Composite Pattern이 적용된 To-Do 앱의 문제점이 뭐고 어떻게 해결할지 진행</li><li>문제점 해결에는 Visitor Pattern과 Reverse Visitor를 사용할 예정</li></ul><h2 id="왜-Visitor-Pattern인가"><a href="#왜-Visitor-Pattern인가" class="headerlink" title="왜 Visitor Pattern인가?"></a>왜 Visitor Pattern인가?</h2><p>앞서 To-Do App 개발 시 할 일(Task)에 관련된 행위를 Composite Pattern으로 구현하였다. 그런데 이 코드에는 문제점이 있다. 바로 Composite이 전파된다는 점이다. Composite가 전파된다는게 무슨 의미인지 살펴보자.</p><h3 id="Composite-전파"><a href="#Composite-전파" class="headerlink" title="Composite 전파"></a>Composite 전파</h3><p>먼저 Task, TaskList, TaskItem은 Composite Pattern으로 구현하여 Task의 getResult() 이라는 함수에서 할 일 목록을 가져오는 행위 중 자식에게 너 자신(TaskItem)과 너의 자식 목록(TaskList)을 데이터를 가져오는 행위 즉 재귀 확산 호출을 통한 데이터 구성하는 행위가 추상화 되어 있다. 그런데 문제는 이렇게 가져온 데이터를 그리는 Renderer에서도 Task 데이터를 그릴 때 데이터를 참조하여 그리는 로직 또한 Composite Pattern으로 구현해야 된다는 점이다. 이것을 Composite가 전파된다 라고 표현하는데 이건 따지고 보면 Composite으로 인한 중복코드 생성이다.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 여기가 Composite 핵심 부분</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Task가 Composite 구조이기 때문에 DomRenderer에서도 그릴 떄 Composite 구조를 따라감</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> DomRenderer <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_sort <span class="token operator">=</span> <span class="token string">'title'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_parent<span class="token punctuation">;</span>    parent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>      <span class="token string">'title,date'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nav<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        nav<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>          <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span>            <span class="token string">'@fontWeight'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_sort <span class="token operator">==</span> c <span class="token operator">?</span> <span class="token string">'bold'</span> <span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>            <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_sort <span class="token operator">=</span> Task<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nav<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'nav'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_sort<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 여기에서 Task의 getResult 함수를 호출해서 Composite 구조의 Task를 요청</span>  <span class="token punctuation">}</span>  <span class="token function">_render</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token punctuation">{</span>item<span class="token punctuation">,</span> children<span class="token punctuation">}</span><span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    base<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingLeft <span class="token operator">=</span> depth <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">TaskList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_title<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_title<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'datetime'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'progress'</span> <span class="token punctuation">:</span> <span class="token string">'complete'</span><span class="token punctuation">,</span>          <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> _<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span>          <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> sub <span class="token operator">=</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'section'</span><span class="token punctuation">,</span>      <span class="token string">'appendChild'</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'appendChild'</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'addTask'</span><span class="token punctuation">,</span>        <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>previousSibling<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> item<span class="token punctuation">,</span> v<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 이 부분이 바로 Composite 구조</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>base<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>또 DomRenderer에서 Composite Pattern으로 Task를 순회하면서 데이터를 가져와 그리는 로직을 ConsoleRenderer를 구현할 때도 마찬가지로 비슷한 로직을 구현해야 된다. 이렇게 보면 중복코드 작업은 비효율 적이라는 것이 불보듯 뻔하다.</p><h3 id="해결-방법은"><a href="#해결-방법은" class="headerlink" title="해결 방법은?"></a>해결 방법은?</h3><p>위 문제의 원인은 Renderer에서 Task 데이터를 그릴 때 Composite Pattern으로 순회하여 데이터를 참조하는 것이 원인이다. 이걸 해결하기 위해서는 Renderer에서 Task 데이터 참조와 그리기(render) 행위를 분리해야 한다. 그런 다음 Task 데이터 참조하는 행위는 Task 클래스에게, 그리기 행위는 Visitor 클래스에게 위임하여 Task 데이터 참조를 하는 행위가 발생하면 그 행위 안에서 Visitor에 위임된 행위를 실행하게 하면 되는 것이다. (왜냐면 Visitor 클래스에 그리는 행위가 위임되어 있기 때문)</p><p>이렇게 Composite Pattern이 나올 때는 꼭 Visitor Pattern이 따라온다고 보면 된다. (Composite 전파를 막기 위해) 글만 보면 이해가 안가니 코드를 통해 살펴보도록 하자.</p><h2 id="Step-1-To-Do-App에-Visitor-Pattern-적용하기"><a href="#Step-1-To-Do-App에-Visitor-Pattern-적용하기" class="headerlink" title="Step 1. To-Do App에 Visitor Pattern 적용하기"></a>Step 1. To-Do App에 Visitor Pattern 적용하기</h2><p>Visitor를 한 줄로 요약하자면 다음과 같다.</p><blockquote><p>나를 데려가면 날 데려간 곳에서 내가 무언가를 할게</p></blockquote><p>무슨 뚱딴지 같은 소리란 말인가? 일단 이 말의 의미를 알기 위해 앞에서 작성한 것과 같이 실행코드 부터 시작해서 Composite Pattern이 적용된 Renderer에 그리기 관련 행위를 Visitor로 분리하는 작업을 진행해보자.</p><h4 id="실행코드"><a href="#실행코드" class="headerlink" title="실행코드"></a>실행코드</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">'s75'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">'3강 교안 작성'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">'코드정리'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> subsub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">'subsub1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sub1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subsub1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Visitor Pattern 적용 전</span><span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomRenderer</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token function">sel</span><span class="token punctuation">(</span><span class="token string">'#todo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Visitor Pattern 적용 후</span><span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Renderer</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DomVisitor</span><span class="token punctuation">(</span><span class="token string">'#todo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>실행 코드 중에 눈에 띄는 것은 Renderer 클래스와 생성자로 들어가있는 DomVisitor 클래스이다. 전에 Visitor Pattern을 적용하기 전 Composite Pattern만 적용되어 있을 때는 DomRenderer를 생성하여 해당 렌더러에 Task 조회 및 Task 그리기 작업을 했었다.</p><p>Renderer의 그리기에 관한 로직은 DomVistor에 위임되었기 때문에 Renderer 클래스는 공통화할 수 있을 것이다. 때문에 Renderer 클래스의 이름이 그냥 일반적으로 Renderer가 되었다.</p><p>앞에서 했던 것처럼 의존성이 없는 Task 클래스부터 작성해보자.</p><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token function">title</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>_title <span class="token operator">></span> b<span class="token punctuation">.</span>_title<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">date</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>_date <span class="token operator">></span> b<span class="token punctuation">.</span>_date<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>_title <span class="token operator">=</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> _title<span class="token punctuation">,</span> _date<span class="token punctuation">,</span> _list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_date<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">override</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">accept</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    visitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    visitor<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>우선 앞에서 봤던 Composite Pattern의 Task 클래스와 다른 점은 accept라는 함수가 생긴 점이다. 이 함수의 역할은 Composite 구조를 순회하면서 visitor 객체의 start(), end() 함수를 호출하고 있다. 이렇게 앞 뒤로 무언가 호출하는 이런 구조를 라이프 사이클이라고 한다. 여기서는 Composite 구조 순회의 앞 뒤로 visitor를 호출하고 있다. 이것만 봤을 때는 visitor.start()에서 그림을 그리는 로직이나 글씨로 표현하는 로직 등과 같이 render 로직이 들어가고 순회 완료 후 visitor.end() 함수에서 마무리 작업을 할 것으로 보인다.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskItem <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Task <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> TaskList <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Task <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그 외 Task 클래스의 자식인 TaskItem과 TaskList 클래스는 변함없다. (부모에서 이미 추상화된 Composite이 있어 이를 재사용하고 있기 때문)</p><h4 id="Renderer"><a href="#Renderer" class="headerlink" title="Renderer"></a>Renderer</h4><p>Renderer는 태스크와 협조하여 태스크에 대한 그림을 그릴 수 있는 visitor를 호출하는 행위를 추상화 한 것이다. 그리는 행위가 visitor로 위임 되었기 때문에 Renderer는 Composite을 조회하고 visitor를 Composite에 연결해주는 행위만 남게 된다. 이건 모든 Renderer의 공통 로직이기 때문에 의존성이 사라진 순수한 Renderer 클래스 로직만 남게 된다.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Renderer <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>_list <span class="token operator">=</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _visitor <span class="token operator">=</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> _list<span class="token punctuation">,</span> _visitor<span class="token punctuation">:</span> <span class="token function">prop</span><span class="token punctuation">(</span>_visitor<span class="token punctuation">,</span> <span class="token punctuation">{</span> renderer<span class="token punctuation">:</span> <span class="token keyword">this</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _sort<span class="token punctuation">:</span> <span class="token string">'title'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> title<span class="token punctuation">,</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> Task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> Task<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">toggle</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> TaskItem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_visitor<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>Task<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_sort<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Visitor"><a href="#Visitor" class="headerlink" title="Visitor"></a>Visitor</h4><p>visitor의 부모를 먼저 정의해보자.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Visitor <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token keyword">set</span> <span class="token function">renderer</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_renderer <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ovreride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">start</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ovreride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ovreride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이렇게 정의된 Visitor 클래스를 요구사항에 맞게 구현하여 Composite 클래스에 연결해주면 된다.</p><p>그럼 앞에서 Dom 형태로 Todo를 그렸던 DomRenderer에서 Dom을 그리는 로직만 따로 분리하여 DomVisitor 클래스를 구현한다.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> DomVisitor <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Visitor <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>_parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> _parent <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_current <span class="token operator">=</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token function">sel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">start</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_renderer<span class="token punctuation">,</span> Renderer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token function">is</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> TaskItem<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_item</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token function">is</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> TaskList<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_list</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_current<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'section'</span><span class="token punctuation">,</span>      <span class="token string">'@marginLeft'</span><span class="token punctuation">,</span> <span class="token string">'15px'</span><span class="token punctuation">,</span>      <span class="token string">'appendChild'</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'appendChild'</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'addTask'</span><span class="token punctuation">,</span>        <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>_renderer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>previousSibling<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_current<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">_list</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_current<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">_item</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">'@textDecoration'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'line-through'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token string">'datetime'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'progress'</span> <span class="token punctuation">:</span> <span class="token string">'complete'</span><span class="token punctuation">,</span>      <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>_renderer<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span>      <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>_renderer<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>_current<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이렇게 되면 Rederder에는 더 이상 그리는 로직은 없고 DomVisitor에 위임 되었다. Renderer는 단지 DomVisitor의 라이프사이클 메소드(start, end, reset) 메소드를 호출할 뿐이다.</p><h2 id="Step-2-Visitor-Pattern의-문제-그리고-Reverse-Visitor"><a href="#Step-2-Visitor-Pattern의-문제-그리고-Reverse-Visitor" class="headerlink" title="Step 2. Visitor Pattern의 문제 그리고 Reverse Visitor"></a>Step 2. Visitor Pattern의 문제 그리고 Reverse Visitor</h2><p>앞에서 Visitor를 사용하는 곳을 다시 살펴보자.</p><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task"></a>Task</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>  <span class="token function">accept</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    visitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    visitor<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Renderer-1"><a href="#Renderer-1" class="headerlink" title="Renderer"></a>Renderer</h4><pre class="line-numbers language-Javascript"><code class="language-Javascript">const Renderer = class {  render() {    this._visitor.reset();    this._list.accept(Task[this._sort], true, this._visitor);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>뭔가 문제점이 보이지 않는가?</p><ul><li>여기서의 문제점은 Task 클래스의 accept 클래스에서 visitor의 라이프 사이클 메소드를 호출하고 있는 것 문제이다.</li></ul><p>그럼 이게 왜 문제일까?</p><ul><li>Task 클래스를 수정 시 라이프 사이클 메소드를 호출하는 로직을 삭제한다던가 변경해버리면 Renderer에게 영향을 끼친다.</li><li>즉 Composite 클래스 수정 시 이를 사용하는 쪽에서 영향을 끼친다는 의미이다.</li><li>이는 곧 객체지향에 위반 된다. (무슨 법칙을 위반한 걸까?)</li></ul><p>그럼 이걸 어떻게 풀어야할까?</p><ul><li>답은 간단하다. 라이프사이클 관련 메소드를 Visitor를 사용하는 곳에서 직접 호출하게 하는 것이 아닌 Visitor에서 호출하게 만들면 된다.</li><li>라이프사이클 메소드를 Visitor 클래스가 직접 호출하기 때문에 이 Visitor를 Reverse Visitor라고 부르는 것이다.</li></ul><p>즉 라이프사이클을 visitor에서 캡슐화 하여 operation 이라는 메소드만 호출하면 visitor가 알아서 라이프 사이클 메소드를 호출하는 것이다.</p><h4 id="Renderer-2"><a href="#Renderer-2" class="headerlink" title="Renderer"></a>Renderer</h4><pre class="line-numbers language-Javascript"><code class="language-Javascript">const Renderer = class {  render() {    this._visitor.reset();    this._visitor.operation(Task[this._sort], true, this._list);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Visitor-1"><a href="#Visitor-1" class="headerlink" title="Visitor"></a>Visitor</h4><pre class="line-numbers language-Javascript"><code class="language-Javascript">const Visitor = class {    set renderer(v) { this._renderer = v; }    reset() { override(); }    operation(sort, stateGroup, task){        this._start(sort, stateGroup, task);        task.getResult(sort, stateGroup).children.forEach(            ({item}) => this.operation(sort, stateGroup, item)        );        this._end();    }    _start(task) { override(); }    _end() { override(); }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>대신에 Reverse Visitor를 적용하게 되면 Visitor 안에서 다시 Composite의 메소드(task.getResult)를 호출하게 되고  Visitor 자신도 Composite 구조가 되어버린다. (Composite 자료구조를 순회하면서 라이프사이클이 캡슐화된 메소드 operation을 호출해야 되기 때문)</p><p>Composite를 피하려고 했는데 Reverse Visitor에 다시 Composite 구조를 만들고 있는 셈이다. 따라서 이 부분은 많은 경험에 비추어 변경이 잘 일어나지 않을 부분이겠구나 감이 오면 Visitor만 쓰고 그렇지 않다면 Reverse Visitor를 쓰는 수 밖에 없다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> design pattern </tag>
            
            <tag> visitor pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>To-Do App 개발을 통한 Composite Pattern 이해하기 (javascript, java 버전)</title>
      <link href="/2018/03/27/20180327-understanding-composite-pattern/"/>
      <url>/2018/03/27/20180327-understanding-composite-pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="다룰-내용"><a href="#다룰-내용" class="headerlink" title="다룰 내용"></a>다룰 내용</h2><ul><li>디자인 패턴 중에 Composite Pattern에 대해 정리</li><li>Composite Pattern을 Javascript 버전, Java 버전으로 각각 작성</li><li>To-do 앱을 개발한다고 가정하고 해당 패턴을 적용</li><li>화면(HTML, CSS)개발은 생략하고 실행코드와 비즈니스 코드만 다룰 예정</li></ul><p>들어가기 전에 Composite Pattern은 뭘까? 한 마디로 정의하자면 Tree 메뉴와 같이 재귀호출하여 처리하는 행위를 추상화한 것을 Composite Pattern이라고 한다. 뭔말인지 모르겠으니까 To-Do App을 구현하면서 알아보자.</p><h2 id="To-Do-Domain"><a href="#To-Do-Domain" class="headerlink" title="To-Do Domain"></a>To-Do Domain</h2><p>우선 To-Do App이 뭔지 알아보자. (이것을 To-Do App의 Domain을 알아보자 라고 한다.)</p><p>TODO 앱은 일단 다음과 같다.</p><p><img src="/images/20180327-understanding-composite-pattern/todo.png"></p><p>그림을 보면 왼쪽에 뭔가 분류 항목(리스트)가 있고, 오른쪽에는 할 일 항목이 있는 것을 볼 수 있다. 이렇게 화면을 보고 데이터가 어떻게 되어 있을지를 상상해봐야 하는데 이걸 도메인 훈련이라고 부르며 상당한 노력과 경험이 필요하다. (도메인을 보고 완벽하게 데이터로 환원시킬 수 있어야 한다.)</p><p>도메인 파악에는 여러 방법론이 있지만 데이터베이스를 바탕으로 도메인을 파악할 경우 그 도메인에서 행위를 명사로 표현할 수 있는 것과 동사로 표현할 수 있는 것으로 나뉜다. 여기서 명사는 엔티티(Entity)라고 부르고 동사는 행동(Behavior)라고 부른다.</p><p>엔티티라고 부르는 것은 데이터와 연관이 있다. 위 그림 To-Do App 도메인에서 엔티티는 무엇일까? 일단 왼쪽이나 오른쪽 둘다 공통적으로 보여지는 리스트 엔티티가 있을 것이고, 할 일 항목 하나하나가 엔티티가 보인다. 결국 TaskList와 TaskItem으로 엔티티를 표현할 수 있다. (데이터베이스에서는 이 엔티티가 테이블이 되겠지만 객체지향 세계에서는 클래스가 되고 인스턴스가 된다.)</p><h2 id="Step1-실행코드-작성하기"><a href="#Step1-실행코드-작성하기" class="headerlink" title="Step1. 실행코드 작성하기"></a>Step1. 실행코드 작성하기</h2><p>To-Do App의 도메인을 알아봤으니 실행 코드를 작성해보자. 실행 코드를 작성하자는 말은 To-Do App을 실행시키는 코드를 작성한다는 의미이다.</p><blockquote><p>왜 실행코드부터 작성할까?</p><p>코드는 사람이 사용하기 편한 방향으로 개발해야되는데 실행 코드를 먼저 작성해보면 사용자 측면에서 개발하게 된다. 이렇게 실행하는 코드가 있으면 좋을텐데라고 생각하고 실행코드 부터 작성하면 사용자 측면에서 생각하여 개발하게 된다는 의미이다. 실행코드 말고 프로덕션 코드부터 만드는 것은 똥을 만들 가능성이 커진다.</p></blockquote><h5 id="Javascript-버전-app-js"><a href="#Javascript-버전-app-js" class="headerlink" title="Javascript 버전 - app.js"></a>Javascript 버전 - app.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">'비사이드'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'지라설치'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'지라클라우드접속'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">'s75'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'2강 답안 작성'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'3강 교안 작성'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">byTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">byDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Java-버전-Application-java"><a href="#Java-버전-Application-java" class="headerlink" title="Java 버전 - Application.java"></a>Java 버전 - Application.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskList list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"비사이드"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"지라설치"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"지라클라우드 접속"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskList list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"s75"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2강 답안 작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3강 교안 작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">byTitle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">byDate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>작성한 실행코드를 보면서 생각해보자. TaskList 인스턴스를 만들면서 파라미터로 항목의 이름을 넘겼는데 그럼 작성일시는 안넘겨도 될까? 아마 내부적으로 현재 시간으로 셋팅하는게 들어가겠지? 하고 혼자 생각해보면서 실행코드에 뭔가 누락된 부분이 있는지 검토해본다.</p><p>TaskList의 할일(Task)를 등록하는 함수의 이름을 add라고 지었는데 왜 이렇게 지었을까?</p><p>코드 작성에서 작명은 상향식과 하향식이 있는데 상향식은 의미를 넓게 지은뒤 리팩토링하면서 점점 구체적인 의미로 짓는 것이며, 하향식은 그 반대이다. 상향식으로 지어놓으면 추후 추가되는 요구사항에 대한 의미에 유연하게 대응할 수 있으므로 상향식으로 짓는 것이 좋다. (그래서 일단 넓은 의미로 add라고 이름을 지은 것)</p><h2 id="Step-2-할-일-등록-및-조회-개발"><a href="#Step-2-할-일-등록-및-조회-개발" class="headerlink" title="Step 2. 할 일 등록 및 조회 개발"></a>Step 2. 할 일 등록 및 조회 개발</h2><p>그 다음 할 일을 나타내는 Task 클래스를 먼저 작성하는게 좋을까? 아니면 할 일을 관리하는 TaskList 클래스를 작성하는게 좋을까? 여기서 둘의 관계를 고찰해보면 할일 목록(TaskList)은 할일(Task)을 담고 있기 때문에 TaskList는 Task에 의존성이 있다고 볼 수 있다. 의존성이 없는 엔티티부터 구체화하는 것이 편한데 여기서는 Task가 의존성이 없기 때문에 Task 클래스 부터 작성하는 것이 편하다. 이렇게 도메인만 보고 엔티티의 의존성을 파악하려면 경험이 필요하다. (으…난 솔직히 TaskList 부터 작성하려고 생각하고 있었는데…)</p><p>그럼 Task 클래스부터 작성해보자. (할일 제목과 등록 날짜 기준으로 정렬도 할 수 있게 해보자.)</p><h5 id="task-js"><a href="#task-js" class="headerlink" title="task.js"></a>task.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">'invalid title'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">></span> task<span class="token punctuation">.</span>_title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">></span> task<span class="token punctuation">.</span>_date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> taskSort <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>a<span class="token punctuation">.</span><span class="token function">sortTitle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>    date<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>a<span class="token punctuation">.</span><span class="token function">sortDate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Task-java"><a href="#Task-java" class="headerlink" title="Task.java"></a>Task.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime date<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isComplete<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">InvalidTitleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TaskSort</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span>Task<span class="token operator">>></span> sortMethods<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TaskSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sortMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortMethods<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">sortTitle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortMethods<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">sortDate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token function">getSortMethod</span><span class="token punctuation">(</span>String sortType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sortMethods<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sortType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Task 클래스를 살펴보면 할일을 완료했는지 여부에 대한 _isComplete라는 필드도 보이고 이걸 toggle() 함수를 통해 값을 변경하는 것을 볼 수 있다. 이렇게 Task의 완료를 toggle() 함수를 통해 제어(_isComplete의 값을 변경)하는 것을 캡슐화라고 한다. 또 다른 캡슐화로는 TaskSort가 있는데 여기에는 Task 제목(title)로 정렬할 것인지, 등록일시(date)로 정렬할 것인지에 대한 행위만 들어있다. 그 구체적인 행위는 Task에게 위임하고 TaskSort의 title과 date 필드의 value는 뭘 기준으로 정렬하는 것인지에 대한 행위만 들어있다. Task에 위임된 sortTitle과 sortDate 함수를 보면 정렬에 필요한 정렬 비교 기준 로직이 들어있다. 이렇게 정렬에 대한 핵심 로직은 감춰진채 Task에서는 정렬에 관한 인터페이스(함수)만 노출한 것도 캡슐화라고 할 수 있다.</p><p>이제 할 일 목록(TaskList)를 작성해보자. Task에서 준비한 할일 제목(title), 등록날짜(date)에 대한 정렬을 실행할 수 있는 인터페이스를 TaskList에서 제공한다. title과 date에 따라 소팅하는 로직을 태스크가 갖고 있는 것은 객체지행에 위배되기 때문이다. 그러므로 TaskList에서 제공한 정렬 관련 함수는 Task에게 정렬에 대한 핵심 로직을 위임하여 TaskList는 실행만 하게 한다.</p><h5 id="task-list-js"><a href="#task-list-js" class="headerlink" title="task_list.js"></a>task_list.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskList <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">'invalid title'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">byTitle</span><span class="token punctuation">(</span>stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">byDate</span><span class="token punctuation">(</span>stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">_getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">,</span> s <span class="token operator">=</span> taskSort<span class="token punctuation">[</span>sort<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskList-java"><a href="#TaskList-java" class="headerlink" title="TaskList.java"></a>TaskList.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TaskList</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token function">byTitle</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token function">byDate</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token function">getResult</span><span class="token punctuation">(</span>String sortType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskSort taskSort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> sortMethod <span class="token operator">=</span> taskSort<span class="token punctuation">.</span><span class="token function">getSortMethod</span><span class="token punctuation">(</span>sortType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>stateGroup <span class="token operator">?</span>                list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Step-2-Class-Diagram"><a href="#Step-2-Class-Diagram" class="headerlink" title="Step 2. Class Diagram"></a>Step 2. Class Diagram</h3><p style="text-align: center;"><img src="/images/20180327-understanding-composite-pattern/step_2_class_diagram.png"></p><h3 id="Step-2-결과물"><a href="#Step-2-결과물" class="headerlink" title="Step 2. 결과물"></a>Step 2. 결과물</h3><h5 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h5><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/javascript/step_02" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/javascript/step_02</a></li></ul><h5 id="java"><a href="#java" class="headerlink" title="java"></a>java</h5><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step2" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step2</a></li></ul><h2 id="Step-3-태스크-하위로-태스크-달기-구현"><a href="#Step-3-태스크-하위로-태스크-달기-구현" class="headerlink" title="Step 3. 태스크 하위로 태스크 달기 구현"></a>Step 3. 태스크 하위로 태스크 달기 구현</h2><p><img src="/images/20180327-understanding-composite-pattern/todo2.png"></p><p>요구사항이 추가되어서 태스크 하위로 태스크 목록을 볼 수 있어야 한다고 하자. 뭐 일단 하위로 얼만큼 달리는지는 생각하지 말고 1단만 달린다고 해보자. 실행코드는 아마 다음과 같을 것이다.</p><h5 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">'비사이드'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'지라설치'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'지라클라우드 접속'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">'s75'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'2강 답안 작성'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'3강 교안 작성'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">byDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'코드 정리'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'다이어그램정리'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">byDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskList list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"비사이드"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"지라설치"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"지라클라우드 접속"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskList list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"s75"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2강 답안 작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3강 교안 작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskList list <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">byDate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"코드 정리"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"다이어그램정리"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">byDate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>자, 앞에서 하던대로 Task 부터 고쳐보자. Task 밑에 Task 목록이 달려야 하니까 TaskList를 멤버로 갖고 있어야 할 것이다. 그러면 자연스레 TaskList에 관련된 로직이 Task에 들어가게 된다. 왜? TaskList에 항목을 추가하는 행위(add)나 Task 밑에 하위로 항목을 추가한 행위가 같기 때문이다.</p><h5 id="task-js-1"><a href="#task-js-1" class="headerlink" title="task.js"></a>task.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">'invalid title'</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">=</span> date<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">,</span> s <span class="token operator">=</span> taskSort<span class="token punctuation">[</span>sort<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span>           task<span class="token punctuation">:</span><span class="token keyword">this</span>           sub<span class="token punctuation">:</span><span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>           <span class="token punctuation">]</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">></span> task<span class="token punctuation">.</span>_title<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">></span> task<span class="token punctuation">.</span>_date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Task-java-1"><a href="#Task-java-1" class="headerlink" title="Task.java"></a>Task.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime date<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isComplete<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">InvalidTitleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> TaskWrapper <span class="token function">getResult</span><span class="token punctuation">(</span>String sortType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskSort taskSort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> sortMethod <span class="token operator">=</span> taskSort<span class="token punctuation">.</span><span class="token function">getSortMethod</span><span class="token punctuation">(</span>sortType<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Task<span class="token operator">></span> sub <span class="token operator">=</span> <span class="token operator">!</span>stateGroup <span class="token operator">?</span>                list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>                    <span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TaskWrapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TaskWrapper</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Task task<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> sub<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">TaskWrapper</span><span class="token punctuation">(</span>Task task<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sub <span class="token operator">=</span> sub<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Task <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> task<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token function">getSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sub<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TaskSort</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span>Task<span class="token operator">>></span> sortMethods<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TaskSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sortMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortMethods<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">sortTitle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortMethods<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">sortDate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> <span class="token function">getSortMethod</span><span class="token punctuation">(</span>String sortType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sortMethods<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sortType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Task 클래스에 add(), remove(), _getResult()가 추가된 것을 볼 수가 있는데 이는 TaskList에 있던 코드와 동일하다. 그럼 이제 TaskList 클래스를 정리해보자. 어떻게? TaskList에서 할일 목록을 가져오는 함수인 _getResult() 함수를 호출 할 때 이제 Task의 _getResult() 함수도 호출해서 Task에 소속된 Task 목록을 가져오면 되는 것이다. TaskList 클래스는 하위 항목이 달린 Task를 어떻게 표현할지에 대한 로직은 관심이 없게 한다. 그건 Task에게 위임하고 Task의 _getResult 함수만 호출하면 하위가 달린 Task는 하위를 알아서 구성하게 하여 캡슐화 한다. 이걸 TaskList와 Task의 내부거래라고 한다. 왜 내부거래인가? 실행코드에서는 이런 TaskList와 Task의 항목 구성 방법을 알지 못한다. 그저 내부적으로 TaskList 그리고 Task만 알고 그에 대한 처리를 할 뿐이다. 그래서 내부거래라고 한다.</p><p>이걸 코드로 풀어보자.</p><h5 id="task-list-js-1"><a href="#task-list-js-1" class="headerlink" title="task_list.js"></a>task_list.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskList <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">'invalid title'</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">byTitle</span><span class="token punctuation">(</span>stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">byDate</span><span class="token punctuation">(</span>stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">_getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">,</span> s <span class="token operator">=</span> taskSort<span class="token punctuation">[</span>sort<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskList-java-1"><a href="#TaskList-java-1" class="headerlink" title="TaskList.java"></a>TaskList.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TaskList</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Task<span class="token punctuation">.</span>TaskWrapper<span class="token operator">></span> <span class="token function">byTitle</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Task<span class="token punctuation">.</span>TaskWrapper<span class="token operator">></span> <span class="token function">byDate</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Task<span class="token punctuation">.</span>TaskWrapper<span class="token operator">></span> <span class="token function">getResult</span><span class="token punctuation">(</span>String sort<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskSort taskSort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> sortMethod <span class="token operator">=</span> taskSort<span class="token punctuation">.</span><span class="token function">getSortMethod</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Task<span class="token operator">></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tasks<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tasks<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>stateGroup <span class="token operator">?</span>                list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Task v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>                tasks<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Task v1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> v1<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TaskList를 보면 .map(v=&gt;v._getResult()); 라는 코드가 추가된 것을 볼 수가 있는데 이는 _getResult() 함수를 Task 클래스의 것을 호출하겠다는 의미이다. 이렇게 하위 목록을 가져오는 코드가 Task에게 위임된 것을 볼 수 있다.</p><h3 id="Step-3-Class-Diagram"><a href="#Step-3-Class-Diagram" class="headerlink" title="Step 3. Class Diagram"></a>Step 3. Class Diagram</h3><p style="text-align: center;"><img src="/images/20180327-understanding-composite-pattern/step_3_class_diagram.png"></p><h3 id="Step-3-결과물"><a href="#Step-3-결과물" class="headerlink" title="Step 3. 결과물"></a>Step 3. 결과물</h3><h5 id="javascript-1"><a href="#javascript-1" class="headerlink" title="javascript"></a>javascript</h5><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/javascript/step_03" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/javascript/step_03</a></li></ul><h5 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h5><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step3" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step3</a></li></ul><h2 id="Step-4-하위-태스크를-무한대로-추가-Composite-Pattern-등장"><a href="#Step-4-하위-태스크를-무한대로-추가-Composite-Pattern-등장" class="headerlink" title="Step 4. 하위 태스크를 무한대로 추가 (Composite Pattern 등장)"></a>Step 4. 하위 태스크를 무한대로 추가 (Composite Pattern 등장)</h2><p>앞에 코드대로라면 태스크 하위는 1단까지만 가능하다. 그런데 태스크 하위로 또 태스크가 달리고 그렇게 달린 태스크에 또 하위로 태스크가 달리게 하고 계속 태스크를 하위에 추가할 수 있게 하려면 어떻게 해야될까? 이 때 Compostie Pattern이 등장하게 된다. Composite Pattern은 이렇게 반복되는 처리에 대한 비지니스 로직을 처리할 때 빛을 발한다. 마찬가지로 실행코드부터 작성해보자.</p><h5 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">'s75'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"3강교안작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"코드정리"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> subsub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"subsub1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sub1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subsub1<span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Application-java-1"><a href="#Application-java-1" class="headerlink" title="Application.java"></a>Application.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskList list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"s75"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskItem item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"3강교안작성"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskItem sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"코드정리"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        item1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskItem subsub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"subsub1"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        sub1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subsub1<span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskWrapper result <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>SortAction<span class="token punctuation">.</span>TITLE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>만약 코드가 완성된다면 실행코드를 수행했을 때 getResult() 함수의 결과는 다음과 같을 것이다.</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>item<span class="token operator">:</span>'s75'<span class="token punctuation">,</span> children<span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>item<span class="token operator">:</span>taskItem('<span class="token number">3</span>강교안작성'<span class="token punctuation">)</span><span class="token punctuation">,</span>         children<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>item<span class="token operator">:</span>taskItem('코드정리'<span class="token punctuation">)</span><span class="token punctuation">,</span>                 children<span class="token operator">:</span><span class="token punctuation">[</span>                        <span class="token punctuation">{</span>item<span class="token operator">:</span>taskItem('subsub1'<span class="token punctuation">)</span><span class="token punctuation">,</span>                         children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                 <span class="token punctuation">]</span><span class="token punctuation">}</span>         <span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>앞에서 하던대로 이번에도 Task 부터 작성 시작!<br>이제는 Task의 하위에 또 TaskList가 올 수 있기 때문에 Task의 getResult() 함수를 고쳐야 한다. 어떻게? Task의 getResult() 함수 호출 시 하위 Task 각각에 대해 getResult() 함수로 자식의 Task 리스트를 덧붙이는 방식으로 진행한다. 결국 Task의 getResult() 함수는 재귀 호출되어 자식 Task 목록을 구성하는 것이다.</p><p>이렇게 되면 너무 많은 재귀호출로 인해 발생하는 StackOverflow는 어떻게 해결할 것인가? 아마도 반복문으로 해결할듯 싶은데 이 부분은 나중에 하는 것으로 남겨두자. 일단 Task의 getResult 함수부터 재작성해보자.</p><h5 id="task-js-2"><a href="#task-js-2" class="headerlink" title="task.js"></a>task.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">'invalid title'</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">=</span> date<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">Task</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token string">'invalid'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span>           item<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           children<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>           <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskWrapper-java"><a href="#TaskWrapper-java" class="headerlink" title="TaskWrapper.java"></a>TaskWrapper.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskWrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TaskWrapper item<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>TaskWrapper<span class="token operator">></span> children<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TaskWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TaskWrapper</span><span class="token punctuation">(</span>Task task<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>TaskWrapper<span class="token operator">></span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> task<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TaskWrapper <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TaskWrapper<span class="token operator">></span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> children<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Task-java-2"><a href="#Task-java-2" class="headerlink" title="Task.java"></a>Task.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">TaskWrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String title<span class="token punctuation">;</span>    <span class="token keyword">protected</span> LocalDateTime date<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> isComplete<span class="token punctuation">;</span>    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">InvalidTitleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TaskWrapper <span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>SortAction sortAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> sortMethod <span class="token operator">=</span> sortAction<span class="token operator">:</span><span class="token operator">:</span>invoke<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>TaskWrapper<span class="token operator">></span> sub<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sub <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> each<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sub<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> each<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sub<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> each<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TaskWrapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResultComposite</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Task <span class="token function">getResultComposite</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>SortAction sortAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> SortAction <span class="token punctuation">{</span>        TITLE <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Task a<span class="token punctuation">,</span> Task b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sortTitle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> DATE <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Task a<span class="token punctuation">,</span> Task b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sortDate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Task a<span class="token punctuation">,</span> Task b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Composite Pattern을 적용한 Task 클래스는 아무런 의존성이 없는 가장 최상위 부모가 된다. 그래서 항목으로 표현할 때는 Task를 상속 받아서 TaskItem이라는 클래스로 구체화될 것이고, 항목 목록으로 표현할 때는 Task를 상속 받아서 TaskList라는 클래스가 될 것이다. TaskItem과 TaskList 클래스에서 getResult() 함수를 호출하게 되면 가장 최상위 부모인 Task 클래스의 getResult() 함수를 호출하게 될 것이고, item 부분에는 자식에서 구현된 hook을 실행하고 (TaskItem, TaskList에서 Hook에 대한 행위가 위임되어 있기 때문) chidren에서는 정렬 후 자식이 있으면 자식들의 getResult 함수를 호출해서 항목을 구성해나가는 형태가 될 것이다. 이렇게 getResult 함수는 자기가 자신을 호출하는게 아니라 자식의 getResult 함수를 호출하는 확산 형태로 진행되게 된다. </p><p>Task의 _getResult는 이제 Hook이 되고 실제 할일을 나타내는(Hook을 구현한) TaskItem 클래스를 작성하여 핵심 동작을 그 클래스에 위임한다.</p><h5 id="task-item-js"><a href="#task-item-js" class="headerlink" title="task_item.js"></a>task_item.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskItem <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Task<span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">></span> task<span class="token punctuation">.</span>_title<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">></span> task<span class="token punctuation">.</span>_date<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskItem-java"><a href="#TaskItem-java" class="headerlink" title="TaskItem.java"></a>TaskItem.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskItem</span> <span class="token keyword">extends</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TaskItem</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date <span class="token operator">==</span> null <span class="token operator">?</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Task <span class="token function">getResultComposite</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>SortAction sortAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="task-list-js-2"><a href="#task-list-js-2" class="headerlink" title="task_list.js"></a>task_list.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskList <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Task<span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">_getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">byTitle</span><span class="token punctuation">(</span>stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>title<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">byDate</span><span class="token punctuation">(</span>stateGroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>date<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskList-java-2"><a href="#TaskList-java-2" class="headerlink" title="TaskList.java"></a>TaskList.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskList</span> <span class="token keyword">extends</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TaskList</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Task <span class="token function">getResultComposite</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>SortAction sortAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TaskWrapper <span class="token function">byTitle</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>SortAction<span class="token punctuation">.</span>TITLE<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TaskWrapper <span class="token function">byDate</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>SortAction<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Task, TaskItem, TaskList 클래스를 잘 보면 Composite Pattern 이라고 했는데 또 한가지 패턴이 보인다. 바로 Template Method Pattern도 쓰여있는 것을 볼 수 있다. 이렇게 실무에서는 디자인 패턴이 여러개가 결합된 형태로 적용된다.</p><p>여기서는 Todo App 이라는 반복되는 행위(Loop)를 Composite Pattern으로 풀었는데 HTML Parser, Markdown Parser도 컴포짓 패턴으로 구현할 수 있으며 심지어 네비게이션의 길찾기도 컴포짓 패턴으로 구현할 수 있다고 한다. (우와 그럼 컴포짓 패턴이 만능 아닌가? 사실 네비게이션 길찾기는 도무지 상상이 안간다..)</p><h3 id="Step-4-Class-Diagram"><a href="#Step-4-Class-Diagram" class="headerlink" title="Step 4. Class Diagram"></a>Step 4. Class Diagram</h3><p style="text-align: center;"><img src="/images/20180327-understanding-composite-pattern/step_4_class_diagram.png"></p><h3 id="Step-4-결과물"><a href="#Step-4-결과물" class="headerlink" title="Step 4. 결과물"></a>Step 4. 결과물</h3><h5 id="javascript-2"><a href="#javascript-2" class="headerlink" title="javascript"></a>javascript</h5><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/javascript/step_04" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/javascript/step_04</a></li></ul><h5 id="java-2"><a href="#java-2" class="headerlink" title="java"></a>java</h5><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step4" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step4</a></li></ul><h2 id="Step-5-Task를-그리는-Renderer-구현하기"><a href="#Step-5-Task를-그리는-Renderer-구현하기" class="headerlink" title="Step 5. Task를 그리는 Renderer 구현하기"></a>Step 5. Task를 그리는 Renderer 구현하기</h2><p>Todo App에서 데이터와 행위에 대해 추상화를 어느정도 하였으니 이번엔 화면에 그리는 작업을 하는 Renderer를 구현해보자. 잉? 앞에서 화면 구현은 안한다고 하지 않았나? 물론 그렇게 말했지만 그래도 브라우저에 간단한 DOM으로 출력하는 형태로 Renderer를 구현해보자. (이제 이걸 DomRenderer라고 부르며 Java Version은 ConsoleRenderer라고 콜솔에 출력하는 형태로 구현할 것이다.)</p><p>Task가 Composite Pattern으로 구현되어 있기 때문에 이를 그리는데 사용하는 Renderer의 구조도 Composite Pattern 구조를 따라가게 된다. 이걸 <code>컴포지션은 전파된다</code>라고 표현한다.</p><p>Renderer는 구현 전략을 간단하게 표현하자면 Renderer는 TaskList를 소유하고 이걸 이용해 getResult를 호출하면 줄줄이 사탕으로 딸려오는 Task 데이터를 참조하여 그릴 것이다.</p><p>시작하기 전에 Util 성 코드 부터 하나 추가하자.</p><h5 id="util-js"><a href="#util-js" class="headerlink" title="util.js"></a>util.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> el <span class="token operator">=</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token operator">...</span>attr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> k <span class="token operator">=</span> attr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> attr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token punctuation">:</span> <span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span> el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>k<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">else</span> el<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> el<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위 코드는 DOM을 생성하는 함수 el을 선언한 것이다. 첫 번째 파라미터로는 만드려고 하는데 element의 Tag명을 받고, 그 이후 파라미터는 부터는 함수, style, attribute를 받는다. 자세한 사용 방법은 DomRenderer 클래스를 작성하면서 알아보자.</p><p><img src="/images/20180327-understanding-composite-pattern/sequence_diagram.png"></p><p>그럼 마찬가지로 실행코드 작성 후 의존성이 없는 Task 부터 시작해서 TaskList, TaskItem 그 다음 DomRenderer 클래스 순으로 작성해보자. 위 시퀀스 다이어그램을 보면 자식 Renderer에서 TaskList의 getResult() 함수를 호출하면 부모인 Task의 getResult() 함수를 호출하게 되는 꼴이고 Task.getResult()는 자식(TaskList)의 Hook인 _getResult() 함수를 호출하여 처리한다. 그렇게 반환된 결과에서 TaskItem 각각은 또 getResult() 함수를 호출하게 되고 이렇게 점점 getResult() 함수 호출이 확산되어 가는 모습을 볼 수 있다.</p><h5 id="app-js-2"><a href="#app-js-2" class="headerlink" title="app.js"></a>app.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"s75"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"3강교안작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"코드정리"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> subsub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"subsub1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sub1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subsub1<span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomRenderer</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token function">sel</span><span class="token punctuation">(</span><span class="token string">"#todo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>todo<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Application-java-2"><a href="#Application-java-2" class="headerlink" title="Application.java"></a>Application.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TaskList list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskList</span><span class="token punctuation">(</span><span class="token string">"s75"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskItem item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"3강교안작성"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskItem sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"코드정리"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        item1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sub1<span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskItem subsub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span><span class="token string">"subsub1"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        sub1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subsub1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConsoleRenderer todo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleRenderer</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        todo<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>그 다음 Task 클래스는 어떻게 작성할까? 이제는 TaskList와 TaskItem은 Task 클래스를 상속 받고 있기 때문에 Task에 공통로직을 모을 수 있게 되었다. 또 Task의 getResult 함수의 결과로 item은 자기 자신을 보내고 children으로는 children 각각의 요소들에 해당하는 getResult 함수호출을 확산하도록 구현한다.</p><h5 id="task-js-3"><a href="#task-js-3" class="headerlink" title="task.js"></a>task.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Task <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token function">title</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sortTitle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">date</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sortDate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>title<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">'invalid title'</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">Task</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token string">'invalid'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            item<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">!</span>stateGroup <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token operator">...</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span>v<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token string">'override'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Task-java-3"><a href="#Task-java-3" class="headerlink" title="Task.java"></a>Task.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">TaskWrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String title<span class="token punctuation">;</span>    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Task<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Task</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">InvalidTitleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TaskWrapper <span class="token function">getResult</span><span class="token punctuation">(</span>SortAction sortAction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparator<span class="token operator">&lt;</span>Task<span class="token operator">></span> sortMethod <span class="token operator">=</span> sortAction<span class="token operator">:</span><span class="token operator">:</span>invoke<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>TaskWrapper<span class="token operator">></span> children<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>            children <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> each<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            children<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> each<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            children<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>each <span class="token operator">-</span><span class="token operator">></span> each<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sortAction<span class="token punctuation">,</span> stateGroup<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TaskWrapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> SortAction <span class="token punctuation">{</span>        TITLE <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Task a<span class="token punctuation">,</span> Task b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sortTitle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> DATE <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Task a<span class="token punctuation">,</span> Task b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">sortDate</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Task a<span class="token punctuation">,</span> Task b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>이제 TaskItem과 TaskList 클래스에서는 더 이상 _getResult 훅을 구현하지 않아도 된다. 과감하게 삭제하자.</p><h5 id="task-item-js-1"><a href="#task-item-js-1" class="headerlink" title="task_item.js"></a>task_item.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskItem <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Task<span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">></span> task<span class="token punctuation">.</span>_title<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_date <span class="token operator">></span> task<span class="token punctuation">.</span>_date<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isComplete<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskItem-java-1"><a href="#TaskItem-java-1" class="headerlink" title="TaskItem.java"></a>TaskItem.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskItem</span> <span class="token keyword">extends</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> LocalDateTime date<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isComplete<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TaskItem</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> LocalDateTime date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date <span class="token operator">==</span> null <span class="token operator">?</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isComplete <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isComplete<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">TaskItem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskItem<span class="token punctuation">)</span> task<span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="task-list-js-3"><a href="#task-list-js-3" class="headerlink" title="task_list.js"></a>task_list.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TaskList <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Task<span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">sortTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">sortDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="TaskList-java-3"><a href="#TaskList-java-3" class="headerlink" title="TaskList.java"></a>TaskList.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskList</span> <span class="token keyword">extends</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TaskList</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortTitle</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sortDate</span><span class="token punctuation">(</span>Task task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>마지막으로 DomRenderer 클래스를 구현할 차례다. 실행코드에서 작성했던 DomRenderer의 render() 함수부터 작성해보자.</p><h5 id="dom-renderer-js"><a href="#dom-renderer-js" class="headerlink" title="dom_renderer.js"></a>dom_renderer.js</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> DomRenderer <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_list <span class="token operator">=</span> list<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_sort <span class="token operator">=</span> <span class="token string">'title'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>        parent<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskItem</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 모델 렌더링은 추가된 요소만 그리는게 아니라 모델 전체를 다시 그린다.</span>    <span class="token punctuation">}</span>    <span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">{</span>        parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">toggle</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>task <span class="token keyword">instanceof</span> <span class="token class-name">TaskItem</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            task<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_parent<span class="token punctuation">;</span>        parent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token string">'title,date'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nav<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>        nav<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>            <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span>                <span class="token string">'@fontWeight'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_sort <span class="token operator">==</span> c <span class="token operator">?</span> <span class="token string">'bold'</span> <span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>                <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_sort <span class="token operator">=</span> Task<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span> nav        <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'nav'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_list<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>Task<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_sort<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_render</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token punctuation">{</span>item<span class="token punctuation">,</span> children<span class="token punctuation">}</span><span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingLeft <span class="token operator">=</span> depth <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">TaskList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>                <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_title<span class="token punctuation">,</span>                  <span class="token string">'@textDecoration'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'line-through'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'datetime'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'progress'</span> <span class="token punctuation">:</span> <span class="token string">'complete'</span><span class="token punctuation">,</span>                  <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span>                  <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> sub <span class="token operator">=</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'section'</span><span class="token punctuation">,</span>                      <span class="token string">'appendChild'</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token string">'appendChild'</span><span class="token punctuation">,</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'innerHTML'</span><span class="token punctuation">,</span> <span class="token string">'addTask'</span><span class="token punctuation">,</span>                                       <span class="token string">'addEventListener'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'click'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>previousSibling<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                      <span class="token punctuation">)</span><span class="token punctuation">;</span>        children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> item<span class="token punctuation">,</span> v<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> base<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ConsoleRenderer-java"><a href="#ConsoleRenderer-java" class="headerlink" title="ConsoleRenderer.java"></a>ConsoleRenderer.java</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleRenderer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TaskList list<span class="token punctuation">;</span>    <span class="token keyword">private</span> Task<span class="token punctuation">.</span>SortAction sort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConsoleRenderer</span><span class="token punctuation">(</span>TaskList taskList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> taskList<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sort <span class="token operator">=</span> Task<span class="token punctuation">.</span>SortAction<span class="token punctuation">.</span>TITLE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderComposite</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>sort<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">renderComposite</span><span class="token punctuation">(</span>TaskWrapper result<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TaskWrapper item <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">TaskList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TaskList taskList <span class="token operator">=</span> <span class="token punctuation">(</span>TaskList<span class="token punctuation">)</span> item<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">TaskItem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TaskItem taskItem <span class="token operator">=</span> <span class="token punctuation">(</span>TaskItem<span class="token punctuation">)</span> item<span class="token punctuation">;</span>            String completeStar <span class="token operator">=</span> taskItem<span class="token punctuation">.</span><span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"*"</span> <span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>taskItem<span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> completeStar <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> taskItem<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>taskWrapper <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderComposite</span><span class="token punctuation">(</span>taskWrapper<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>render() 함수를 살펴보면 Task 클래스의 getResult 함수와 많이 닮아 있다. 이유는 Task의 재귀호출로 데이터를 가져오는 컴포짓에 따라서 render() 함수도 마찬가지로 재귀로 데이터를 가져와서 DOM을 생성해야 되기 때문이다. (컴포지션 전파 때문)</p><p>여기까지가 To-Do App을 Composite Pattern으로 구현한 결과이다. 그럼 이대로 끝난 것일까? 컴포지션 전파가 과연 좋은 코드라고 할 수 있을까? 추후 또 다른 Renderer를 구현한다 치면 그 클래스에서 컴포지션 전파를 하게 하는게 올바른걸까? 다음 포스팅에서는 컴포지션 전파를 끊어내기 위한 Visitor Pattern을 살펴보도록 하자.</p><h2 id="To-Do-App-Composite-Pattern-결과물"><a href="#To-Do-App-Composite-Pattern-결과물" class="headerlink" title="To-Do App Composite Pattern 결과물"></a>To-Do App Composite Pattern 결과물</h2><h3 id="Javascript-version"><a href="#Javascript-version" class="headerlink" title="Javascript version"></a>Javascript version</h3><ul><li><a href="https://gist.github.com/icednut/c619b19495a79ebfce7252e3a4573414" target="_blank" rel="noopener">https://gist.github.com/icednut/c619b19495a79ebfce7252e3a4573414</a></li></ul><h3 id="Java-Version"><a href="#Java-Version" class="headerlink" title="Java Version"></a>Java Version</h3><ul><li><a href="https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step5" target="_blank" rel="noopener">https://github.com/icednut/design-pattern-study/tree/master/composite_pattern/java/step5</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> design pattern </tag>
            
            <tag> composite pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Garbage Collector 이해하기 Part 1 (with G1GC, Garbage First GC)</title>
      <link href="/2018/03/25/20180325-about-java-garbage-collection/"/>
      <url>/2018/03/25/20180325-about-java-garbage-collection/</url>
      
        <content type="html"><![CDATA[<h2 id="Garbage-Collection이란"><a href="#Garbage-Collection이란" class="headerlink" title="Garbage Collection이란?"></a>Garbage Collection이란?</h2><p>Garbage Collector를 이해 하려면 Java에서의 메모리 관리 방법과 Garbage Collection이라는 행위(GC Algorithm)를 이해할 필요가 있다. 그 후 Garbage Collector 별로 어떻게 Garbage Collection을 하는지 알아볼 것이다. 이 글에서는 Oracle에서 공식 개발 및 배포하고 있는 Hotspot JVM을 기준으로 진행한다.</p><h3 id="Java에서-메모리를-해제하는-것은-개발자의-영역이-아니다"><a href="#Java에서-메모리를-해제하는-것은-개발자의-영역이-아니다" class="headerlink" title="Java에서 메모리를 해제하는 것은 개발자의 영역이 아니다."></a>Java에서 메모리를 해제하는 것은 개발자의 영역이 아니다.</h3><p>Java에서는 변수나 객체를 다양한 방법으로 선언하고 메모리를 할당 받는다. 그러나 이미 할당 받은 객체나 변수를 해제하는 방법은 없다. System.gc()나 close()와 같은 함수를 떠올릴 수도 있겠지만, 이것은 Garbage Collection을 명시적으로 수행하거나 해당 객체의 사용을 중지하겠다는 의사 표현일 뿐 직접적으로 객체를 메모리에서 삭제(해제)하진 않는다.</p><p>여기서 메모리 해제는 Heap이나 Method Area에 있는 특정한 Object를 Memory에서 삭제한다는 의미다.</p><p>그럼 Java에서는 이런 메모리 해제 작업을 누가 어떻게 할까? 바로 Garbage Collector가 담당하며, 메모리 해제하는 작업을 Garbage Collection이라고 한다.</p><p>JVM Specification에서 Garbage Collection에 대한 정의는 다음과 같다.</p><blockquote><p>Heap storage for objects is reclaimed by an automatic storage management system (typically a garbage collector); objects are never explicity deallocated.</p><p><br></p><p>Heap은 Object를 위한 메모리 공간이고 Garbage Collector라고 하는 자동화된 시스템에 의해 Heap은 재사용 될 수 있다. Object는 절대로 (개발자에 의해) 명시적으로 해제되지 않는다.</p><p><br></p><p>- Java Virtual Machine Speculation, Sectio 3.5.3 [JVMS2 1999]</p></blockquote><p>JVM 벤더들은 위 JVM Specification만 보고 그에 맞게 메모리 구조(Heap Layout)을 구성하고 Garbage Collection에 대한 알고리즘을 적용한 Garbage Collector를 구현했다.</p><p>이러한 노력 덕분에 Java를 사용하면 메모리 해제에 대한 고민을 개발자가 안해도 되게 되었지만 개발자의 의도와는 다르게 프로그램이 갑자기 Garbage Collection만 하면 Suspend 된다거나 하는 현상이 나타날 수 있다. 이러한 현상에 대처하기 위해서는 개발자도 Garbage Collection에 대해 알 필요가 있다.</p><h3 id="그래서-Garbage-Collection이-뭐라고"><a href="#그래서-Garbage-Collection이-뭐라고" class="headerlink" title="그래서 Garbage Collection이 뭐라고?"></a>그래서 Garbage Collection이 뭐라고?</h3><p>Garbage Collection이란 행위를 살펴보면 다음과 나눠서 볼 수 있다.</p><ul><li><strong>Collect</strong>: Heap과 Method Area라는 메모리 영역에서 사용되지 않는 Object를 모으고 </li><li><strong>Flush</strong>: 이렇게 모은 Garbage들을 메모리에서 해제한다.</li></ul><p>그럼 사용되지 않는 Object는 어떻게 판단할까? Java에서는 Root Set과의 관계로 판단한다. 즉 Root Set과 연된되지 않는 Object가 있으면 그것은 Garbage Collection 대상이 된다는 의미이다.</p><p>그럼 Root Set이란 뭘까? (정확히 말해 Root Set은 뭘로 구분할까?)</p><ul><li>Stack의 참조 정보<ul><li>Local Variable Section과 Operand Stack이라는 스택 공간에 Object Reference 데이터가 있다면 이것은 Reachable Object로 판단하며 현재 Thread들이 사용하고 있는 것으로 간주한다. 즉, Garbage Collection의 입장에서는 두 스택공간이 Root Set이 되는 것이다.</li></ul></li><li>Constant Pool에 있는 Reference 정보<ul><li>Method Area에 로딩된 클래스(static variable이 선언된 클래스)들은 Thread들이 직접적으로 참조하고 있지 않지만 Constant Pool을 통해 간접적으로 Link하고 있는 Reachable Object이다. 그러므로 Constant Pool도 Root Set으로 볼 수 있다.</li></ul></li><li>Native Method로 넘겨진 Object Reference<ul><li>Native Method로 넘겨진 Object는 JNI 형태로 현재 참조관계가 있는 Object이기 때문에 Reachable Object로 판단한다.</li></ul></li></ul><p>위 세 가지 기준에 따라 Reachable Object 여부를 판단하게 되며 Root Set과 관계 없이 상호 참조만 하고 있는 Object가 있다면 Garbage Collector는 이것을 Garbage로 판단하고 메모리를 해제한다.</p><h3 id="Heap-Fragmentation-힙의-단편화-등장"><a href="#Heap-Fragmentation-힙의-단편화-등장" class="headerlink" title="Heap Fragmentation(힙의 단편화) 등장"></a>Heap Fragmentation(힙의 단편화) 등장</h3><p>Garbage Collection의 목적은 새로운 Object의 할당을 위해 한정된 Heap 공간을 재활용하려는 목적으로 수행된다. 그러나 여기서 Garbage가 빠져나간 공간 재활용을 위해 해제한 메모리 공간은 할당했던 그 자리에서 일어나기 때문에 메모리 공간이 듬성듬성해진다. 이렇게 듬성듬성해진 공간이 1kbyte, 2kbyte, 3kbyte 3개를 확보한 상태에서 5kbyte 크기의 Object를 할당하려고하면 할당할 수 없게 된다. 이러한 문제를 Heap Fragmentation이라고 한다.</p><p>이걸 방지하기 위해 어떻게 해야 될까? Garbage Collector는 메모리 해제 후 Compation이라는 알고리즘을 사용한다. (Compaction: 압축, 메모리 공간 정리 작업)</p><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p>Garbage Collection을 한 줄로 정리하자면 다음과 같다.</p><blockquote><p>Garbage Collection이란 Heap을 재활용하기 위해 Root Set에서 참조되지 않는 Object를 없애 가용한 공간을 만드는 작업</p></blockquote><p>Garbage Collection이란 이러한 메모리 해제 작업에 대한 알고리즘이고, Garbage Collector은 Garbage Collection을 실행하는 주체라고 보면 된다.</p><h2 id="Garbage-Collection의-기본-알고리즘"><a href="#Garbage-Collection의-기본-알고리즘" class="headerlink" title="Garbage Collection의 기본 알고리즘"></a>Garbage Collection의 기본 알고리즘</h2><p>Java의 Garbage Collection 알고리즘은 여러 시행착오와 경험에 의해 발전되어 왔다. 대표적으로 6개의 알고리즘이 있는데 최근에 Garbage First(G1 GC)라는 새로운 알고리즘도 나왔다. (G1 GC는 Train 알고리즘의 아이디어를 빌려와 채용했다고 한다.) 각 알고리즘의 동작과정과 특징을 살펴보면 GC알고리즘 한 개가 있으면 이 것에 대한 단점을 보완하거나 멀티코어 환경, 서버환경, 클라이언트(모바일) 환경에서의 효율적인 GC를 위해 더 발전된 형태로 다음 GC 알고리즘이 탄생한 것을 볼 수 있다. 그럼 6가지 GC 알고리즘에 대해 알아보자.</p><ul><li>Reference Counting Algorithm</li><li>Mark-and-Sweep Algorithm</li><li>Mark-and-Compaction Algorithm</li><li>Copying Algorithm</li><li>Generational Algorithm</li><li>Train Algorithm</li></ul><h3 id="Reference-Counting-Algorithm"><a href="#Reference-Counting-Algorithm" class="headerlink" title="Reference Counting Algorithm"></a>Reference Counting Algorithm</h3><p>이 알고리즘은 Java 초기에 나온 알고리즘을 Garbage를 수집하는 것에만 집중되어 있다. Reference Counting 알고리즘 이후의 알고리즘들은 수집 뿐만 아니라 Heap Memory를 어떻게 재활용해야 하는 고민들에 초점이 맞추어 지는 것을 볼 수 있다.</p><p>Reference Count 알고리즘의 기본 아이디어는 다음과 같다.</p><ul><li>각 Object 마다 Reference Count를 관리하여 Reference Count가 0이 되는 Object는 Garbage로 간주하고 메모리 해제</li><li>즉, Object에 Reference 되면 Reference Count는 1이 증가하고 Reference가 사라지면 1이 감소</li><li>이 Reference 관계가 간접적이라 하더라도 참조하고 있는 모든 Object에 대해 연쇄적으로 Reference Count가 변경</li></ul><h4 id="동작-방식-이해"><a href="#동작-방식-이해" class="headerlink" title="동작 방식 이해"></a>동작 방식 이해</h4><p>이 부분은 추후 업데이트 예정</p><ul><li>예제1</li><li>예제2</li></ul><h4 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h4><p>이 부분은 추후 업데이트 예정</p><ul><li>Memory Leak이 발생할 가능성이 있다. (Root Set - a - b - c - a의 상황에서 Root Set과 a의 관계가 끊어지게 되도 a는 살아있게 됨)</li></ul><h3 id="Mark-and-Sweep-Algorithm"><a href="#Mark-and-Sweep-Algorithm" class="headerlink" title="Mark-and-Sweep Algorithm"></a>Mark-and-Sweep Algorithm</h3><p>Mark-and-Sweep 알고리즘은 Tracing Algorithm이라고도 불린다. 이 알고리즘은 Reference Counting 알고리즘의 단점을 극복하기 위해 나왔다고 볼 수 있다. Mark-and-Sweep 알고리즘은 두 가지 단계로 구분되어 진행된다.</p><ul><li>Mark Phase<ul><li>Garbage Object를 구별해 내는 단계</li><li>Root Set에서 Reference 관계가 있는 Object에 대해 Marking하는 작업 진행</li><li>Marking은 주로 Object Header에 Flag에 하거나 별도의 Bitmap Table등을 사용</li></ul></li><li>Sweep Phase<ul><li>Marking되지 않은 Object를 지우는 작업</li></ul></li></ul><h4 id="동작-방식-이해-1"><a href="#동작-방식-이해-1" class="headerlink" title="동작 방식 이해"></a>동작 방식 이해</h4><p>이 부분은 추후 업데이트 예정</p><h4 id="문제점-1"><a href="#문제점-1" class="headerlink" title="문제점"></a>문제점</h4><p>이 부분은 추후 업데이트 예정</p><ul><li>Garbage Collection 과정 중에는 Heap의 사용이 제한되기 때문에 프로그램이 잠깐 멈추는 현상(Suspend) 발생</li><li>Heap Fragmentation 발생</li></ul><h3 id="Mark-and-Compaction-Algorithm"><a href="#Mark-and-Compaction-Algorithm" class="headerlink" title="Mark-and-Compaction Algorithm"></a>Mark-and-Compaction Algorithm</h3><p>이 알고리즘은 Mark-and-Sweep 알고리즘의 단점을 보완하고자 나왔다. 앞의 알고리즘에서 Compaction이 포함되었다고 보면 된다. 이 알고리즘도 두 가지 단계로 구분되어 진행된다.</p><ul><li>Mark Phase<ul><li>Mark-and-Sweep 알고리즘의 Mark Phase와 Sweep Phase가 이 단계와 동일</li></ul></li><li>Compaction Phase<ul><li>Mark Phase에서 살아남은 Live Object를 연속된 메모리 공간에 차곡차곡 적재</li><li>Arbitrary 방식, Linear 방식, Sliding 방식이 있는데 Hotspot JVM은 Sliding 방식을 채용</li></ul></li></ul><h4 id="동작-방식-이해-2"><a href="#동작-방식-이해-2" class="headerlink" title="동작 방식 이해"></a>동작 방식 이해</h4><p>이 부분은 추후 업데이트 예정</p><h4 id="문제점-2"><a href="#문제점-2" class="headerlink" title="문제점"></a>문제점</h4><p>이 부분은 추후 업데이트 예정</p><ul><li>Compaction Phase를 통해 Fragmentation을 방지 및 메모리 공간의 효율성이 좋아졌지만, 모든 Reference를 메모리 공간에서 업데이트하는 작업이 성능 측면에서 오버헤드가 될 수 있다.</li><li>Mark Phase와 Compaction Phase 모두 Suspend 현상이 발생한다.</li></ul><h3 id="Copying-Algorithm"><a href="#Copying-Algorithm" class="headerlink" title="Copying Algorithm"></a>Copying Algorithm</h3><p>이 알고리즘은 Fragmentation의 문제를 해결하기 위해 제시된 또 다른 방법이라고 보면된다. 이 알고리즘 부터는 Heap을 영역별로 나누어서 다루게 되는데 Copying 알고리즘은 Heap을 Active 영역, Inactive 영역으로 나누어 사용한다. 이 알고리즘의 동작을 요약하면 다음과 같다.</p><ul><li>Active 영역에만 Object를 할당 받을 수 있음</li><li>Active 영역이 꽉차서 더 이상 Allocation이 불가능해지면 Garbage Collection 수행</li><li>Active 영역에서 살아남은 Live Object는 Inactive 영역으로 Copy하고 Active 영역을 비움 (이를 Scavenge라고 함)</li><li>Inactive에 복사할 때 한 쪽 방향에서 차곡차곡 적재를 하기 때문에 Fragmentation이 극복됨</li><li>이 알고리즘의 단점은 Garbage Collection을 하려고 하면 일단 프로그램은 Suspend 상태가 된다.</li></ul><h4 id="동작-방식-이해-3"><a href="#동작-방식-이해-3" class="headerlink" title="동작 방식 이해"></a>동작 방식 이해</h4><p>이 부분은 추후 업데이트 예정</p><h4 id="문제점-3"><a href="#문제점-3" class="headerlink" title="문제점"></a>문제점</h4><p>이 부분은 추후 업데이트 예정</p><ul><li>GC 수행 전 Suspend하고 GC 진행</li><li>Fragmentation 방지에는 효과적이지만 전체 Heap의 절반 정도를 사용하지 못함 (Active, Inactive로 나뉘어 있기 때문)</li><li>Copy 작업이 오버헤드</li></ul><h3 id="Generational-Algorithm"><a href="#Generational-Algorithm" class="headerlink" title="Generational Algorithm"></a>Generational Algorithm</h3><p>앞서 소개한 Copying 알고리즘을 사용하면서 JVM은 몇 가지 경험을 알게 된다.</p><ul><li>Copying 알고리즘을 사용하면서 대부분의 프로그램에서 생성되는 대다수의 Object는 생성된지 얼마 되지 않아 Garbage가 된다</li><li>어떤 프로그래밍라 하더라도 수명이 긴 몇 개의 Object는 반드시 가지고 있다</li><li>이렇게 긴 수명의 Object (Long Lived Object)의 경우 Inactive와 Active를 계속 왔다 갔다 하면서 Copy 작업이 일어나며 이에 대한 Overhead가 만만치 않음</li></ul><p>위 경험들을 극복하기 위해 Generational 알고리즘이 나오게 되었으며, 이 알고리즘은 Copying 알고리즘의 연장선상에 있다고 볼 수 있다. 이 알고리즘에서는 Heap을 Youngest Generation Sub Heap, Oldest Generation Sub Heap 이렇게 두 부분으로 나누어 사용한다. 이 알고리즘의 특징은 다음과 같다.</p><ul><li>Object는 처음에 할당하게 되면 Youngest Generation Sub Heap에 위치</li><li>GC가 일어날 때마다 살아남은 Object는 age라는 메타 정보를 증가</li><li>age가 임계값을 넘어가는 Youngest Generation Sub Heap의 Object들은 Oldest Generation Sub Heap으로 이동 (이를 Promotion이라고 함)</li></ul><p>이 알고리즘의 장점은 Heap을 Young, Old라는 두 가지 부분으로 나누어서 다루기 때문에 각 부분마다 GC를 따로따로 실행할 수 있게 되었고, 또 Young, Old 각각 다른 알고리즘을 적용할 수도 있게 되었다. 그렇기 때문에 Hotspot JVM이나 IBM JVM에서도 이 알고리즘을 사용하게 된다. 여기서는 단순히 Young, Old라고만 적었는데 Hotspot JVM에서는 Young Generation 안에서도 Eden, Survivor 등과 같은 영역으로 나눠서 좀 더 세분화하여 Heap을 다룬다.</p><h3 id="Train-Algorithm"><a href="#Train-Algorithm" class="headerlink" title="Train Algorithm"></a>Train Algorithm</h3><p>Tracing 알고리즘 이후 Suspend 현상이 나타나는 것은 골치거리였다. 특히 WAS와 같이 짧은 트랜잭션을 처리하는 시스템의 경우 불규칙적인 Suspend 현상은 불쾌한 사용자 경험만 안겨줄 뿐이다. Train 알고리즘은 Suspend와 같은 현상을 극복하기 위해 Heap을 작은 Memory Block으로 나누어 Single Block 단위로 Mark Phase &amp; Copy Phase로 구성된 Garbage Collection을 수행한다. 덕분에 작은 메모리 블록 별로 스레드가 GC를 수행하여 Suspend를 분산시켜 Pause Time 줄여보자는 아이디어인 것이다. 이 알고리즘은 Garbage First Garbage Collector의 알고리즘이 되며 결국 Java 9에서는 G1GC가 Default Garbage Collector로 채택되게 된다.</p><h4 id="동작-방식-이해-4"><a href="#동작-방식-이해-4" class="headerlink" title="동작 방식 이해"></a>동작 방식 이해</h4><p>이 부분은 추후 업데이트 예정</p><h2 id="Hotspot-JVM의-Garbage-Collection"><a href="#Hotspot-JVM의-Garbage-Collection" class="headerlink" title="Hotspot JVM의 Garbage Collection"></a>Hotspot JVM의 Garbage Collection</h2><p>오라클에서 유지보수하고 있는 공식 Hotspot JVM은 Generational Collection 방식을 택하고 있다. 최근 Garbage First Garbage Collection을 기본으로 택하면서 그 방식이 약간 변경되긴 했지만 공통적으로 Heap을 Generation이라는 영역별로 나누어 사용하는 것이 Hotspot JVM의 가장 큰 특징이다.</p><p><img src="hotspot_jvm_heap.png" alt="otspot_jvm_hea"></p><p>이미지 출처: <a href="http://performeister.tistory.com/60" target="_blank" rel="noopener">http://performeister.tistory.com/60</a></p><p>Hotspot JVM의 Heap 메모리 구조는 다음과 같이 되어 있다.</p><ul><li>Young Generation<ul><li>Eden</li><li>Survivor 1</li><li>Survivor 2</li></ul></li><li>Old Generation<ul><li>Tenured</li></ul></li><li>Permanent Generation</li></ul><h4 id="Eden-영역"><a href="#Eden-영역" class="headerlink" title="Eden 영역"></a>Eden 영역</h4><ul><li>Young Generation은 Object를 Allcation하는 영역이며, 그 중에서 Eden 영역은 Object가 최초로 할당되는 영역</li><li>Object Allocation은 TLAB(Thread Local Allocation Buffer)라는 기술을 사용</li></ul><blockquote><p>What is TLAB?</p><ul><li>Thread 마다 할당을 위한 주소 범위를 미리 부여하고 그 범위 내에서 Object Allocation을 하게 하는 것</li><li>이러한 범위를 Thread Local Allocation Buffer라고 부름</li><li>Thread 별로 공간을 나누어 주어 그 안에서 아무런 대기 현상 없이 Allocation이 가능해짐</li><li>단 TLAB를 Thread에게 최초 할당하거나 할당된 TLAB가 부족하여 새로 받을 때는 동기화 이슈가 발생하지만 Object Allocation 횟수에 비하면 이 동기화는 껌</li></ul></blockquote><h4 id="Survivor-1-2-영역-From-To-영역이라고도-함"><a href="#Survivor-1-2-영역-From-To-영역이라고도-함" class="headerlink" title="Survivor 1, 2 영역 (From, To 영역이라고도 함)"></a>Survivor 1, 2 영역 (From, To 영역이라고도 함)</h4><ul><li>Eden 영역에서 Old Generation으로 가기 위한 대기 장소</li><li>이 영역의 Object가 Old Generation으로 가는 것을 Promotion 이라고 함</li><li>여기까지를 Young Generation 이라고 하며, Young Generation에서 발생하는 Garbage Collection을 Minor GC라고 부른다.</li></ul><h4 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h4><ul><li>Tenured 영역이라고도 하며 Long Lived Object가 머무르는 곳이다.</li><li>Old Generation에서 발생하는 Garbage Collection을 Major GC라고 부른다.</li><li>Major GC는 Promotion을 통해 Old Generation으로 Object가 이동하는 과정에서 메모리가 부족해지면 발생</li><li>Major GC는 Minor GC로 인해 Garbage Collection이 확산된 것</li></ul><h4 id="Permanent-Generation"><a href="#Permanent-Generation" class="headerlink" title="Permanent Generation"></a>Permanent Generation</h4><ul><li>추후 설명 예정</li></ul><p>이렇게 Generation을 나누고 Minor GC, Major GC로 나눠서 GC를 하게 되면 전체적인 Suspend Time을 줄일 수 있다. 여기에는 대부분의 Object는 새로 생겨난 후 얼마되지 않아 Garbage가 된다는 가정이 깔려있다. 또한 Older Object가 Younger Object를 참조하는 일은 상당히 드물다는 가정이 깔려있다. 이러한 가정을 바탕으로 Minor GC를 가볍게 유지하기 위해 노력한다.</p><p>그런데 Older Object가 Young Generation에 있는 Object를 참조하는 경우는 어떻게 할 것인가? 드물긴해도 불가능한 것은 아니다. 만약 이런 상황이라면 Minor GC 이후 Major GC에서 Old generation의 Object들의 Reference를 모두 추적한다면 Heap Memory 전체 Suspend 시간이 길어져 곤란하다. 이를 해결하기 위해 태어난게 Card Table과 Write Barrier 이다.</p><h4 id="Card-Table-amp-Write-Barrier"><a href="#Card-Table-amp-Write-Barrier" class="headerlink" title="Card Table &amp; Write Barrier"></a>Card Table &amp; Write Barrier</h4><p>추후 설명 업데이트 예정</p><ul><li>Old Object가 Young Object를 참조하고 있다면 Old Object의 시작주소에 해당하는 Card에 Dirty 표시</li><li>이렇게 표시하는 작업을 수행하는 것을 Write Barrier이 수행</li></ul><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><ul><li><p>Java Performance Fundamental, 김한도 지음 (2009년도 출판)</p></li><li><p>[<a href="http://performeister.tistory.com/60]" target="_blank" rel="noopener">http://performeister.tistory.com/60]</a>: <a href="http://performeister.tistory.com/60" target="_blank" rel="noopener">http://performeister.tistory.com/60</a></p><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> garbage collector </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Druid 파헤치기 - 입문</title>
      <link href="/2018/03/05/20180305-start-druid/"/>
      <url>/2018/03/05/20180305-start-druid/</url>
      
        <content type="html"><![CDATA[<h3 id="Druid란-무엇인가"><a href="#Druid란-무엇인가" class="headerlink" title="Druid란 무엇인가?"></a>Druid란 무엇인가?</h3><blockquote><ul><li>Druid is a system built to allow fast (“real-time”) access to large sets of seldom-changing data.</li><li>Druid is an open-source data store designed for sub-second queries on real-time and historical data. It is primarily used for business intelligence (OLAP) queries on event data.</li><li>Druid is a good fit for products that require real-time data ingestion of a single, large data stream. Especially if you are targeting no-downtime operation and are building your product on top of a time-oriented summarization of the incoming data stream. </li><li>with Druid it is entirely within the realm of possibility (we have done it) to achieve queries that run in less than a second across trillions of rows of data.<br><br></li><li>드루이드는 변하지 않는 대규모 데이터셋에 빠르게 (실시간으로) 액세스하기 위해 만들어진 시스템이다.</li><li>드루이드는 실시간과 시계열 데이터에서 1초 미만의 쿼리를 위해 설계된 오픈소스 데이터 저장소이다. 주로 이벤트 데이터에 대한 BI쿼리(OLAP)에 사용된다.</li><li>드루이드는 싱글 혹은 대규모 데이터 스트림에서 실시간 데이터 입수(ingestion)이 필요한 제품에 적합하다. 특히 무중단 운영과 데이터 스트림 입수에서 시간 기반 요약을 제공하는 제품을 개발할 때 특히 그렇다.</li><li>드루이드를 사용하면 수십억 데이터 행에서 1초 이내에 쿼리를 실행할 수 있게 된다.<br><br><br>출처: Druid 공식 사이트 (<a href="http://druid.io/docs/0.11.0/design/design.html" target="_blank" rel="noopener">http://druid.io/docs/0.11.0/design/design.html</a>)</li></ul></blockquote><p>드루이드 공식 사이트에 소개된 드루이드 소개글을 보면 대용량의 시계열 데이터를 실시간으로 빠르게 분석하고 싶을 때 사용하는 데이터 저장소라고 소개하고 있다. 다른 여러 저장소도 있지만 오픈소스 진영에서는 드루이드가 주목 받고 있는 것 같다. (<a href="http://xyz.insightdataengineering.com/blog/pipeline_map/" target="_blank" rel="noopener">http://xyz.insightdataengineering.com/blog/pipeline_map/</a> 여기에도 Druid를 소개하고 있음)</p><h4 id="여기서-잠깐-OLAP-On-Line-Analytical-Processing-가-뭐지"><a href="#여기서-잠깐-OLAP-On-Line-Analytical-Processing-가-뭐지" class="headerlink" title="여기서 잠깐! OLAP(On-Line Analytical Processing)가 뭐지?"></a>여기서 잠깐! OLAP(On-Line Analytical Processing)가 뭐지?</h4><blockquote><ul><li>Online analytical processing, or OLAP, is an approach to answering multi-dimensional analytical (MDA) queries swiftly in computing.</li><li>OLAP is part of the broader category of business intelligence, which also encompasses relational database, report writing and data mining. Typical applications of OLAP include business reporting for sales, marketing, management reporting, business process management (BPM), budgeting and forecasting, financial reporting and similar areas, with new applications coming up, such as agriculture.</li><li>At the core of any OLAP system is an OLAP cube (also called a ‘multidimensional cube’ or a hypercube).<br><br></li><li>OLAP (Online Analytical Processing, 온라인 분석 처리)는 다차원 컬럼 분석(MDA, Multi-dimensional analytical) 쿼리에 신속하게 응답하는 방법이다.</li><li>OLAP는 관계형 데이터베이스, 리포트 작성 및 데이터 마이닝을 포함하는 비지니스 인텔리전스의 광범위한 카테고리 중 한 부분이다. 일반적인 OLAP 어플리케이션으로는 영업, 마케팅, 리포팅 관리, 비지니스 프로세스 관리, 예산 및 예측, 예산 보고 등과 같은 영역이 포함되며 농업과 같은 분야에서도 쓰일 수 있다.</li><li>OLAP 시스템의 핵심은 OLAP 큐브(다른 말로 다차원 큐브 혹은 하이퍼큐브)이다.<br><img src="/images/20180305-start-druid/OLAP_Cube.svg" title="OLAP 큐브의 예시"><br><br><br>출처: <a href="https://en.wikipedia.org/wiki/Online_analytical_processing#cite_note-22" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Online_analytical_processing#cite_note-22</a></li></ul></blockquote><p>OLAP는 최종 사용자가 다차원 정보에 직접 접근하여 대화식으로 정보를 분석 및 활용하는 과정으로 정의 할 수 있다. OLAP에서는 다음과 같이 대화식 질문들에 대한 답을 빠르게 해결하는 것이 목적이다.</p><ul><li>35세 이상의 고객들은 작년에 얼마나 지출했고 시간에 따라 어떻게 변했는가?</li><li>각 연령 집단의 경우 제품 범주별 수익 내역(차익금 비율, 전체 수익 모두)은 어떠한가?</li></ul><p>BI 분야에서는 단순히 ‘이번 달 매출액이 얼마인가?’ 이렇게 물어보지 않고 여러 각도로 정보를 구성하여 원하는 정보를 추출하기를 원한다. OLAP는 결과 산출을 빠르게 하기 위해 다양한 차원들에 대해 선계산 값을 미리 산출하여 OLAP 큐브라는 데이터 구조로 측정값을 저장한다. 즉, 큐브는 시간, 지역, 제품군 등 여러 차원(Dimension)을 판매량, 재고량과 같은 측정값(Measure)으로 요약한 데이터이다.<br><br></p><p>[OLAP Cube example 1]<br><img src="/images/20180305-start-druid/olap_cube.png" title="OLAP 큐브의 예시"><br><br></p><p>[OLAP Cube example 2]<br><img src="/images/20180305-start-druid/olap_cube_2.jpg" title="OLAP 큐브의 예시"></p><p>위와 같은 OLAP 큐브가 구축되어 있다면 다음과 같은 쿼리를 처리할 수 있게 된다.</p><ul><li>올해 가장 매출이 저조한 대리점과 저조한 상품 품목은?</li><li>서울지역에서 가장 매출이 높은 상품과 순이익이 가장 높은 상품은?</li><li>지역별로 전월 대비 매출이 가장 높은 상품은?<br><br></li></ul><p>OLAP을 하기 위해서는 OLTP(On-Line Transaction Processing)이 선행되어야 한다.<br><img src="/images/20180305-start-druid/oltp-olap.png" title="OLTP와 OLAP의 차이"><br><img src="/images/20180305-start-druid/dt_wh.png" title="OLTP와 OLAP의 차이"><br>OLAP 큐브를 만들기 위해서는 여러 관계형 데이터들을 집약한 Data Warehouse가 필요하다. 관계형 데이터는 OLTP라는 영역에서 데이터를 수집한다.</p><ul><li><p>OLTP (OnLine Transaction Processing)<br>Batch 와 반대되는 개념으로 실시간으로 db의 데이터를 트랜잭션 단위로 갱신/조회하는 처리방식. 은행, 증권사 등에서 씀. 기존과 달리 다수의 client가 거의 동시에 이용할수 있도록 송수신자료를 트랜잭션단위로 압축한것이 특징.</p></li><li><p>DW (Data Warehouse)<br>OLTP에서 발생한 데이터를 모아서 주제별로 합쳐 분석하기 편한 형태로 통합한 데이터 시스템</p></li></ul><p>OLAP의 더 자세한 내용에 대해서는 다음 링크들을 참조하자.</p><ul><li><a href="http://12bme.tistory.com/144" target="_blank" rel="noopener">http://12bme.tistory.com/144</a></li><li><a href="http://egloos.zum.com/carrpediem/v/2459408" target="_blank" rel="noopener">http://egloos.zum.com/carrpediem/v/2459408</a></li><li><a href="http://118k.tistory.com/66" target="_blank" rel="noopener">http://118k.tistory.com/66</a></li><li><a href="http://olap.com/olap-definition/" target="_blank" rel="noopener">http://olap.com/olap-definition/</a></li><li><a href="http://i-bada.blogspot.kr/2014/01/olap-online-analytical-processing.html" target="_blank" rel="noopener">http://i-bada.blogspot.kr/2014/01/olap-online-analytical-processing.html</a></li><li><a href="https://galaktikasoft.com/blog/olap-glossary.html" target="_blank" rel="noopener">https://galaktikasoft.com/blog/olap-glossary.html</a></li><li><a href="https://support.office.com/ko-kr/article/olap-online-analytical-processing-%EA%B0%9C%EC%9A%94-15d2cdde-f70b-4277-b009-ed732b75fdd6" target="_blank" rel="noopener">https://support.office.com/ko-kr/article/olap-online-analytical-processing-%EA%B0%9C%EC%9A%94-15d2cdde-f70b-4277-b009-ed732b75fdd6</a></li><li><a href="https://en.wikipedia.org/wiki/OLAP_cube" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/OLAP_cube</a></li></ul><h4 id="Druid의-Key-Features"><a href="#Druid의-Key-Features" class="headerlink" title="Druid의 Key Features"></a>Druid의 Key Features</h4><ul><li>1초 미만의 OLAP 쿼리 가능 (Sub-second OLAP Queries): 드루이드는 신속한 다차원 필터링, 임시 어트리뷰트 그룹핑 및 매우 빠른 집계(Aggregation)가 가능하다.</li><li>실시간 스트리밍 집계 (Real-time Streaming Ingestion): 드루이드는 락(Lock)없는 실시간 수집을 사용하여 대량의 데이터를 받음과 동시에 쿼리 실행이 가능하다.</li><li>강력한 분석 도구 (Power Analytic Applications): 드루이드는 수천 명의 동시 사용자가 사용할 수 있도록 설계된 강력한 사용자 지향 분석 어플리케이션이다.</li><li>효율적인 비용 (Cost Effective)</li><li>높은 가용성 (Highly Available)</li><li>확장성 (Scalable)</li></ul><h4 id="Druid는-언제-써야할까"><a href="#Druid는-언제-써야할까" class="headerlink" title="Druid는 언제 써야할까?"></a>Druid는 언제 써야할까?</h4><p>드루이드는 다음과 같은 요구사항에 적합하다.</p><ul><li>빠른 집계 및 OLAP 쿼리가 필요한 응용 프로그램을 개발할 때</li><li>실시간 분석을 원하면서 굉장히 많은 데이터를 다룰 때 (조 단위의 이벤트 로우 수, 페타 바이트의 데이터)</li><li>실패 없이 항상 사용할 수 있는 데이터 저장소가 필요할 때</li></ul><p>현재 드루이드 공식 사이트에서 소개하고 있는 <a href="http://www.marketwired.com/press-release/metamarkets-clients-analyzing-100-billion-programmatic-events-daily-on-track-surpass-2061596.htm" target="_blank" rel="noopener">프로덕션 드루이드 클러스터 성공 사례</a>의 규모는 다음과 같다고 한다.</p><ul><li>3+ trillion events/month (3조 이벤트/1개월)</li><li>3M+ events/sec through Druid’s real-time ingestion (초당 3백만 이벤트를 드루이드에 실시간 입수)</li><li>100+ PB of raw data (100 페타 바이트의 로우 데이터)</li><li>50+ trillion events (50조 이벤트)</li><li>Thousands of queries per second for applications used by thousands of users (수천명 유저에 의한 초당 수천 쿼리 실행)</li><li>Tens of thousands of cores (수만 개의 코어)</li></ul><p>다만 주의할 점은 드루이드는 현재 Dremel 및 PowerDrill과 유사한 방식으로 싱글 테이블 쿼리만 허용하며 테이블 간 JOIN은 할 수 없다. 하지만 아래와 같은 장점이 추가되었다.</p><ol><li>중첩된 데이터 구조를 가지는 컬럼 기반의 스토리지 포멧</li><li>중간 정리가 있는 계층적인 쿼리 분산</li><li>빠른 필터링을 위한 인덱싱</li><li>실시간 집계 (집계된 데이터는 즉시 쿼리가 가능함)</li><li>내장애성을 지닌 데이터 손실염려가 없는 분산 구조<br><br></li></ol><h3 id="Druid-Architecture"><a href="#Druid-Architecture" class="headerlink" title="Druid Architecture"></a>Druid Architecture</h3><p>드루이드는 각기 다른 역할을 가진 서비스로 구성되어 있다. 각 서비스는 작은 일을 잘 처리하도록 설계되어 있다.</p><p><img src="/images/20180305-start-druid/druid-dataflow-3.png"></p><h5 id="Historical-Nodes"><a href="#Historical-Nodes" class="headerlink" title="Historical Nodes"></a>Historical Nodes</h5><p>히스토리컬 노드는 드루이드 클러스터의 핵심이다. 히스토리컬 노드는 딥 스토리지에서 세그먼트를 다운로드하고 이러한 세그먼트에 대한 브로커 노드의 쿼리 실행을 하여 결과를 브로커 노드에 반환한다. 히스토리컬 노드는 데이터를 공유하지 않으며 Zookeeper를 통하여 세그먼트 로드, 세그먼트 삭제를 모니터링한다.</p><h5 id="Broker-Nodes"><a href="#Broker-Nodes" class="headerlink" title="Broker Nodes"></a>Broker Nodes</h5><p>브로커 노드를 통해 쿼리를 받고 데이터를 제공한다. 브로커 노드는 쿼리 분산 실행 및 결과 수집, 병합을 담당한다. 브로커 노드도 쿼리 실행을 위해 Real-time 노드와 히스토리컬 노드가 어떤 것인지를 판단할 때 Zookeeper를 사용한다.</p><h5 id="Coordinator-Nodes"><a href="#Coordinator-Nodes" class="headerlink" title="Coordinator Nodes"></a>Coordinator Nodes</h5><p>코디네이터 노드는 드루이드 클러스터의 히스토리컬 노드에 있는 세그먼트를 관리한다. 코디네이터 노드는 히스토리컬 노드에 새로운 세그먼트를 로드, 이전 세그먼트 삭제 및 균형을 맞추기 위한 세그먼트 이동을 지시한다. (히스토리컬 노드에 지시하기 위해 Zookeeper를 사용)</p><h5 id="Realtime-Nodes"><a href="#Realtime-Nodes" class="headerlink" title="Realtime Nodes"></a>Realtime Nodes</h5><p>드루이드에서 실시간 처리는 독립형 실시간 노드를 사용하거나 인덱싱 서비스로 할 수 있다. 실시간 처리 로직은 두 서비스가 동일하다. 실시간 처리는 데이터 수집, 데이터 인덱싱 (세그먼트 작성) 및 세그먼트를 히스토리컬 노드에 전달한다. 실시간 처리 로직에 의해 집계된 데이터는 즉시 질의가 가능하다.</p><p>그 외 드루이드는 3가지 외부 디펜던시가 포함된다.</p><ol><li>Zookeeper: 클러스터 내부에서의 서비스 디스커버리 및 데이터 토폴로지의 운영</li><li>Metadata storage instance: 세그먼트에 대한 메타데이터를 관리하기 위한 메타 데이터 저장소</li><li>Deep Storage LOB store/file system: 세그먼트를 저장하기 위한 딥 스토리지 LOB 저장소/파일 시스템</li></ol><p><img src="/images/20180305-start-druid/druid-manage-1.png"></p><h4 id="여기서-잠깐-세그먼트가-뭐지-세그먼트와-딥-스토리지"><a href="#여기서-잠깐-세그먼트가-뭐지-세그먼트와-딥-스토리지" class="headerlink" title="여기서 잠깐! 세그먼트가 뭐지? (세그먼트와 딥 스토리지)"></a>여기서 잠깐! 세그먼트가 뭐지? (세그먼트와 딥 스토리지)</h4><p>드루이드로 데이터가 입수(Batch Ingestion or Streaming Ingestion)되면 인덱싱 처리가 진행된다. 여기서 인덱싱 작업이란 다음과 같다.</p><ul><li>데이터를 컬럼 기반 포멧의 형태로 변경</li><li>비트맵 인덱스를 활용한 데이터 색인 작업</li><li>다양한 알고리즘을 이용한 데이터 압축</li></ul><p>이러한 인덱싱 작업을 거친 결과물을 드루이드에서는 <code>세그먼트(Segment)</code>라고 부른다. 세그먼트는 드루이드에서 데이터를 저장하는 기본 구조인 것이다. 세그먼트는 컬럼 기반으로 저장된 여러 개의 차원(Dimension)과 측정값(Metrics)를 포함하며 각 컬럼별로 인덱싱이 되어 있다.<br><br><br>세그먼트는 딥 스토리지(Deep Storage)라는 LOB / 파일 시스템에 저장된다. 그 후 데이터는 히스토리컬 노드의 로컬에 다운로드 되고 쿼리 실행하기 전에 메모리에 로딩된다. 히스토리컬 노드 하나가 죽어도 딥 스토리지에는 세그먼트가 있기 때문에 다른 히스토리컬 노드에서 쿼리 서비스를 제공한다.<br><br></p><h3 id="Batch-Ingestion-in-Druid"><a href="#Batch-Ingestion-in-Druid" class="headerlink" title="Batch Ingestion in Druid"></a>Batch Ingestion in Druid</h3><p>먼저 아래와 같은 이벤트 데이터가 있다고 가정하자.</p><pre><code>timestamp             publisher          advertiser  gender  country  click  price2011-01-01T01:01:35Z  bieberfever.com    google.com  Male    USA      0      0.652011-01-01T01:03:63Z  bieberfever.com    google.com  Male    USA      0      0.622011-01-01T01:04:51Z  bieberfever.com    google.com  Male    USA      1      0.452011-01-01T01:00:00Z  ultratrimfast.com  google.com  Female  UK       0      0.872011-01-01T02:00:00Z  ultratrimfast.com  google.com  Female  UK       0      0.992011-01-01T02:00:00Z  ultratrimfast.com  google.com  Female  UK       1      1.53</code></pre><p>드루이드는 이 데이터의 구조를 세 가지 요소로 분류한다.</p><ul><li>Timestamp columns</li><li>Dimension columns</li><li>Metric columns</li></ul><p>Timestamp 컬럼은 말 그대로 시간이 저장된 컬럼을 말하며 Dimension은 이벤트에서 각각의 컬럼을 말하며 필터링에 사용된다. 위 예에서 Dimension은 publisher, advertiser, gender, country를 말한다. Metric은 결합(Aggregation)과 계산(Computation)에서 사용되는 컬럼이다. 위 예에서는 click, price가 해당된다. Metric은 보통 count, sum, mean을 계산할 수 있는 숫자 타입이다. 드루이드는 기본적으로 데이터를 세그먼트 단위로 샤딩하며 샤딩 기준은 시간이다. (데이터 파편화에 대해서는 추후 다시 설명)</p><h4 id="Roll-up"><a href="#Roll-up" class="headerlink" title="Roll-up"></a>Roll-up</h4><p>예제 데이터가 하루에 조 단위로 들어온다면 우리가 원하는 분석 결과를 빠르게 얻어서 인사이트를 찾아낼 수 있을까? 이러한 이벤트 데이터의 분석을 좀 더 빠르게 하기 위해 요약하는 작업을 <code>Roll-up</code>이라고 부른다.<br>드루이드에서 아래와 같이 롤업 규칙을 정하면 규칙에 따라 요약 데이터가 생성된다. (여기서 아래 규칙은 수도코드임)</p><pre><code>GROUP BY timestamp, publisher, advertiser, gender, country  :: impressions = COUNT(1),  clicks = SUM(click),  revenue = SUM(price)</code></pre><pre><code>timestamp             publisher          advertiser  gender country impressions clicks revenue2011-01-01T01:00:00Z  ultratrimfast.com  google.com  Male   USA     1800        25     15.702011-01-01T01:00:00Z  bieberfever.com    google.com  Male   USA     2912        42     29.182011-01-01T02:00:00Z  ultratrimfast.com  google.com  Male   UK      1953        17     17.312011-01-01T02:00:00Z  bieberfever.com    google.com  Male   UK      3194        170    34.01</code></pre><p>이렇게 데이터를 롤업하면 데이터의 크기를 줄일 수 있다. 롤업 시간기준은 최대 밀리 초까지 지원한다고 한다.<br><br></p><h4 id="Batch-Ingestion-Example"><a href="#Batch-Ingestion-Example" class="headerlink" title="Batch Ingestion Example"></a>Batch Ingestion Example</h4><pre><code>{  &quot;type&quot; : &quot;index_hadoop&quot;,  &quot;spec&quot; : {    &quot;ioConfig&quot; : {      &quot;type&quot; : &quot;hadoop&quot;,      &quot;inputSpec&quot; : {        &quot;type&quot; : &quot;granularity&quot;,        &quot;dataGranularity&quot;: &quot;day&quot;,        &quot;inputPath&quot;: &quot;/path/to/hdfs/hive_table&quot;,        &quot;filePattern&quot;: &quot;.+&quot;,        &quot;pathFormat&quot;: &quot;&#39;time&#39;=yyyyMMdd&#39;00&#39;&quot;      }    },    &quot;dataSchema&quot; : {      &quot;dataSource&quot; : &quot;hive_table_druid_data_source&quot;,      &quot;granularitySpec&quot; : {        &quot;type&quot; : &quot;uniform&quot;,        &quot;rollup&quot;: &quot;false&quot;,        &quot;segmentGranularity&quot; : {          &quot;type&quot;: &quot;period&quot;,          &quot;period&quot;: &quot;P1D&quot;,          &quot;timeZone&quot;: &quot;Asia/Seoul&quot;        },        &quot;queryGranularity&quot; : &quot;none&quot;,        &quot;intervals&quot; : [&quot;2017-11-26/2018-02-26&quot;]      },      &quot;parser&quot; : {        &quot;type&quot; : &quot;hadoopyString&quot;,        &quot;parseSpec&quot; : {          &quot;format&quot; : &quot;tsv&quot;,          &quot;listDelimiter&quot;:&quot;,&quot;,          &quot;columns&quot;: [            &quot;user_id&quot;,            &quot;col001&quot;,&quot;col002&quot;,&quot;col003&quot;,&quot;col004&quot;,&quot;col005&quot;,&quot;col006&quot;,&quot;col007&quot;,&quot;col008&quot;,&quot;col009&quot;,&quot;col010&quot;,            &quot;product_id&quot;,&quot;log_time&quot;          ],          &quot;dimensionsSpec&quot; : {            &quot;dimensions&quot; : [              &quot;user_id&quot;,              &quot;col004&quot;,&quot;col005&quot;,&quot;col009&quot;,              &quot;product_id&quot;,&quot;log_time&quot;            ]          },          &quot;timestampSpec&quot; : {            &quot;format&quot; : &quot;yyyyMMddHH&quot;,            &quot;column&quot; : &quot;log_time&quot;          }        }      },      &quot;metricsSpec&quot; : [        {          &quot;type&quot; : &quot;longSum&quot;,          &quot;name&quot; : &quot;audience_count&quot;,          &quot;fieldName&quot;: &quot;user_id&quot;        }      ]    },    &quot;tuningConfig&quot; : {      &quot;type&quot; : &quot;hadoop&quot;,      &quot;partitionsSpec&quot; : {        &quot;type&quot; : &quot;hashed&quot;,        &quot;targetPartitionSize&quot; : 100000      },      &quot;jobProperties&quot; : {        &quot;mapreduce.user.classpath.first&quot;: &quot;true&quot;      }    }  }}</code></pre><p><br></p><h3 id="Druid-Querying"><a href="#Druid-Querying" class="headerlink" title="Druid Querying"></a>Druid Querying</h3><p>드루이드에서는 먼저 브로커에서 쿼리 실행을 받으면 세그먼트에 따라 쿼리를 재작성하여 히스토리컬 노드 혹은 리얼타임 노드에게 쿼리 실행을 위임한다. 브로커 노드는 결국 결과를 모으로 머지하여 최종 결과를 반환한다. Druid에서 할 수 있는 쿼리는 다음과 같다.</p><h4 id="Aggregation-Queries"><a href="#Aggregation-Queries" class="headerlink" title="Aggregation Queries"></a>Aggregation Queries</h4><ul><li>Timeseries</li><li>TopN</li><li>GroupBy</li></ul><h4 id="Metadata-Queries"><a href="#Metadata-Queries" class="headerlink" title="Metadata Queries"></a>Metadata Queries</h4><ul><li>Time Boundary</li><li>Segment Metadata</li><li>Datasource Metadata</li></ul><h4 id="Search-Queries"><a href="#Search-Queries" class="headerlink" title="Search Queries"></a>Search Queries</h4><ul><li>Search<br><br></li></ul><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><ul><li><a href="http://12bme.tistory.com/144" target="_blank" rel="noopener">http://12bme.tistory.com/144</a></li><li><a href="http://egloos.zum.com/carrpediem/v/2459408" target="_blank" rel="noopener">http://egloos.zum.com/carrpediem/v/2459408</a></li><li><a href="http://118k.tistory.com/66" target="_blank" rel="noopener">http://118k.tistory.com/66</a></li><li><a href="http://olap.com/olap-definition/" target="_blank" rel="noopener">http://olap.com/olap-definition/</a></li><li><a href="http://i-bada.blogspot.kr/2014/01/olap-online-analytical-processing.html" target="_blank" rel="noopener">http://i-bada.blogspot.kr/2014/01/olap-online-analytical-processing.html</a></li><li><a href="https://galaktikasoft.com/blog/olap-glossary.html" target="_blank" rel="noopener">https://galaktikasoft.com/blog/olap-glossary.html</a></li><li><a href="https://support.office.com/ko-kr/article/olap-online-analytical-processing-%EA%B0%9C%EC%9A%94-15d2cdde-f70b-4277-b009-ed732b75fdd6" target="_blank" rel="noopener">https://support.office.com/ko-kr/article/olap-online-analytical-processing-%EA%B0%9C%EC%9A%94-15d2cdde-f70b-4277-b009-ed732b75fdd6</a></li><li><a href="https://en.wikipedia.org/wiki/OLAP_cube-" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/OLAP_cube-</a> <a href="http://egloos.zum.com/carrpediem/v/2459408" target="_blank" rel="noopener">http://egloos.zum.com/carrpediem/v/2459408</a></li><li><a href="http://druid.io" target="_blank" rel="noopener">http://druid.io</a></li><li><a href="https://github.com/druid-io/druid" target="_blank" rel="noopener">https://github.com/druid-io/druid</a></li><li><a href="https://en.wikipedia.org/wiki/Online_analytical_processing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Online_analytical_processing</a></li><li><a href="http://www.popit.kr/time-series-olap-druid-%EC%9E%85%EB%AC%B8/" target="_blank" rel="noopener">http://www.popit.kr/time-series-olap-druid-%EC%9E%85%EB%AC%B8/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java Web 개발 살펴보기 (Model 1 부터 Spring Web 까지)</title>
      <link href="/2017/09/04/20170904-java-web-develop-with-spring/"/>
      <url>/2017/09/04/20170904-java-web-develop-with-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Web-개발-살펴보기-Model-1-부터-Spring-Web-까지"><a href="#Java-Web-개발-살펴보기-Model-1-부터-Spring-Web-까지" class="headerlink" title="Java Web 개발 살펴보기 (Model 1 부터 Spring Web 까지)"></a>Java Web 개발 살펴보기 (Model 1 부터 Spring Web 까지)</h1><p>스프링 스터디를 하면서 정리한 Java 웹 개발 변천사를 포스팅 한다. Java Web 개발 과정은 다음과 같으며, 여유가 된다면 곁가지로 파생되는 기술들인 Servlet 3.x, WebSocket, Async I/O, Spring 5 (WebFlux)까지 해보려 한다. 일단 아래 내용들을 따라가기 전에 실습 환경 셋팅을 해야 한다.</p><p><img src="/images/20170904-java-web-develop-with-spring/java_web_develop.jpg" title="Java Web 개발 변천사"><br><br></p><h3 id="Java-Servlet-개발-실습-환경-셋팅"><a href="#Java-Servlet-개발-실습-환경-셋팅" class="headerlink" title="Java Servlet 개발 실습 환경 셋팅"></a>Java Servlet 개발 실습 환경 셋팅</h3><p>실습에 사용할 IDE와 라이브러리, 빌드툴은 다음과 같다.</p><ul><li>IntelliJ IDEA 2017</li><li>JDK 1.8</li><li>Java Servlet 3.1</li><li>Gradle 4.x</li></ul><p>실습 프로젝트 생성 과정은 다음과 같다.</p><ol><li>IntelliJ IDEA &gt; 메뉴 표시줄 &gt; File &gt; New &gt; Project를 클릭</li><li>왼쪽에서 Gradle 이라는 항목을 클릭 후 Java, Web 체크 박스에 체크 후 Next<br><img src="/images/20170904-java-web-develop-with-spring/exercise_01.png" title="실습 환경 셋팅"></li><li>적당한 GroupId와 ArtifactID 입력 후 Next<br><img src="/images/20170904-java-web-develop-with-spring/exercise_02.png" title="실습 환경 셋팅"></li><li>Create seperate module per source set 체크 박스 해제 후 Next<br><img src="/images/20170904-java-web-develop-with-spring/exercise_03.png" title="실습 환경 셋팅"></li><li>Project Name 확인 후 Finish 버튼 클릭하면 프로젝트가 생성되며 Gradle wrapper가 다운로드 되며 프로젝트가 로딩 된다.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_04.png" title="실습 환경 셋팅"></li><li>프로젝트 루트에 있는 build.gradle 파일을 열어서 dependencies 부분에 아래 내용을 붙여넣는다.<pre class="line-numbers language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>   compile group<span class="token punctuation">:</span> <span class="token string">'javax.servlet'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'javax.servlet-api'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'3.1.0'</span>   testCompile group<span class="token punctuation">:</span> <span class="token string">'junit'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'junit'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'4.12'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>메뉴 표시줄 &gt; View &gt; Tool Windows &gt; Web을 클릭하면 왼쪽 하단에 Web 설정 관련 패널이 표시된다.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_05.png" title="실습 환경 셋팅"></li><li>오른쪽 클릭 후 Module Settings 클릭하면 모듈 설정 창이 뜬다. 여기서 아래 스크린샷과 같이 war파일 항목을 클릭하여 포커싱 한다.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_06.png" title="실습 환경 셋팅"></li><li>중간에 위치한 Add Application Server specific descriptor… 버튼 바로 위에 있는 <code>+</code> 버튼을 클릭하면 <code>web.xml</code>이라는 항목이 표시되는데 이걸 클릭하자.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_07.png" title="실습 환경 셋팅"></li><li>서블릿 버전과 서블릿 설정 파일인 web.xml의 위치를 어디로 할 것인가를 묻는 다이얼로그가 뜨는데 web.xml 파일의 위치는 다음과 같이 입력한다.<pre><code>${PROJECT_ROOT}/web/WEB-INF/web.xml</code></pre><img src="/images/20170904-java-web-develop-with-spring/exercise_08.png" title="실습 환경 셋팅"></li><li>아래 Web Resource Directories에 Web Resource Directory 항목을 더블클릭 한다.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_09.png" title="실습 환경 셋팅"></li><li>JSP가 위치할 폴더를 물어보는 다이얼로그가 뜨는데 이 때 아래 경로를 입력한다.<pre><code>${PROJECT_ROOT}/web</code></pre><img src="/images/20170904-java-web-develop-with-spring/exercise_10.png" title="실습 환경 셋팅"></li><li>마지막으로 src/main/webapp 폴더는 삭제한다. (해당 폴더는 더이상 사용하지 않기 때문)<br><img src="/images/20170904-java-web-develop-with-spring/exercise_11.png" title="실습 환경 셋팅"></li></ol><p>실습 프로젝트 실행을 위한 준비 과정은 다음과 같다.</p><ol><li>IntelliJ IDEA &gt; 메뉴 표시줄 &gt; Run &gt; Edit Configurations… 클릭</li><li>왼쪽 상단에 <code>+</code> 버튼 클릭 &gt; Tomcat Server &gt; Local 클릭<br><img src="/images/20170904-java-web-develop-with-spring/exercise_12.png" title="실습 환경 셋팅"></li><li>아래와 같은 다이얼로그가 뜨면 다이얼로그 상단에 위치한 Name 항목에 적당한 이름을 입력 후 오른쪽 하단에 Fix 버튼을 클릭한다.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_13.png" title="실습 환경 셋팅"></li><li>아래와 같이 ooo.war (exploded) 항목을 클릭한다. (디버깅을 위해 war 파일을 푼 형태로 실행) 그 다음 OK 버튼을 클릭하여 설정을 완료한다.<br><img src="/images/20170904-java-web-develop-with-spring/exercise_14.png" title="실습 환경 셋팅"></li><li><code>${PROJECT_ROOT}/web</code> 폴더 아래에 index.jsp 파일을 생성하고 아래 내용을 입력한다.<pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head> <title>Hello!</title></head><body>Hello, world!</body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>IntelliJ 상단 툴바에 있는 실행 버튼을 클릭하여 실행 &gt; 브라우저가 자동으로 뜨면서 Hello, world가 보이면 성공<br><br></li></ol><h3 id="Model-1"><a href="#Model-1" class="headerlink" title="Model 1"></a>Model 1</h3><p><img src="/images/20170904-java-web-develop-with-spring/java_web_develop_model_1.jpg" title="Model 1 Java Web 개발"></p><ul><li>Only view code (JSP)</li><li>옛 PHP 개발 방식과 유사하다.</li><li>JSP 파일 안에 모든 비지니스 로직과 View 로직(html)을 함께 넣은 형식</li><li>예제 실습 (스프링 퀵 스타트 P.241 ~ P.262)<ul><li>P.244 - 로그인 구현 (login.jsp)</li><li>P.247 - 로그인 인증처리 (login_proc.jsp)</li><li>P.249 - 글 목록 (getBoardList.jsp)</li><li>P.252 - 글 상세 보기 (getBoard.jsp)</li><li>P.255 - 글 등록 (insertBoard.jsp)</li><li>P.256 - 글 등록 처리 (insertBoard_proc.jsp)</li><li>P.258 - 글 수정 처리 (updateBoard_proc.jsp)</li><li>P.260 - 글 삭제 (deleteBoard_proc.jsp)</li><li>P.261 - 로그아웃 (logout_proc.jsp)<br><br></li></ul></li></ul><h3 id="Model-2"><a href="#Model-2" class="headerlink" title="Model 2"></a>Model 2</h3><p><img src="/images/20170904-java-web-develop-with-spring/java_web_develop_model_2.jpg" title="Model 2 Java Web 개발"></p><ul><li>Model 1의 view 코드에서 진짜 view를 담당하는 코드(html, jsp)과 view에 바인딩할 데이터를 로딩하는 로직(controller)으로 나눠진 형태</li><li>이제 view에서는 비지니스 로직과 DB 액세스 로직이 없어지게 된다.</li><li>Model 2는 MVC (Model, View, Controller)라고도 불린다.</li><li>예제 실습 (스프링 퀵 스타트 P.265 ~ P.284)<ul><li>P.267 - 서블릿 클래스 등록 &amp; Controller 서블릿 구현</li><li>P.270 - 로그인 기능 구현 (DispatcherServlet.java, login.jsp)</li><li>P.272 - 글 목록 (DispatcherServlet.java, getBoardList.jsp)</li><li>P.275 - 글 상세보기 (DispatcherServlet.java, getBoardList.jsp, getBoard.jsp)</li><li>P.277 - 글 등록 (DispatcherServlet.java, insertBoard.jsp)</li><li>P.279 - 글 수정 (DispatcherServlet.java, getBoard.jsp)</li><li>P.280 - 글 삭제 (DispatcherServlet.java, getBoard.jsp)</li><li>P.280 - 로그아웃 (DispatcherServlet.java, getBoard.jsp)<br><br></li></ul></li></ul><h3 id="Advanced-Model-2"><a href="#Advanced-Model-2" class="headerlink" title="Advanced Model 2"></a>Advanced Model 2</h3><p><img src="/images/20170904-java-web-develop-with-spring/java_web_develop_model_2_2.jpg" title="Advanced Model 2 Java Web 개발"></p><ul><li>앞에서 소개한 Model 2의 방식으로 코딩하다보면 중복되는 코드가 생겨남</li><li>이런 중복되는 로직을 좀 더 객체지향적으로 리팩토링한 방식</li><li>Spring WebMVC가 탄생하기 전 MVC 프레임워크를 직접 개발해 보는 것으로 책은 소개하고 있다.</li><li>예제 실습 (스프링 퀵 스타트 P.285 ~ P.311)<ul><li>P.288 - Controller 인터페이스 작성 (Controller.java)</li><li>P.289 - LoginController 구현 (LoginController.java)</li><li>P.290 - HandlerMapping 구현 (HandlerMapping.java)</li><li>P.291 - ViewResolver 구현 (ViewResolver.java)</li><li>P.292 - DispatcherServlet 수정, hadnlerMapping과 viewResolver를 dispatcherServlet에 추가 (DispatcherServlet.java)</li><li>P.295 - 글 목록 검색 구현 (GetBoardListController.java, HandlerMapping.java)</li><li>P.296 - 글 상세보기 구현 (GetBoardController.java, HandlerMapping.java)</li><li>P.297 - 글 등록 구현 (InsertBoardController.java, HandlerMapping.java)</li><li>P.300 - 글 수정 구현 (UpdateBoardController.java, HandlerMapping.java)</li><li>P.302 - 글 삭제 구현 (DeleteBoardController.java, HandlerMapping.java)</li><li>P.303 - 로그아웃 구현 (LogoutController.java, HandlerMapping.java)</li><li>P.308 - 상세화면 페이지에 EL/JSTL 적용하기 (getBoard.jsp)</li><li>P.310 - 글 목록 페이지에 EL/JSTL 적용하기 (getBoardList.jsp)<br><br></li></ul></li></ul><h3 id="Spring-WebMVC-with-XML-Configuration"><a href="#Spring-WebMVC-with-XML-Configuration" class="headerlink" title="Spring WebMVC (with XML Configuration)"></a>Spring WebMVC (with XML Configuration)</h3><ul><li>Model 2를 처음 개발하는 사람도 일관성 있게 코딩하기 위해 나온 웹 프레임워크</li><li>이 웹 프레임워크를 사용하기 위해 web infrastructure 관련 bean들이 필요한데 이러한 bean을 사용하기 위한 설정을 xml로 한 형태를 말한다.<ul><li>스프링 웹MVC를 쓰면 처음 개발하는 사람도 이전의 개발 이슈들을 극복한 일관성 있는 코딩을 할 수 있게 될거라 기대하지만..</li><li>막상 해보면 스프링 웹MVC를 쓰기 위한 Web infrastructure Bean들을 대충 뭐가 있는지 정도는 알아야 뭘 어떻게 설정하고 컨트롤러는 어떻게 써야되는 것인지 감이 잡힌다. (이게 초기 학습 장벽)</li></ul></li><li>참고로 Servlet 클래스는 DispatcherServlet 하나만 사용한다. (오해하면 안되는게 서블릿 객체를 하나만 사용한다는 말이 아님)</li><li>예제 실습 (스프링 퀵 스타트 P.313 ~ 346)<ul><li>P.315 - Spring DispatcherServlet 등록 (web.xml)</li><li>P.320 - WEB-INF/config 폴더에 스프링 설정 파일 등록 (presentation-layer.xml)</li><li>P.322 - 인코딩 설정 (web.xml)</li><li>P.326 - 로그인 기능 구현 (LoginController.java)</li><li>P.328 - 핸들러 맵핑 등록 (presentation-layer.xml)</li><li>P.329 - 글 목록 기능 구현 (GetBoardListController.java)</li><li>P.331 - 핸들러 맵핑 등록 (presentation-layer.xml)</li><li>P.333 - 글 상세조회 기능 구현 (GetBoardController.java)</li><li>P.334 - 핸들러 맵핑 등록 (presentation-layer.xml)</li><li>P.335 - 글 등록 기능 구현 (InsertBoardController.java)</li><li>P.336 - 핸들러 맵핑 등록 (presentation-layer.xml)</li><li>P.337 - 글 수정 기능 구현 (UpdateBoardController.java)</li><li>P.339 - 글 삭제 기능 구현 (DeleteBoardController.java)</li><li>P.340 - 로그아웃 기능 구현 (LogoutController.java)</li><li>P.342 ~ 345 - ViewResolver 적용 (presentation-layer.xml)<br><br></li></ul></li></ul><h3 id="Spring-WebMVC-with-XML-Configuration-amp-Annotation"><a href="#Spring-WebMVC-with-XML-Configuration-amp-Annotation" class="headerlink" title="Spring WebMVC (with XML Configuration &amp; Annotation)"></a>Spring WebMVC (with XML Configuration &amp; Annotation)</h3><ul><li>앞의 방식에서 Controller와 url 맵핑을 Java Annotation을 사용한 형태</li><li>이 방식을 취하면 XML에 웹 관련 설정(url 맵핑 설정)이 사라지게 된다.<ul><li>스프링은 이렇게 점점 설정을 줄여가는 방식으로 발전됨</li><li>왜? 설정을 찾아서 적는 일도 고된 일이고 프로젝트를 할 때마다 설정을 복사 &amp; 붙여넣기를 해야되는 중복 작업을 줄일 수 있기 때문</li></ul></li><li><p>예제 실습 (스프링 퀵 스타트 P.349 ~ 417)</p><ul><li>P.350 ~ P.353 - @Controller 적용하기 (InsertBoardController.java)</li><li>P.354 ~ P.361 - @RequestMapping 적용하기 (InsertBoardController.java, presentation-layer.xml)</li><li>P.363 - 글 등록 (InsertBoardController.java)</li><li>P.365 - 글 목록 (GetBoardListController.java)</li><li>P.366 - 글 상세보기 (GetBoardController.java)</li><li>P.367 - 글 수정 (UpdateBoardController.java)</li><li>P.368 - 글 삭제 (DeleteBoardController.java)</li><li>P.369 - 로그인 (LoginController.java)</li><li>P.370 - 로그아웃 (LogoutController.java)</li><li>P.371 - 컨트롤러 통합 (BoardController.java)</li><li>P.373 - 요청 방식에 따른 처리 구현 (LoginController.java)</li><li>P.375 - JSP에서 Command 객체 사용 (login.jsp)</li><li>P.377 - @ModelAttribute 사용 (LoginController.java, login.jsp)</li><li>P.378 - Controller에서 Servlet API 사용 (LoginController.java, getBoardList.jsp)</li><li>P.380 - Controller 리턴타입 이해 (BoardController.java)</li><li>P.382 - @RequestParam 사용 (getBoardList.jsp, BoardController.java)</li><li>P.385 - @ModelAttribute 사용 (BoardController.java, getBoardList.jsp)</li><li>P.388 - @SessionAttributes 사용 (BoardController.java)</li><li>P.397 ~ P.408 - 비지니스 레이어(Service 클래스) 리팩토링 (BoardController.java, BoardServiceImpl.java, presentation-layer.xml) </li><li>P.409 ~ P.417 - 글 검색 기능 보완</li></ul></li><li><p>곁다리로 빠지기</p><ul><li>파일 업로드: 스프링 퀵 스타트 P.419 ~ 434</li><li>다국어 처리: 스프링 퀵 스타트 P.435 ~ 450</li><li>JSON View: 스프링 퀵 스타트 P.451 ~ 464<br><br></li></ul></li></ul><h3 id="Spring-WebMVC-with-Java-Configuration-amp-Annotation"><a href="#Spring-WebMVC-with-Java-Configuration-amp-Annotation" class="headerlink" title="Spring WebMVC (with Java Configuration &amp; Annotation)"></a>Spring WebMVC (with Java Configuration &amp; Annotation)</h3><ul><li>Spring에서 어느 순간 XML을 이용한 Bean 설정 방식 보다 Java 클래스를 이용한 Bean 설정 방식이 대두되기 시작함</li><li>Java 설정 방식이 점차 늘어가는 이유는 Infrastructure 관련 Bean들을 좀 더 찾기 쉽고 디버깅 및 이해하기 쉽기 때문에 이 방식이 선호됨</li><li>Spring 뿐만 아니라 Java Servlet도 마찬가지로 web.xml이 사라지고 Java Class와 Annotation으로 서블릿 설정할 수 있게 된다. (servlet 3.0)</li><li>예제 실습<ul><li>준비 중..<br><br></li></ul></li></ul><h3 id="Spring-WebMVC-with-Spring-Boot-Web-Starter"><a href="#Spring-WebMVC-with-Spring-Boot-Web-Starter" class="headerlink" title="Spring WebMVC (with Spring Boot Web Starter)"></a>Spring WebMVC (with Spring Boot Web Starter)</h3><ul><li>이젠 스프링 Infrastructure Bean 선언하는 것도 귀찮다! 혹은 스프링 설정하는게 너무 어렵다! 하는 요구가 늘어남에 따라 Spring팀에서는 Spring-boot 라는 것을 내놓게 된다.</li><li>사람들이 왜 spring-boot를 열광하게 되냐 하면 Java annotation 선언 하나만으로 스프링 Infrastructure Bean들이 자동으로 선언되고 로딩된다. (즉 사용자가 더 이상 스프링에 대한 설정을 잘 몰라도 사용할 수 있게 된다는 의미)</li><li>예제 실습<ul><li>준비 중..<br><br></li></ul></li></ul><h3 id="Spring-WebFlux-amp-Reactor-Spring-Framework-5-x"><a href="#Spring-WebFlux-amp-Reactor-Spring-Framework-5-x" class="headerlink" title="Spring WebFlux &amp; Reactor (Spring Framework 5.x)"></a>Spring WebFlux &amp; Reactor (Spring Framework 5.x)</h3><ul><li>Spring WebFlux에서는 Java Servlet이 사라짐</li><li>따라서 더 이상 war 파일로 패키징하지 않음</li><li>웹 요청을 받는 인프라스트럭쳐가 Reactive, Functional Programming 스타일로 바뀜</li><li>예제 실습<ul><li>준비 중..<br><br><br><br></li></ul></li></ul><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.0.RC3/spring-framework-reference/web.html#spring-web</a></li><li>책 스프링 퀵 스타트</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> servlet </tag>
            
            <tag> spring mvc </tag>
            
            <tag> spring 5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark SQL을 이용하여 avro 파일과 parquet 파일 다루기</title>
      <link href="/2017/09/02/20170902-spark-sql-with-avro-parquet/"/>
      <url>/2017/09/02/20170902-spark-sql-with-avro-parquet/</url>
      
        <content type="html"><![CDATA[<h2 id="준비"><a href="#준비" class="headerlink" title="준비"></a>준비</h2><p>Scala &amp; Spark SQL에서 avro, parquet 파일을 읽고 쓰는 것은 어떻게 하는지 그리고 간단한 예제를 통해 실습한 내용을 정리한다. (avro와 parquet에 대한 설명은 여기서는 생략)<br>먼저 아래 내용들을 통해 실습 환경을 셋팅하자.</p><ol><li><p>CDH 설치</p><ul><li>Google에서 Cloudera CDH 검색</li><li>CDH &gt; quickstart Virtual Box 버전을 다운로드</li><li>압축 해제 후 Virtual Box에서 실행</li></ul></li><li><p>sqoop을 통한 avro 파일로 hdfs에 import 작업 진행</p><ul><li>hdfs의 적당한 곳에 디렉토리를 생성한다.<pre><code>$ hdfs dfs -mkdir /user/cloudera/test_avro_warehouse</code></pre></li><li>sqoop을 통해 MySQL 데이터를 HDFS로 import 한다. (파일 포맷은 avro. 압축 형태는 snappy)<pre><code>$ sqoop import-all-tables \-m 1 \--connect jdbc:mysql://quickstart:3306/retail_db \--username=retail_dba \--password=cloudera \--as-avrodatafile \--compression-codec=snappy \--warehouse-dir=/user/cloudera/test_avro_warehouse</code></pre></li></ul></li><li><p>이번에는 parquet 파일로 hdfs에 import 진행</p><ul><li>sqoop을 통해 MySQL 데이터를 HDFS로 import 한다. (파일 포맷은 parquet. 압축 형태는 snappy)<pre><code>$ sqoop import-all-tables \-m 1 \--connect jdbc:mysql://quickstart:3306/retail_db \--username=retail_dba \--password=cloudera \--as-parquetfile \--compression-codec=snappy \--warehouse-dir=/user/cloudera/test_avro_warehouse</code></pre></li></ul></li><li><p>spark-shell 실행</p><pre><code>$ spark-shell</code></pre></li></ol><h2 id="Avro"><a href="#Avro" class="headerlink" title="Avro"></a>Avro</h2><p>Spark에서 avro 파일을 읽고 쓰려면 avro 관련 라이브러리를 import 해야 된다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>databricks<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>avro<span class="token punctuation">.</span>_<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>그 다음 sqlContext.read.avro(“…”) 혹은 sqlContext().read.format(“com.databricsk.spark.avro”).load(“…”)을 통해 파일을 읽는다.</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>databricks<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>avro<span class="token punctuation">.</span>_<span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>avro<span class="token punctuation">(</span><span class="token string">"input dir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>databricks<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>avro<span class="token punctuation">.</span>_<span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"com.databricks.spark.avro"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"input dir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="연습1-hdfs-quickstart-user-cloudera-test-avro-warehouse-orders에서-order-status가-COMPLETE-면서-customer-id-별로-주문을-몇건씩-했는지-살펴본-뒤-결과는-parquet로-저장-해보자-parquet-압축은-gzip"><a href="#연습1-hdfs-quickstart-user-cloudera-test-avro-warehouse-orders에서-order-status가-COMPLETE-면서-customer-id-별로-주문을-몇건씩-했는지-살펴본-뒤-결과는-parquet로-저장-해보자-parquet-압축은-gzip" class="headerlink" title="연습1. hdfs://quickstart/user/cloudera/test_avro_warehouse/orders에서 order_status가 COMPLETE 면서 customer_id 별로 주문을 몇건씩 했는지 살펴본 뒤 결과는 parquet로 저장 해보자. (parquet 압축은 gzip)"></a>연습1. <code>hdfs://quickstart/user/cloudera/test_avro_warehouse/orders</code>에서 order_status가 <code>COMPLETE</code> 면서 customer_id 별로 주문을 몇건씩 했는지 살펴본 뒤 결과는 parquet로 저장 해보자. (parquet 압축은 gzip)</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>databricks<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>avro<span class="token punctuation">.</span>_<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>_<span class="token keyword">val</span> ordersDf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>avro<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_avro_warehouse/orders"</span><span class="token punctuation">)</span><span class="token keyword">val</span> countRdd <span class="token operator">=</span> ordersDf<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token string">"order_status = 'COMPLETE'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>row <span class="token keyword">=></span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>getAs<span class="token punctuation">[</span>Integer<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"order_customer_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>pair <span class="token keyword">=></span> Row<span class="token punctuation">(</span>pair<span class="token punctuation">.</span>_1<span class="token punctuation">,</span> pair<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">)</span>sqlContext<span class="token punctuation">.</span>setConf<span class="token punctuation">(</span><span class="token string">"spark.sql.parquet.compression.codec"</span><span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token keyword">val</span> schema <span class="token operator">=</span> StructType<span class="token punctuation">(</span>  StructField<span class="token punctuation">(</span><span class="token string">"customer_id"</span><span class="token punctuation">,</span> IntegerType<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">:</span>  StructField<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> IntegerType<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">:</span> Nil<span class="token punctuation">)</span><span class="token keyword">val</span> countDf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>countRdd<span class="token punctuation">,</span> schema<span class="token punctuation">)</span>countDf<span class="token punctuation">.</span>write<span class="token punctuation">.</span>parquet<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_parquet_warehouse/orders_count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="연습2-json-파일을-읽어서-HDFS에-avro-파일로-저장해보자-with-snappy-compression"><a href="#연습2-json-파일을-읽어서-HDFS에-avro-파일로-저장해보자-with-snappy-compression" class="headerlink" title="연습2. json 파일을 읽어서 HDFS에 avro 파일로 저장해보자. (with snappy compression)"></a>연습2. json 파일을 읽어서 HDFS에 avro 파일로 저장해보자. (with snappy compression)</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>databricks<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>avro<span class="token punctuation">.</span>_<span class="token keyword">val</span> personJsonDf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_json_warehouse"</span><span class="token punctuation">)</span>sqlContext<span class="token punctuation">.</span>setConf<span class="token punctuation">(</span><span class="token string">"spark.sql.avro.compression.codec"</span><span class="token punctuation">,</span> <span class="token string">"snappy"</span><span class="token punctuation">)</span>personJsonDf<span class="token punctuation">.</span>write<span class="token punctuation">.</span>avro<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_avro_warehouse/person"</span><span class="token punctuation">)</span><span class="token keyword">val</span> personAvroDf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>avro<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_avro_warehouse/person"</span><span class="token punctuation">)</span>personAvroDf<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>personAvroDf<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Parquet"><a href="#Parquet" class="headerlink" title="Parquet"></a>Parquet</h2><p>Parquet 파일을 다룰 때는 따로 import 해줘야할 라이브러리가 없다. 그냥 <code>sqlContext.read.parquet(&quot;inpurt file&quot;)</code>을 통해 parquet 파일을 읽으면 된다.</p><h5 id="연습3-hdfs-quickstart-user-cloudera-test-parquet-warehouse-orders을-읽어서-HDFS에-avro-파일로-저장해보자"><a href="#연습3-hdfs-quickstart-user-cloudera-test-parquet-warehouse-orders을-읽어서-HDFS에-avro-파일로-저장해보자" class="headerlink" title="연습3. hdfs://quickstart/user/cloudera/test_parquet_warehouse/orders을 읽어서 HDFS에 avro 파일로 저장해보자."></a>연습3. <code>hdfs://quickstart/user/cloudera/test_parquet_warehouse/orders</code>을 읽어서 HDFS에 avro 파일로 저장해보자.</h5><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>databricks<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>avro<span class="token punctuation">.</span>_<span class="token keyword">val</span> ordersCountDf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>parquet<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_parquet_warehouse/orders_count"</span><span class="token punctuation">)</span>sqlContext<span class="token punctuation">.</span>setConf<span class="token punctuation">(</span><span class="token string">"spark.sql.avro.compression.codec"</span><span class="token punctuation">,</span> <span class="token string">"snappy"</span><span class="token punctuation">)</span>ordersCountDf<span class="token punctuation">.</span>write<span class="token punctuation">.</span>avro<span class="token punctuation">(</span><span class="token string">"/user/cloudera/test_avro_warehouse/orders_count"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h2><ul><li><a href="https://www.cloudera.com/more/training/certification/cca-spark.html" target="_blank" rel="noopener">https://www.cloudera.com/more/training/certification/cca-spark.html</a></li><li><a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_avro_usage.html#concept_okv_lwy_pv" target="_blank" rel="noopener">https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_ig_avro_usage.html#concept_okv_lwy_pv</a></li><li><a href="https://www.cloudera.com/documentation/enterprise/latest/topics/spark_avro.html" target="_blank" rel="noopener">https://www.cloudera.com/documentation/enterprise/latest/topics/spark_avro.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> scala </tag>
            
            <tag> avro </tag>
            
            <tag> parquet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle Code Seoul</title>
      <link href="/2017/08/30/20170830-oracle-code-seoul/"/>
      <url>/2017/08/30/20170830-oracle-code-seoul/</url>
      
        <content type="html"><![CDATA[<h3 id="CQRS를-언제-왜-그리고-어떻게-사용할-것인가"><a href="#CQRS를-언제-왜-그리고-어떻게-사용할-것인가" class="headerlink" title="CQRS를 언제, 왜, 그리고 어떻게 사용할 것인가?"></a>CQRS를 언제, 왜, 그리고 어떻게 사용할 것인가?</h3><ul><li>CQRS Motivation: 기존 방식의 CRUD Application으로는 상태 정보를 관리하기 힘듬 (따로 구현해야 됨). 상태 정보를 저장할 수 있도록 구현이 필요. DB를 하나만 쓰는 것이 아닌 확장성을 고려한 개발 필요</li><li>Event Sourcing: DB에 현재 상태를 계속 저장. 이에 따라 상태 재생이 가능하게 되고 테스팅이 용이해진다. (Event는 atomic, immutable 해야 된다.)</li><li>Event Driven Architecture<ul><li>collaboration needed. 주문 시스템을 보면 주문 시 모든 시스템이 Lock이 걸린 뒤 주문을 처리하지 않는다. 각 시스템이 용이하게 운영될 수 있도록 이벤트를 통해 분산 시스템이 될 수 있어야 함. (comminication via events, published reliably)</li><li>split-up transations. 주문이 시작되면 여러 개의 트랜잭션으로 나눠지는데 이 때문에 일관성 확보가 가능해짐(?)</li></ul></li><li>Command Query Responsability Segregation<ul><li>읽기와 쓰기를 분리.</li><li>command는 이벤트 방식으로 전달.</li><li>읽기와 쓰기를 연결하는 것은 Event Store. Event Store에서의 상태 정보는 IMDG로도 관리할 수 있다. (ex: 커피 주문 시작은 CommandService에서 처리하면 이벤트 스토어로 이벤트를 날린 뒤 QueryService로 이벤트를 전달하여 주문 정보를 저장.)</li><li>분산 시스템이 아닌 단일 시스템에 CQRS를 적용하는 것은 오버헤드를 늘리는 꼴이 될 수도 있다.</li><li>CQRS에서는 읽기 DB와 쓰기 DB 등 서비스 별로 여러 개가 있을 수 있는데 동기화를 할 필요가 없다. (동기화는 좋은 생각이 아님) 오히려 이벤트를 통한 일관성 확보가 중요.</li></ul></li><li>CQRS를 통해 어떤 문제를 해결할 수 있을까? 일반적인 CRUD 방식보다 확장성이 좋다. 또한 읽기서비스에서 failover가 가능해진다.</li><li>Demo 시연<ul><li>Java EE &amp; Kafka를 활용한 커피 주문 시스템 구현</li><li><a href="https://github.com/sdaschner/scalable-coffee-shop" target="_blank" rel="noopener">https://github.com/sdaschner/scalable-coffee-shop</a></li><li>참고로 Oracld Event Hub에서 카프카를 사용할 수 있다.</li><li>더 자세한 데모 설명은 sebastian-daschner.com을 참조.</li></ul></li></ul><h3 id="Java-9와-Spring-5로-바라보는-Java의-미래"><a href="#Java-9와-Spring-5로-바라보는-Java의-미래" class="headerlink" title="Java 9와 Spring 5로 바라보는 Java의 미래"></a>Java 9와 Spring 5로 바라보는 Java의 미래</h3><ul><li>2017/09/21 java 9과 spring 5이 출시될 예정</li><li>Java는 위기를 맞이하면서 발전을 거듭해 왔다.</li><li>Java 위기 1<ul><li>서블릿, EJB, JSP, 크고 무거운 WAS, 다양한 웹 프레임워크 등 코드가 복잡해짐.</li><li>자바 객체지향의 기본으로 돌아가자는 움직임이 일어남.</li></ul></li><li>Java 위기 2<ul><li>언어 발전의 요구와 호환성</li><li>언어 발전과 구버전의 하위 호환성 둘 다 잡아야 되는 상황 발생. 다행히 Java는 언어 발전과 함께 하위 호환성도 지킴.</li></ul></li><li>Java 위기 3<ul><li>간결하고 관례를 통한 개발 움직임이 대두되기 시작. (특히 Ruby)</li><li>Java에서도 Annotation이 등장하면서 관례 적용이 시작됨</li></ul></li><li>Java 위기 4<ul><li>함수형 프로그래밍과 비동기 논블로킹 개발의 도전 대두</li><li>대용량 비동기 논블로킹 프로그래밍으로는 함수형 프로그래밍이 좋다고 보는 시각이 늘어남.</li></ul></li><li>Java 9과 Spring 5<ul><li>새로운 위기: 애노테이션, 메타프로그래밍, 관례의 범람</li><li>어노테이션은 코드 행위를 규정하는 것이 아닌 메타 정보를 담는다. 상속, 확장이 없음. 따라서 어노테이션은 테스트가 불가.</li><li>또한 메타 어노테이션에 대한 동작 규정이 없음 (ex: @Controller)</li><li>Relection과 런타임 바이트코드 생성의 문제는 테스트, 디버깅이 힘들고 성능이 저하됨</li><li>이 위기를 어떻게 극복할까? 함수형 스타일의 자바 웹 코드로 전환 (리액티브, 함수의 조함, 불변객체 사용)</li><li>Spring 5에서는 더 이상 서블릿을 안써도 된다. HandlerFunction, RouterFunction을 사용</li></ul></li><li>Java 9<ul><li>Java 9에는 Flow API와 Reactive Streams가 추가 된다고 한다.</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>앵귤러 첫걸음 저자 세미나 노트</title>
      <link href="/2017/07/22/20170722-angular-seminar-note/"/>
      <url>/2017/07/22/20170722-angular-seminar-note/</url>
      
        <content type="html"><![CDATA[<h3 id="커리큘럼"><a href="#커리큘럼" class="headerlink" title="커리큘럼"></a>커리큘럼</h3><ol><li>프론트엔드 개발환경의 변화와 앵귤러 맛보기</li><li>앵귤러 아키텍처</li><li>앵귤러 프레임워크 활용 예시</li><li>질의응답 및 마무리<br><br><br><br></li></ol><h3 id="시작하기-전에"><a href="#시작하기-전에" class="headerlink" title="시작하기 전에.."></a>시작하기 전에..</h3><ul><li>Angular Framework 전체 구조를 알아보고 Angular CLI, Spring-boot를 사용하여 데모 프로젝트 개발 과정 소개할 예정</li><li>Angular로 Server Side Rendering을 하기 위해 Angular preboot 프로젝트가 진행되고 있다고 함 (세미나에서는 다루지 않음)<ul><li>찾아보니깐 이걸 말하고 있었음 (<a href="https://github.com/angular/universal" target="_blank" rel="noopener">https://github.com/angular/universal</a>)</li></ul></li><li>저자는 프론트엔드 전문 개발자는 아니며 백엔드 개발자이지만 운영툴을 만들면서 Angular를 접하게 되었다고 함.<br><br><br><br></li></ul><h3 id="프론트엔드-개발환경의-변화와-앵귤러-맛보기"><a href="#프론트엔드-개발환경의-변화와-앵귤러-맛보기" class="headerlink" title="프론트엔드 개발환경의 변화와 앵귤러 맛보기"></a>프론트엔드 개발환경의 변화와 앵귤러 맛보기</h3><ul><li>Javascript, jQuery의 탄생 (Javascript는 Brendan Erich가 2주만에 만들었다고 함. 만들 당시 Prototype 프로그래밍과 스크립트에 심취해 있어 Javascript에 해당 철학들이 녹아들어졌다고 함)</li><li>브라우저 별 ES6 지원 현황: <a href="http://kangax.github.io/compat-table/es6" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6</a></li><li>JS가 2015년도에 왜 갑자기 관심을 받기 시작했을까? 저자 생각으로는 node.js 때문이 아닐까라고 생각..</li><li>Node.js 덕분에 Javascrit를 브라우저에서 벗어나 서버 웹어플 개발에도 사용할 수 있게 됨 -&gt; 그래서 JS가 발전하게 되었다고 생각함.<ul><li>라이브러리 모듈 현황(JS가 엄청 많다는걸 보여주고 있음): <a href="http://www.modulecounts.com/" target="_blank" rel="noopener">http://www.modulecounts.com/</a></li><li>JS 개발 스펙트럼: <a href="http://joaoperibeiro.com/the-front-end-developer-spectrum" target="_blank" rel="noopener">http://joaoperibeiro.com/the-front-end-developer-spectrum</a></li></ul></li></ul><h4 id="프론트엔드의-주요-3대-도구-분류"><a href="#프론트엔드의-주요-3대-도구-분류" class="headerlink" title="프론트엔드의 주요 3대 도구 분류"></a>프론트엔드의 주요 3대 도구 분류</h4><ul><li>패키지 관리 도구<ul><li>Bower</li><li>NPM</li><li>Yarn</li></ul></li><li>자동화 및 Task 도구<ul><li>Grunt</li><li>Gulp</li><li>Yeoman</li><li>NPM</li></ul></li><li>Compiler (Preprocessor)<ul><li>CoffeeScript</li><li>Babel</li><li>Typescript</li></ul></li></ul><h4 id="Module화를-향한-노력"><a href="#Module화를-향한-노력" class="headerlink" title="Module화를 향한 노력"></a>Module화를 향한 노력</h4><ul><li>CommonJS, AMD(RequireJS)</li><li>Webpack, Module in ES6<br><br><br><br></li></ul><h3 id="Angular-Framework-이해하기"><a href="#Angular-Framework-이해하기" class="headerlink" title="Angular Framework 이해하기"></a>Angular Framework 이해하기</h3><ul><li><strong>Angular is a framework.</strong></li><li>Angular는 <strong>Client application</strong>(Web, Mobile Web, Native Mobile, Native Desktop)을 좀 더 만들기 쉽게 하기 위해 나왔으며 <strong>Typescript</strong>로 개발할 수 있다.</li><li>앵귤러는 매주 마다 뭘 개발할건지 그리고 뭘 배포할 것인지 공유를 한다고 함 (올해 말에는 구글 내부에서 사용하는 빌드 툴도 개발할 계획이라고 함)</li><li>구글은 Angular를 이용한 웹 어플리케이션의 정석 결과물을 오픈 소스로 공개했다.<ul><li>angular.io가 앵귤러로 만든 앱의 가장 좋은 선례 (<a href="https://github.com/angular/angular/tree/master/aio" target="_blank" rel="noopener">https://github.com/angular/angular/tree/master/aio</a>)</li><li>구글의 의도: Angular로 개발할라믄 angular.io를 참고해서 만들어라.</li></ul></li><li>Angular는 왜 Typescript를 차용했을까? 이걸 참조할 것 (<a href="http://www.notforme.kr/archives/1809" target="_blank" rel="noopener">http://www.notforme.kr/archives/1809</a>)</li><li>ngrx (Angular Redux)</li></ul><h4 id="주요개념1-Component"><a href="#주요개념1-Component" class="headerlink" title="주요개념1. Component"></a>주요개념1. Component</h4><ul><li>모든 View는 Component로 통한다. (컴포넌트는 앵귤러에서 처음 나온 개념은 아니고 웹 컴포넌트라고 이미 있었음. ex: polymer)</li><li>컴포넌트 기반으로 웹어플 개발을 할 때는 컴포넌트들은 트리 구조로 관리 된다는 것을 기억하자.</li><li>컴포넌트 트리의 최상위 루트 컴포넌트는 관례적으로 AppComponent이다.</li></ul><h4 id="주요개념2-Template"><a href="#주요개념2-Template" class="headerlink" title="주요개념2. Template"></a>주요개념2. Template</h4><ul><li>Template? View를 구성하는 Angular-style의 마크업</li><li>Component와 짝꿍</li></ul><h4 id="주요개념3-Component-Lifecycle"><a href="#주요개념3-Component-Lifecycle" class="headerlink" title="주요개념3. Component Lifecycle"></a>주요개념3. Component Lifecycle</h4><ul><li>어플리케이션이 컴포넌트가 언제 생성되고 관리 되는지에 대한 라이프사이클을 알고 있어야 됨.</li><li>라이프사이클에 따른 컴포넌트 관리는 Angular Framework가 해줌</li><li>컴포넌트 라이프사이클에 대한 Hooking은 ngOnChanges, ngOnInit, ngDoCheck, …, ngOnDestory를 구현하여 할 수 있음.</li><li>Angular를 처음 써본사람들의 실수가 constructor와 ngOnInit의 차이를 잘 몰라서 constructor에 뭔가 초기화 코드를 작성하려고 한다는 점.<ul><li>constructor에서 구현하면 안되고 ngOnInit을 사용하자.</li></ul></li><li>ngDoCheck() -&gt; 컴포넌트를 쫙 스캔할 때 호출되는 메소드(? 뭔지 좀 더 알 필요가 있음)</li></ul><h4 id="주요개념4-Directive-amp-Pipe"><a href="#주요개념4-Directive-amp-Pipe" class="headerlink" title="주요개념4. Directive &amp; Pipe"></a>주요개념4. Directive &amp; Pipe</h4><ul><li>Directive와 Pipe는 Template에서 사용하는 개념</li><li>Directive: View를 동적으로 제어하기 위한 요소</li><li>Structural Directive<ul><li>NgIf, NgFor, NgSwitch, …</li></ul></li><li>Attribute Directives<ul><li>NgStyle, NgClass, …</li></ul></li><li>Angular에서는 document를 통해서 DOM 셀렉팅 및 변경하는 것을 죄악시 함. Angular가 그런 부분들을 다 하려고 노력.</li><li>Pipe: View에 노출하는 데이터를 변형할 때 사용<ul><li>ex: <code>\{\{ now | date:&#39;YYYY-MM-dd&#39; \}\}</code></li><li>ex: json beauty pipe</li></ul></li></ul><h4 id="주요개념5-Data-Binding"><a href="#주요개념5-Data-Binding" class="headerlink" title="주요개념5. Data Binding"></a>주요개념5. Data Binding</h4><ul><li>View와 컴포넌트를 따로 테스트 할 수 없을까? 테스트하려면 셀레니움을 통한 통합 테스트를 해야되는데 그거 말고 view만 테스트하고 싶을 때는? Data Binding을 통해 View와 컴포넌트의 종속성을 제거</li><li>Component(+Template)과 View 사이의 연결 고리</li><li>Angular에 제공하는 3가지 바인딩: Property(In), Event(Out), 2-way Binding</li><li>Attribute와 Property의 차이점<ul><li>Html DOM을 브라우저에 로딩하기 전에는 Attribute지만 로딩하여 메모리에 올라간 것이 Property</li><li>Angular는 여기서 Property를 변경해준다. (Attribute 변경이 아님)</li></ul></li></ul><h4 id="주요개념6-Service-amp-Dependency-Injection"><a href="#주요개념6-Service-amp-Dependency-Injection" class="headerlink" title="주요개념6. Service &amp; Dependency Injection"></a>주요개념6. Service &amp; Dependency Injection</h4><ul><li>단일책임원칙, 의존성 주입</li><li>Angular는 constructor의 파라미터로 의존성을 주입받는다.</li><li>컴포넌트마다 providers를 쓰는 것은 지양하긴 한다. 왜냐 DI 받으려고 하는 정보가 바뀔 때마다 모든 컴포넌트를 다 찾아가서 고쳐야되기 때문.<ul><li>AppModule의 providers에 정의하면 모든 컴포넌트의 constructor에서 DI 받을 수 있다.</li></ul></li></ul><h4 id="주요개념7-Module"><a href="#주요개념7-Module" class="headerlink" title="주요개념7. Module"></a>주요개념7. Module</h4><ul><li>여기서 말하는 모듈은 ES6에서 말하는 모듈은 아님</li><li>앞의 주요 개념에 대한 Angular 요소들을 하나로 담은 컨테이너라고 보면 됨.</li><li>ex: FormsModule, RouterModule, …</li><li>AppModule는 Angular로 개발할 때 딱 1번만 작성하면 됨.<br><br><br><br></li></ul><h3 id="Angular-CLI-amp-Spring-boot를-이용한-데모-시연"><a href="#Angular-CLI-amp-Spring-boot를-이용한-데모-시연" class="headerlink" title="Angular CLI &amp; Spring-boot를 이용한 데모 시연"></a>Angular CLI &amp; Spring-boot를 이용한 데모 시연</h3><ul><li>Google 내부에서는 Angular-cli를 쓰진 않는다고 함.</li><li>Google에서는 추후 Bazel(<a href="https://bazel.build/" target="_blank" rel="noopener">https://bazel.build/</a>) + CLouser 기반의 빌드 도구를 내놓을 수도 있다고 함.</li><li>저자 말로는 현재까지 Angular 개발 시 Angular-cli가 제일 좋다고 함. (저자의 의견일 뿐)</li><li>저자는 nginx의 gzip 옵션을 붙여서 쓴다고 함</li><li>데모는 Todo App을 라이브코딩 했는데 시간에 쫓겨서 Todo 등록, 조회만 구현</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스프링 퀵 스타트 Day 01</title>
      <link href="/2017/07/19/20170719-spring-basic-day01/"/>
      <url>/2017/07/19/20170719-spring-basic-day01/</url>
      
        <content type="html"><![CDATA[<h2 id="순서"><a href="#순서" class="headerlink" title="순서"></a>순서</h2><ul><li>개발 환경 셋팅</li><li>Spring Overview</li><li>IoC, Dependency Injection</li><li>실습 Day 01<br><br><br><br></li></ul><h2 id="개발-환경-셋팅"><a href="#개발-환경-셋팅" class="headerlink" title="개발 환경 셋팅"></a>개발 환경 셋팅</h2><ol><li>JDK 1.8 설치</li><li>H2 Database 설치</li><li>Gradle Build Tool 설치</li><li>IntelliJ IDEA 2017 설치</li><li>Spring Initializer를 통한 실습 프로젝트 생성<ul><li>XML 설정 프로젝트 생성 실습</li><li>Spring-boot 프로젝트 생성 실습<br><br><br><br></li></ul></li></ol><h2 id="Spring-Overview"><a href="#Spring-Overview" class="headerlink" title="Spring Overview"></a>Spring Overview</h2><h3 id="왜-스프링인가"><a href="#왜-스프링인가" class="headerlink" title="왜 스프링인가?"></a>왜 스프링인가?</h3><blockquote><p>스프링을 써서 개발하면 <del><span style="color:#A09F91">웹</span></del> 어플리케이션 개발을 빠르고 효율적으로 할 수 있도록</p><ul><li>어플리케이션의 바탕이 되는 틀</li><li>공통 프로그래밍 모델과 기술 API</li></ul><p>등을 제공해준다.</p></blockquote><ul><li>어플리케이션의 기본 틀: 스프링 컨테이너</li><li>공통 프로그래밍 모델: IoC/DI, 서비스 추상화, AOP</li><li>기술 API: Spring MVC, Sprign JDBC</li></ul><p>한 마디로 스프링을 써서 웹 어플리케이션을 개발하면 기본틀 위에서 개발하기 때문에 효율적인 코드 작성이 가능하다는 소리<br><br></p><h3 id="스프링이-없을-땐-웹-어플리케이션을-어떻게-개발하고-운영했을까"><a href="#스프링이-없을-땐-웹-어플리케이션을-어떻게-개발하고-운영했을까" class="headerlink" title="스프링이 없을 땐 웹 어플리케이션을 어떻게 개발하고 운영했을까?"></a>스프링이 없을 땐 웹 어플리케이션을 어떻게 개발하고 운영했을까?</h3><p>Java 환경에서 스프링이 없을 때는 아래와 같이 웹 어플리케이션 개발은 Java Servlet을 통해 개발을 했었다.</p><ol><li>Java Servlet Class 작성 (javax.servlet.http.HttpServlet을 상속받아 HTTP_METHOD별 처리 메소드를 만듬)</li><li>web.xml 파일에 URI와 앞에서 만든 Servlet 클래스를 정의</li><li>war로 패키징</li><li>Tomcat의 webapp 폴더에 배포</li><li>Tomcat 실행</li></ol><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;         xmlns:xsi=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_1.xsd&quot;         version=&quot;3.1&quot;&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;helloServlet&lt;&#x2F;servlet-name&gt;        &lt;servlet-class&gt;com.skplanet.servlet.exercise.HelloServlet&lt;&#x2F;servlet-class&gt;    &lt;&#x2F;servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;helloServlet&lt;&#x2F;servlet-name&gt;        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;    &lt;&#x2F;servlet-mapping&gt;&lt;&#x2F;web-app&gt;</code></pre><pre><code>package com.skplanet.servlet.exercise;import javax.servlet.ServletException;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class HelloServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        ServletOutputStream outputStream = resp.getOutputStream();        outputStream.write(&quot;Hello, world!&quot;.getBytes());    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        &#x2F;&#x2F; do something    }    @Override    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        &#x2F;&#x2F; do something    }    @Override    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        &#x2F;&#x2F; do something    }}</code></pre><p>TV 제어 API를 개발한다고 치자.<br><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;         xmlns:xsi=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_1.xsd&quot;         version=&quot;3.1&quot;&gt;    ...    &lt;servlet&gt;        &lt;servlet-name&gt;samsungTvServlet&lt;&#x2F;servlet-name&gt;        &lt;servlet-class&gt;com.skplanet.servlet.exercise.SamsungTvServlet&lt;&#x2F;servlet-class&gt;    &lt;&#x2F;servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;samsungTvServlet&lt;&#x2F;servlet-name&gt;        &lt;url-pattern&gt;&#x2F;samsung-tv&lt;&#x2F;url-pattern&gt;    &lt;&#x2F;servlet-mapping&gt;&lt;&#x2F;web-app&gt;</code></pre></p><pre><code>public interface Tv {  public void powerOn();  public void powerOff();  public void volumeUp();  public void volumeDown();}class SamsungTv implements Tv {  public void powerOn() {    System.out.println(&quot;SamsungTV -- 전원켠다.&quot;);  }  public void powerOff() {    System.out.println(&quot;SamsungTV -- 전원끈다.&quot;);  }  public void volumeUp() {    System.out.println(&quot;SamsungTV -- 소리올린다.&quot;);  }  public void volumeDown() {    System.out.println(&quot;SamsungTV -- 소리내린다.&quot;);  }}class LgTv implements Tv {  public void powerOn() {    System.out.println(&quot;LgTV -- 전원켠다.&quot;);  }  public void powerOff() {    System.out.println(&quot;LgTV -- 전원끈다.&quot;);  }  public void volumeUp() {    System.out.println(&quot;LgTV -- 소리올린다.&quot;);  }  public void volumeDown() {    System.out.println(&quot;LgTV -- 소리내린다.&quot;);  }}</code></pre><pre><code>public class SamsungTvServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {      SamsungTv tv = new SamsungTv();      String action = req.getParameter(&quot;action&quot;);      switch(action) {        case &quot;POWER_ON&quot;:          tv.powerOn();          break;        case &quot;POWER_OFF&quot;:          tv.powerOff();          break;        case &quot;VOLUME_UP&quot;:          tv.volumeUp();          break;        case &quot;VOLUME_DOWN&quot;:          tv.volumeDown();          break;      }    }}</code></pre><pre><code>public class LgTvServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {      LgTv tv = new LgTv();      String action = req.getParameter(&quot;action&quot;);      switch(action) {        case &quot;POWER_ON&quot;:          tv.powerOn();          break;        case &quot;POWER_OFF&quot;:          tv.powerOff();          break;        case &quot;VOLUME_UP&quot;:          tv.volumeUp();          break;        case &quot;VOLUME_DOWN&quot;:          tv.volumeDown();          break;      }    }}</code></pre><p>결합도를 낮추기 위해 디자인패턴을 적용해보자.<br>TV가 S사, L사는 쓸 수 없고 다른 회사의 제품으로 교체해야 된다고 했을 때 각 서블릿마다 들어가서 고쳐야 되는 것인가?<br><br></p><p>요구사항에 좀 더 유연하게 대응하기 위해서 Factory Method 패턴을 적용하자.</p><pre><code>public class TvFactory {  public Tv getTv(String tvName) {    if (tvName.equals(&quot;samsung&quot;)) {      return new SamsungTv();    } else if (tName.equals(&quot;lg&quot;)) {      return new LgTv();    }    return null;  }}</code></pre><pre><code>public class SamsungTvServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {      TvFactory tvFactory = new TvFactory();      Tv tv = tvFactory.getTv(&quot;samsung&quot;);      String action = req.getParameter(&quot;action&quot;);      switch(action) {        case &quot;POWER_ON&quot;:          tv.powerOn();          break;        case &quot;POWER_OFF&quot;:          tv.powerOff();          break;        case &quot;VOLUME_UP&quot;:          tv.volumeUp();          break;        case &quot;VOLUME_DOWN&quot;:          tv.volumeDown();          break;      }    }}</code></pre><pre><code>public class LgTvServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {      TvFactory tvFactory = new TvFactory();      Tv tv = tvFactory.getTv(&quot;lg&quot;);      String action = req.getParameter(&quot;action&quot;);      switch(action) {        case &quot;POWER_ON&quot;:          tv.powerOn();          break;        case &quot;POWER_OFF&quot;:          tv.powerOff();          break;        case &quot;VOLUME_UP&quot;:          tv.volumeUp();          break;        case &quot;VOLUME_DOWN&quot;:          tv.volumeDown();          break;      }    }}</code></pre><p><br><br><br></p><h2 id="IoC-Dependency-Injection"><a href="#IoC-Dependency-Injection" class="headerlink" title="IoC, Dependency Injection"></a>IoC, Dependency Injection</h2><h3 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h3><p>Tv 인스턴스를 클라이언트(서블릿)에서 한게 아니라 Factory 클래스에게 요청하면 그 때서야 인스턴스를 반환하는 방식으로 변경이 되었는데,<br>이걸 제어의 역전(Inversion of Control, IoC)라고 부른다.<br><br></p><p>스프링의 핵심 기술 중 하나가 IoC를 전문적으로 해주는 IoC 컨테이너를 제공한다는 것이다.</p><pre><code>public class SamsungTvServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {      ApplicationContext factory = new GenericXmlApplicationContext(&quot;applicationContext.xml&quot;);      Tv tv = (Tv) factory.getBean(&quot;samsung&quot;);      String action = req.getParameter(&quot;action&quot;);      switch(action) {        case &quot;POWER_ON&quot;:          tv.powerOn();          break;        case &quot;POWER_OFF&quot;:          tv.powerOff();          break;        case &quot;VOLUME_UP&quot;:          tv.volumeUp();          break;        case &quot;VOLUME_DOWN&quot;:          tv.volumeDown();          break;      }    }}</code></pre><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;samsungTv&quot; class=&quot;com.skplanet.spring.plalab.SamsungTv&quot;&gt;&lt;&#x2F;bean&gt;    &lt;bean id=&quot;lgTv&quot; class=&quot;com.skplanet.spring.plalab.LgTv&quot;&gt;&lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;</code></pre><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>이번엔 스피커를 추가하여 Tv 볼륨을 제어해보자.</p><pre><code>public class SonySpeaker implements Speaker {  public SonySpeaker() {    System.out.println(&quot;===&gt; Sony Speaker 객체 생성&quot;);  }  public void volumeUp() {    System.out.println(&quot;Sony Speaker -- 소리 올린다.&quot;);  }  public void volumeDown() {    System.out.println(&quot;Sony Speaker -- 소리 내린다.&quot;);  }}</code></pre><pre><code>public class SamsungTv implements Tv {  private Speaker speaker;  public SamsungTv(Speaker speaker) {    this.speaker = speaker;  }  public void powerOn() {    System.out.println(&quot;SamsungTV -- 전원켠다.&quot;);  }  public void powerOff() {    System.out.println(&quot;SamsungTV -- 전원끈다.&quot;);  }  public void volumeUp() {    this.speaker.volumeUp();  }  public void volumeDown() {    this.speaker.volumeDown();  }}</code></pre><p>예전 TvFactory를 사용한다면 Factory 클래스에서 인스턴스화 할 때 생성자로 넘겨(주입해)준다.</p><pre><code>public class TvFactory {  public Tv getTv(String tvName) {    if (tvName.equals(&quot;samsung&quot;)) {      Speaker speaker = new SonySpeaker();      return new SamsungTv(speaker);    } else if (tName.equals(&quot;lg&quot;)) {      Speaker speaker = new SonySpeaker();      return new LgTv(speaker);    }    return null;  }}</code></pre><p>이와 같이 Tv에 의존관계(Dependency)가 있는 Speaker를 생성자로 주입(Injection)해 줬다고 해서 이를 Dependency Injection이라고 부른다.<br><br></p><p>이걸 스프링으로는 어떻게 할까?<br>XML로 직접 연결하거나, 어노테이션(@Autowired, @Resource)를 사용하여 알아서 주입되게 한다.</p><ol><li><p>XML을 통해 직접 Dependency Injection 정의하기</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xmlns:context=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;       xsi:schemaLocation=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;    &lt;bean id=&quot;samsungTv&quot; class=&quot;com.skplanet.spring.plalab.SamsungTv&quot;&gt;        &lt;property name=&quot;speaker&quot; ref=&quot;sonySpeaker&quot;&gt;&lt;&#x2F;property&gt;    &lt;&#x2F;bean&gt;    &lt;bean id=&quot;sonySpeaker&quot; class=&quot;com.skplanet.spring.plalab.SonySpeaker&quot;&gt;    &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;</code></pre></li><li><p>자동으로 Dependency Injection 하기</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xmlns:context=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;       xsi:schemaLocation=&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;    &lt;context:component-scan base-package=&quot;com.skplanet.spring.plalab&quot;&#x2F;&gt;&lt;&#x2F;beans&gt;</code></pre></li></ol><pre><code>@Componentpublic class SonySpeaker implements Speaker {  public SonySpeaker() {    System.out.println(&quot;===&gt; Sony Speaker 객체 생성&quot;);  }  public void volumeUp() {    System.out.println(&quot;Sony Speaker -- 소리 올린다.&quot;);  }  public void volumeDown() {    System.out.println(&quot;Sony Speaker -- 소리 내린다.&quot;);  }}</code></pre><pre><code>@Componentpublic class SamsungTv implements Tv {  @Autowired  private Speaker speaker;  public void powerOn() {    System.out.println(&quot;SamsungTV -- 전원켠다.&quot;);  }  public void powerOff() {    System.out.println(&quot;SamsungTV -- 전원끈다.&quot;);  }  public void volumeUp() {    this.speaker.volumeUp();  }  public void volumeDown() {    this.speaker.volumeDown();  }}</code></pre><h2 id="실습-Day-01"><a href="#실습-Day-01" class="headerlink" title="실습 Day 01"></a>실습 Day 01</h2><p>Page 109 ~ 139</p>]]></content>
      
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>웹페이지 실습 강의 노트</title>
      <link href="/2017/06/16/20170616-web-page-lecture/"/>
      <url>/2017/06/16/20170616-web-page-lecture/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-마크업하기"><a href="#HTML-마크업하기" class="headerlink" title="HTML 마크업하기"></a>HTML 마크업하기</h1><h2 id="시작하기-전에"><a href="#시작하기-전에" class="headerlink" title="시작하기 전에.."></a>시작하기 전에..</h2><ul><li>html 문서 맨 첫줄에는 DTD가 위치</li><li>DTD는 Document Type Definition을 의미</li><li><code>&lt;!DOCTYPE html&gt;</code>를 입력하면 hmtl5로 인식함</li><li>DTD는 대소문자를 구분하지 않는데 DTDTYPE만 대문자로 쓰고 나머지는 소문자 (대문자로 써도 되는데 관례상 소문자)</li><li>html5에서는 header, footer, aside 같은 division 태그들이 더 추가됨</li><li>웹브라우저는 DTD가 없으면 예전 문서라고 인식함 -&gt; 브라우저가 렌더링할 때 예전 문서 렌더링 방식으로 진행 (쿽스 모드로 렌더링) -&gt; 브라우저마다 다르게 렌더링하는 이슈가 발생함</li><li>TIP: zen-coding, emmet을 사용하면 html 태그 작성이 편해짐</li></ul><h2 id="HTML-Elements"><a href="#HTML-Elements" class="headerlink" title="HTML Elements"></a>HTML Elements</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><ul><li>html은 반드시 필요하며, html 엘리먼트는 html 파일 당 하나만 등장해야됨</li><li>엘리먼트에는 속성을 가질 수 있음</li><li>장애인차별금지법을 위해서 웹접근성 규칙을 지켜야됨 -&gt; html에는 lang 속성을 선언하자. -&gt; 이걸 선언하면 뭐가 좋을까? 구글에서 한국어 웹페이지만 검색할 때 참조할 수도 있을 것 같다. 웹페이지 화면 낭독기가 이 속성을 참조해서 낭독을 함 (lang=”ko”를 하면 한국어로 낭독)</li></ul><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul><li>head와 body 앨리먼트도 페이지 당 각각 하나씩만 위치할 수 있음</li><li>body 안쪽에 있는 코드만 뷰포트에 보이게 되며, head 앨리먼트 아래에는 meta, title이 위치할 수 있음</li><li>meta 태그 첫 번쨰는 인코딩이 들어감<ul><li><code>&lt;meta charset=&quot;euc-kr&quot;&gt;</code> 이렇게 하면 한국어만 다룸 -&gt; 이렇게 작성하면 최신 크롬에서는 깨짐. 크롬은 utf-8로 강제로 인코딩함</li><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 이렇게 하면 전세계 모든 문자를 표현할 수 있음</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,minimum-scale=1,user-scalable=no&quot;&gt;</code> 모바일 브라우저에서 줌인, 줌아웃을 못하게 함. 이걸 셋팅 안하면 데스크탑 페이지 같은 뷰포트보다 큰 페이지는 강제로 줌아웃을 함. -&gt; 모바일에서 보기에 불편함 -&gt; 해당 메타 태그를 추가하여 실제 크기로 뷰포트에 표시</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,width=device-width&quot;&gt;</code> 이 태그도 위와 같은 의미</li><li>한 가지 염두해둘 것이 있는데, iOS에서는 더 이상 위 메타태그를 지원하지 않음 (써도 소용없음, 그러므로 iOS는 줌인/줌아웃이 되며 막을 방법이 없음). 단 안드로이드는 그대로 위 태그가 유효하다고 함.</li><li>meta 태그는 종료 태그가 없음</li></ul></li><li>title 태그에는 문서의 제목이 위치함<ul><li>검색엔진이 여기에 적힌 키워드를 가지고 검색 노출을 함</li><li>여길 잘 작성해야 웹 크롤링에 유리.</li><li><code>&lt;title&gt;공지사항&lt;/title&gt;</code> 모든 페이지가 이렇게 작성되어 있으면 검색엔진 수집에 이점이 없겠지?</li><li><code>&lt;title&gt;공지사항 - 게시물 제목&lt;/title&gt;</code> 이렇게 유니크하고 구체적으로 작성하자</li><li>웹페이지 낭독기가 제일 먼저 읽는게 이 title 태그 -&gt; 웹접근성을 위해서라도 꼭 작성해야 하며, 유니크하고 구체적으로 작성해야됨</li></ul></li><li>meta 태그, title 태그 위치는 상관없으나 관례상 meta 태그를 먼저 쓴다</li><li>title 다음 쓰는게 link 태그<ul><li><code>&lt;link href=&quot;default.css&quot; rel=&quot;stylesheet&quot;&gt;</code> 이 방식을 external stylesheet라고 부름. 일반적으로 가장 많이 쓰이며, 다른 페이지에서도 쓸 때 사용</li><li><code>&lt;style&gt;&lt;/style&gt;</code> 이렇게 쓰는게 embedded stylesheet라고 부름. 적용 범위가 이 페이지에 한정될 때 이 방식을 사용.</li><li>태그 안에 style 속성을 써서 CSS를 선언하는 방식을 inline style이라고 부름. 이 방식은 해당 엘리먼트에만 적용이 됨. (재사용이 불가)</li><li>link 태그를 여러개 하면 http 요청이 많아져서 성능이 떨어짐. 최대 2개만 유지하자. css 빌드 기능을 써도 좋음.</li><li>user agent stylesheet는 브라우저에 설정된 기본적인 스타일시트</li><li>아래 코드는 IE9 이하의 브라우저에서 html5 태그를 쓸 수 있게하는 polyfill js임<pre><code>&lt;!--[if lt IE 9]&gt;&lt;script src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;html5shiv&#x2F;3.7.3&#x2F;html5shiv.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;respond.js&#x2F;1.4.2&#x2F;respond.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;![endif]--&gt;</code></pre></li></ul></li><li>그 다음 script 태그가 위치하는데 이 태그는 head 혹은 body 엘리먼트 안에 위치해야 한다. (다른데 위치하면 안됨)<ul><li>pollfill.js를 입력하면 IE7, IE8에서 section 태그를 사용할 수 있음. 이 js는 head 안에 선언해야 됨.</li></ul></li></ul><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><ul><li>div, span는 뭔가 표현할 때 블록 혹은 마크업하는데 딱히 떠오르는게 없을 때 사용.</li><li><code>&lt;a href=&quot;#main&quot; class=&quot;skip&quot;&gt;메뉴 건너뛰기&lt;/a&gt;</code> 이 태그가 있으면 웹페이지 낭독기에서 tab으로 선택 시 메뉴들을 건너뛰고 본문으로 갈 수 있도록 한다. (웹접근성 때문)</li><li>header와 footer를 사용하여 사이트 상단 하단을 표현</li></ul><h3 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h3><ul><li>h1으로 사이트 로고를 표현 (h는 heading을 의미, heading contents라고 부름)</li><li>웹접근성 낭독기로 heading만 먼저 Sorting한 뒤 그걸 먼저 듣고 중요한지 판단하기 때문에 중요한 태그라 생각</li><li>block 레벨 엘리먼트는 flow contents, inline 레벨 엘리먼트는 phrasing contents라고 부르기도 함</li><li><code>&lt;span&gt;&lt;h1&gt;타이틀&lt;/h1&gt;&lt;/span&gt;</code> span과 같은 프레이징 컨텐츠가 플로우 컨텐츠를 감쌀 수 없다.</li><li>firefow &gt; html validator를 쓰면 현재 페이지의 html 문법 오류를 체크할 수 있음</li><li>html 문법을 좀 더 자세히 알고 싶으면 <code>https://www.w3.org/TR/html5/Overview.html#contents</code>를 참조하여 앨리먼트를 찾아서 쓰자<ul><li>ex) p element 안쪽에 div를 쓸 수 있을지 검색해 볼 수 있다. (Content Model인 자식으로 올 수 있는 모델을 참조) -&gt; p 태그 안 쪽에는 div를 쓸 수 없다.</li></ul></li></ul><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><ul><li>button 앨리먼트의 타입 속성이 button은 별 다른 기능을 하지 않는 버튼이 된다.</li><li>type을 생략하면 기본적으로 submit으로 결정</li></ul><h3 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h3><ul><li>사이트의 네비게이션을 담당</li><li>그 사이트의 주된 탐색 섹션만 nav로 마크업 하자. 아무거나 다 링크들을 nav로 선언하면 안된다.</li><li>nav는 sectioning contents라고 부름</li><li>sectioning contents는 section, article, nav, aside가 있다.</li><li>sectioning contents를 쓸 경우에는 h 태그를 쓸 것을 강력히 권장한다.</li></ul><h3 id="ul-unordered-element"><a href="#ul-unordered-element" class="headerlink" title="ul (unordered element)"></a>ul (unordered element)</h3><ul><li>순서가 없는 반복되는 목록을 표현할 때 ul 앨리먼트를 사용</li><li>반대는 ol (ordered element)</li></ul><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><ul><li>input 앨리먼트의 타입은 레퍼런스를 참조하자.</li><li>required 속성은 value를 생략할 수 있다. (disabled, readonly도 마찬가지)</li><li>disabled와 readonly의 차이: readonly는 값을 수정할 수 없지만 form을 통해 값 전송이 가능. 반면 disabled는 서버측으로 전송이 안됨</li><li>pattern이라는 속성도 있음. 여기에는 정규식을 넣을 수 있다.<ul><li>ex) <code>pattern=&quot;[0-9]&quot;</code> 숫자만 입력 가능</li></ul></li></ul><h3 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h3><ul><li>horizontal rule</li><li>내용과 내용 사이를 구분하고 싶을 때 사용</li></ul><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><ul><li>해당 페이지의 중요한 컨텐츠를 여기에 위치시키자. (ex: 뉴스기사 본분, 블로그 컨텐츠 본문)</li><li>화면을 수직으로 분할하고 싶을 때는 div로 한 번 wrapping해서 쓰자<pre><code>&lt;div&gt;  &lt;main&gt;...&lt;&#x2F;main&gt;  &lt;aside&gt;...&lt;&#x2F;aside&gt;&lt;&#x2F;div&gt;</code></pre></li></ul><h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><ul><li>하나의 주제를 가진 블록</li><li>article과 비슷</li><li>article는 따로 떼서 다른 곳에 배포했을 때 그 내용이 이해가 되면 article, 아니면 section</li></ul><h3 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h3><ul><li>주된 컨텐츠를 다 작성하고 나서 없어도 되는 컨텐츠를 여기에 표현</li><li>배너, 광고, 쇼핑몰에서 오른쪽에 따라 다니는 내가 본 컨텐츠 등을 여기에 표현</li></ul><h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><ul><li>저작권, 이 사이트의 주소를 여기에 표현</li><li>body 맨 마지막에는 자바스크립트 로딩 부분을 표현</li></ul><h3 id="그-밖에"><a href="#그-밖에" class="headerlink" title="그 밖에.."></a>그 밖에..</h3><ul><li><a href="https://docs.google.com/presentation/d/1EDoo-_013DT0-oGbi6ubczmQYnJg-IwMuthU1EcPAmk/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1EDoo-_013DT0-oGbi6ubczmQYnJg-IwMuthU1EcPAmk/edit#slide=id.p</a></li><li><a href="https://docs.google.com/presentation/d/1Z_L7Jm1bTd9MmiVHWnX90HwyyP9xaDQ1g0w4_yM5sQo/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1Z_L7Jm1bTd9MmiVHWnX90HwyyP9xaDQ1g0w4_yM5sQo/edit#slide=id.p</a></li></ul><h1 id="CSS-코딩해보기"><a href="#CSS-코딩해보기" class="headerlink" title="CSS 코딩해보기"></a>CSS 코딩해보기</h1><ul><li>class 속성으로 선언된 클래스에 styling 해보기</li><li>*은 공용 셀렉터로 html, body 등 모든 것을 다 선택한다.</li><li>width 값에 border값과 padding값이 포함된 값으로 셋팅할 수는 없을까? <ul><li><code>box-sizing: content-box;</code> 때문에 저렇게 동작하는 것인데 이 값을 border-box로 변경하면 원하는 대로 동작한다. <code>box-sizing: border-box;</code></li><li>모든 DOM을 border-box로 하고 싶을 때는?<pre><code>*,:before,:after {  box-sizing: border-box;} &#x2F;* 셀럭터에서 쉼표(,)는 and를 의미한다. *&#x2F;</code></pre></li></ul></li><li><p><code>body:before {}</code> 여기서 :before는 가상 선택자라고 하며, 실제로 DOM이 존재하지 않지만 브라우저가 DOM을 생성하게 해주는 것을 칭한다. :after도 있음</p><ul><li>before와 after는 화면 낭독기가 읽어주지 않기 때문에 컨텐츠를 담으면 웹접근성 위반.</li><li>보통 before와 after에는 아이콘을 위치시킨다.</li><li>body 앞에 가상 DOM을 생성해서 그 안에 hello world라고 출력하고 싶을때는?<pre><code>body:before {  content: &#39;hello world&#39;;}</code></pre></li></ul></li><li><p>모바일용, 태블릿용, 데스크탑용 페이지 CSS를 어떻게 작성할까?</p><ul><li>일단 하기 전에 global 스타일을 먼저 선언하고 local 스타일은 나중에 선언한다. (local 스타일이 덮어씌워지기 때문)</li><li>또, aside나 main 등 안변하는 앨리먼트의 스타일을 먼저 작성한다.</li><li>디바이스별 CSS는 media query를 사용한다. (<a href="http://naradesign.net/wp/2012/05/30/1823/" target="_blank" rel="noopener">http://naradesign.net/wp/2012/05/30/1823/</a> 여기를 참조)</li><li><code>@media screen and (조건)</code> 이렇게 쓰면 디바이스에서만 작동하는 미디어쿼리 이다. 화면 낭독기에서는 작동 안함</li><li><code>@media print and (조건)</code> 프린트할 때 적용되는 스타일시트</li><li><code>@media all and (조건)</code> all은 생략 가능</li></ul></li></ul><h2 id="CSS-속성-display-margin-position-float"><a href="#CSS-속성-display-margin-position-float" class="headerlink" title="CSS 속성 - display, margin, position, float"></a>CSS 속성 - display, margin, position, float</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul><li>block과 inline의 차이점은?</li><li>block는 한 줄을 다 차지</li><li>inline은 표현된 영역만 차지</li><li>none은 화면에 표시 안됨 (javascript로 컨트롤 가능, 화면 낭독기는 읽지 않고 pass)</li><li>inline-block은? inline과 비슷하지만, block 처럼 쓸 수도 있음. 이것의 장점은 height값이 적용이 됨 (inline으로 할 때는 height 값이 적용이 안됨)<ul><li>왜? inline으로 선언했을 경우에는 브라우저가 텍스트로 인식하기 때문. 그래서 텍스트의 영역에는 height, width 값 설정이 안됨</li><li>이게 언제 필요할까? 네비게이션 메뉴를 행으로 위치할 때 수직 구분을 inline-block을 줘서 width 값을 준다.</li><li>inline은 특징이 대략 4px 정도의 공백이 생김 (자간을 의미, 그래서 inline을 이용해서 행 구분을 하진 않음) (공백은 font-size에 따라 달라짐)<ul><li>자간을 없애려면? inline을 랩핑한 앨리먼트를 선언해서 font-size: 0으로 적용</li></ul></li><li>행 배치의 현존하는 가장 흔한 방법은 float를 사용 (ex: <code>float: left</code>)<ul><li>이를 대체하기 위해 나온 것이 flex (Readme에 기고가 되어 있으며 궁금하면 읽어보자)<ul><li>flex-container, flex-item</li></ul></li></ul></li></ul></li></ul><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><ul><li>박스 바깥 쪽을 나타내는 영역</li><li>block에 width를 주면 나머지 영역은 auto margin이 적용된다.</li><li>auto margin 언제 필요할까? 중앙 정렬할 때 필요 (ex: <code>margin: 0 auto;</code>)</li><li><p>아래와 같은 경우 b 앨리먼트는 margin이 어떻게 동작할까?</p><pre><code>.a {  background: red;  color: #FFF;  margin-bottom: 100px;}.b {  background: blue;  color: #FFF;  margin-top: 100px;}</code></pre><ul><li>a와 b의 마진이 겹친다. 이를 <code>수직 마진 중첩</code>이라고 부른다.</li></ul></li><li><p>그럼 b의 margin-top을 200px로 하면 a와 b 사이는 300px이 될까?</p><pre><code>.a {  background: red;  color: #FFF;  margin-bottom: 100px;}.b {  background: blue;  color: #FFF;  margin-top: 200px;}</code></pre><ul><li>절대값이 작은 margin 값은 무시된다.</li></ul></li><li><p>그럼 b의 margin-top을 -100px로 하면 어떻게 될까?</p><pre><code>.a {  background: red;  color: #FFF;  margin-bottom: 100px;}.b {  background: blue;  color: #FFF;  margin-top: -100px;}</code></pre><ul><li>이 때는 margin 값이 사라지게 된다.</li></ul></li><li><p>그럼 a의 margin을 지우면 어떻게 될까?</p><pre><code>.a {  background: red;  color: #FFF;}.b {  background: blue;  color: #FFF;  margin-top: -100px;}</code></pre><ul><li>이 때는 b가 a 위에 겹치게 된다.</li></ul></li><li><p>아래와 같은 엘리먼트가 있을 때 margin은 어떻게 동작하게 될까?</p><pre><code>&lt;div class=&quot;c&quot;&gt;  &lt;div class=&quot;a&quot;&gt;.a&lt;&#x2F;div&gt;  &lt;div class=&quot;b&quot;&gt;.b&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;.a {  background: red;  color: #FFF;  margin-top: 100px;}.b {  background: blue;  color: #FFF;}.c {  background: silver;  color: #FFF;}</code></pre><ul><li>c의 margin-top은 0 이므로 무시가 되고 a의 margin-top 값이 적용이 된다.</li><li>c 박스 안에서 margin을 주고 싶을 떄는? <code>overflow: hidden</code> or <code>padding: 1px</code> or <code>border: 1px solid #000</code> 셋 중에 하나만 줘도 원하는대로 동작한다.</li></ul></li><li><p>inline 요소는 수직 마진이 적용되지 않는다. 단 수평 마진은 적용된다.</p><pre><code>.a,.b {  width: 100px;  height: 100px;  display: inline;  margin: 100px;}.a {  background: red;  color: #FFF;}.b {  background: blue;  color: #FFF;}.c {  background: silver;  color: #FFF;}</code></pre></li></ul><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul><li>위치를 제어하는 속성</li><li>absolute: 자기 위치를 결정할 때 보통 형제 노드들의 위치에 따라 결정이 되는데, 이 속성은 위치를 독립적으로 설정 가능 (top, bottom, left, right 사용)<ul><li>absolute로 하면 auto margin이 사라진다.</li><li>absolute를 주면 z-index가 활성화 된다.</li></ul></li><li>fixed: 스크롤 해도 특정 위치에 계속 띄우고 싶을 때 사용<ul><li>dim 레이어 띄울 때 쓰는데 이 때 스크롤이 먹힌다. 스크롤이 안먹히게 하려면 body에 <code>overflow: hidden</code>을 준다.</li><li>화면 중간에 띄우고 싶을 때는 아래와 같이 주면 된다.</li></ul></li></ul><pre><code>position: fixed;right: 0;bottom: 0;top: 0;left: 0;opacity: .5;margin: auto;</code></pre><ul><li>relative: 이 속성을 줘도 z-index가 활성화 된다.</li></ul><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ul><li>float를 주면 position: absolute를 준 것과 같이 비슷한 효과를 볼 수 있다. (z-index가 활성화 되고 width, height가 수축된다.)</li><li>width, height 수축되는 것을 막으려면 <code>overflow: hidden</code>을 주면 된다.</li><li><code>overflow: hidden</code>을 주었을 때 box 바깥으로 넘칠 때 표시가 안되는 이슈가 있다.</li><li>결과적으로 float를 주면서 수축이 안되게 하려면 <code>clear: both</code>라는 스타일을 갖는 앨리먼트를 추가하면 된다. (:after를 사용해서)<pre><code>&lt;div class=&quot;c&quot;&gt;  &lt;div class=&quot;a&quot;&gt;.a&lt;&#x2F;div&gt;  &lt;div class=&quot;b&quot;&gt;.b&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;.a,.b {  width: 100px;  height: 100px;  float: right;}.a {  background: red;  color: #FFF;}.b {  background: black;  color: #FFF;}.c {  background: silver;  color: #FFF;}.c:after {  display: block;  content: &quot;&quot;;  clear: both;}</code></pre></li></ul><h3 id="그-밖에…"><a href="#그-밖에…" class="headerlink" title="그 밖에…"></a>그 밖에…</h3><ul><li><a href="https://docs.google.com/presentation/d/1JfsOBEep6Tc0y8HxIx9NqK8W6lXm5ih5TaPdqSl9jxY/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1JfsOBEep6Tc0y8HxIx9NqK8W6lXm5ih5TaPdqSl9jxY/edit#slide=id.p</a></li><li><a href="https://docs.google.com/presentation/d/1mDitto-cEbKoZGOCqxDWcoM91bSH0K5SIt0XJ09pc5o/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1mDitto-cEbKoZGOCqxDWcoM91bSH0K5SIt0XJ09pc5o/edit#slide=id.p</a></li><li><a href="https://docs.google.com/presentation/d/1cI_96cUjOpRzrNGHHWaDCcsghUc_RG4JuqenNZm68h0/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1cI_96cUjOpRzrNGHHWaDCcsghUc_RG4JuqenNZm68h0/edit#slide=id.p</a></li><li><a href="http://naradesign.net/wp/2017/04/20/2363/" target="_blank" rel="noopener">http://naradesign.net/wp/2017/04/20/2363/</a></li><li><a href="http://naradesign.net/wp/2017/04/24/2440/" target="_blank" rel="noopener">http://naradesign.net/wp/2017/04/24/2440/</a></li><li><a href="http://naradesign.net/wp/2017/05/02/2467/" target="_blank" rel="noopener">http://naradesign.net/wp/2017/05/02/2467/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스파크 강의 노트 Day 4</title>
      <link href="/2017/05/30/20170530-spark-lecture-day04/"/>
      <url>/2017/05/30/20170530-spark-lecture-day04/</url>
      
        <content type="html"><![CDATA[<h1 id="Machine-Learing-With-Spark"><a href="#Machine-Learing-With-Spark" class="headerlink" title="Machine Learing With Spark"></a>Machine Learing With Spark</h1><h2 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a>K-Means</h2><ul><li>주어진 데이터를 K개의 클러스터로 묶는 알고리즘 (Clustering, unsupervised learning)<ul><li>Center 값을 기준으로 분포를 구분함</li><li>PIC, K-means 참조</li></ul></li><li>ML 코딩 (RDD-based API)<ol><li>Setting SparkContext</li><li>Load Data (ex: RDD[String] -&gt; RDD[Vector], CSV 파일을 읽어서 한 줄씩 Vector로 변환)</li><li>Train Model<ul><li>ex)<pre><code>val model: KMeansModel = KMeans.train(parsedData, 2, 20)model.clusterCenters.foreach(println)</code></pre></li></ul></li><li>Show Results</li><li>Evaluate (평가)<ul><li>ex)<pre><code>val cost: Double = model.computeCost(parsedData)</code></pre></li><li>cost 값이 0에 수렴할수록 좋은 모델</li></ul></li><li>Predict<ul><li>ex)<pre><code>val predictions1: Int = model.predict(Vectors.dense(0.5, 0.5, 0.5))</code></pre></li></ul></li></ol></li><li>ML 코딩 순서 (DataFrame-based APIs)<ol><li>Setting SparkContext<ul><li>ex)<pre><code>val conf: SparkConf = ...val sc: SparkContext = new SparkContext(conf)val sqlContext: SQLContext = new SQLContext(sc) &#x2F;&#x2F; RDD 프로그래밍과 차이점</code></pre></li></ul></li><li>Load Data<ul><li>ex)<pre><code>val dataSet: DataFrame = sqlContext.createDataFrame(Seq(    (1, Vectors.dense(0.0, 0.0, 0.0)),    (2, Vectors.dense(0.1, 0.1, 0.1))).toDF(&quot;id&quot;, &quot;features&quot;)&#x2F;&#x2F; CSV 파일을 읽어서 String을 Vector로 변환해도 된다.</code></pre></li></ul></li><li>Train Model<ul><li>ex)<pre><code>val model: KMeans = new KMeans()  .setK(2)  .setFeaturesCol(&quot;features&quot;)  .setPredictionCol(&quot;prediction&quot;)val model: KMeansModel = kmeans.fit(dataSet)model.clusterCenters.foreach(println)</code></pre></li></ul></li><li>Show Results</li><li>Evaluate (평가)<ul><li>ex)<pre><code>val cost: Double = model.computeCost(dataSet)</code></pre></li><li>cost 값이 0에 수렴할수록 좋은 모델</li></ul></li><li>Predict<ul><li>ex)<pre><code>val predictions1: Int = model.predict(Vectors.dense(0.5, 0.5, 0.5))</code></pre></li></ul></li></ol></li></ul><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><ul><li>독립변수의 선형 결합을 이용하여 사건의 발생 가능성을 예측하는 분석 기법<ol><li>Term Frequency: 단어 분포 파악</li><li>Classification Model: 모델 생성</li><li>Predict</li></ol></li><li>모델을 PMML 파일로 디스크에 저장할 수 도 있다.</li></ul><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ul><li><a href="https://github.com/sryza/spark-timeseries" target="_blank" rel="noopener">https://github.com/sryza/spark-timeseries</a></li><li>Spark GraphX: 네트워크 분석, 스팸필터 개발에 쓰임</li><li>PCA: 차원 축소 알고리즘</li><li>Scailing: 데이터를 평탄화하는 작업</li><li>Hyper Parameter</li></ul><h2 id="SparkR-Sparklyr"><a href="#SparkR-Sparklyr" class="headerlink" title="SparkR, Sparklyr"></a>SparkR, Sparklyr</h2><ul><li>Sparklyr는 R코드를 분산해서 실행시킬 수 없다.</li><li>DataFrame에서 DataSet으로 변환하는 방법: case class</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스파크 강의 노트 Day 3</title>
      <link href="/2017/05/29/20170529-spark-lecture-day03/"/>
      <url>/2017/05/29/20170529-spark-lecture-day03/</url>
      
        <content type="html"><![CDATA[<h2 id="Spark-Intro"><a href="#Spark-Intro" class="headerlink" title="Spark Intro"></a>Spark Intro</h2><ul><li>Zeppelin &gt; Notebook &gt; 입력 패널 첫번쨰 줄에 %를 입력 후 사용할 언어 입력 (%는 인터프리터 지정을 의미)</li><li>실제 업무에서는 DataFrames를 많이씀. RDD를 할 때는 DataSets를 쓰는게 속도 향상을 볼 수 있음.</li><li>DataFrames를 쓰면 Python으로 포팅하기도 쉬움. (DataFrames 추천)</li></ul><h2 id="Spark-DataFrames"><a href="#Spark-DataFrames" class="headerlink" title="Spark DataFrames"></a>Spark DataFrames</h2><ul><li>RDD와 DataFrame의 차이점? Catelog optimizer의 유무 (DataFrames에만 있음. RDD는 디시리얼라이제이션 때문에 Heap 사용량이 많아 성능 저하.)</li><li>DataFrames는 테이블 형태로 데이터를 한정했기 때문에 SQL에 국한된 로직만 작성할 수 있는 단점이 있다. (DataFrames를 보완하기 위해 Datasets가 나왔음)<ul><li>ex)<pre><code>dataFrames.filter($&quot;weight&quot; &lt; 60) &#x2F;&#x2F; $&quot;weight&quot;와 같이 컬럼을 지정하여 필터링 할 수 있다.&#x2F;&#x2F; 컬럼($)으로 쓰면 해당 컬럼에 대한 오퍼레이션을 더 추가할 수 있다. (ex: cast)</code></pre></li></ul></li><li>DataFrames를 쓰면 많이 쓰는 메소드:  show, printSchema<ul><li>ex)<pre><code>val peopleRDD = spark.sparkContext.makeRDD(&quot;&quot;&quot;{&quot;name&quot;:&quot;Yin&quot;,&quot;address&quot;:{&quot;city&quot;:&quot;Columbus&quot;,&quot;state&quot;:&quot;Ohio&quot;}}&quot;&quot;&quot; :: Nil)val people = spark.read.json(peopleRDD)people.show()</code></pre></li><li>ex)<pre><code>val wikiDF = spark.read.json(&quot;&#x2F;sparklab&#x2F;dataset&#x2F;wikiticker-2015-09-12-sampled.json.gz&quot;)wikiDF.show()wikiDF.printSchema()</code></pre></li></ul></li><li>DataFrames에서 explain 메소드를 쓰면 RDBMS와 같이 쿼리 수행 계획을 볼 수 있다.<ul><li>ex)<pre><code>wikiDF.select($&quot;page&quot;, $&quot;added&quot; + 1).explain(true)</code></pre></li></ul></li><li>Shuffle Read, Shuffle Write를 염두해두자. (엄청크면 뭔가 문제가 있다는 신호. 조인을 잘못걸경우 커짐. shuffle은 노드간에 데이터를 파티셔닝 및 섞는 것을 의미)</li><li>explain 볼 때 밑에서부터 위로 읽어나가자.</li><li>JSON을 RDD로 만든 뒤 DataFrame로 변환해서 출력해보면 알아서 컬럼 타입을 지정해준다.<ul><li>ex)<pre><code>val cityRDD = spark.sparkContext.makeRDD(  &quot;&quot;&quot;{&quot;cityName&quot;:&quot;Seoul&quot;,&quot;countryName&quot;:&quot;Republic of Korea&quot;,&quot;gdp&quot;:1321200}&quot;&quot;&quot; ::  &quot;&quot;&quot;{&quot;cityName&quot;:&quot;Tokyo&quot;,&quot;countryName&quot;:&quot;Japan&quot;,&quot;gdp&quot;:4412600}&quot;&quot;&quot; ::  &quot;&quot;&quot;{&quot;cityName&quot;:&quot;Moscow&quot;,&quot;countryName&quot;:&quot;Russia&quot;,&quot;gdp&quot;:113240}&quot;&quot;&quot; ::  &quot;&quot;&quot;{&quot;cityName&quot;:&quot;London&quot;,&quot;countryName&quot;:&quot;United Kingdom&quot;,&quot;gdp&quot;:2760960}&quot;&quot;&quot; :: Nil)val cityDF = spark.read.json(cityRDD)cityDF.printSchema()cityDF.show</code></pre></li></ul></li><li>agg는 org.apache.spark.sql.functions를 참조</li><li>DataFrame는 압축된 데이터 바이너리인 텅스텐으로 메모리에 저장됨</li><li>z는 제플린 컨텍스트라고 해서 제플린 관련 설정을 바꿀 때 사용<ul><li>ex)<pre><code>val shufflePartitions = z.input(&quot;spark.sql.shuffle.partition&quot;, &quot;200&quot;)                            .asInstanceOf[String].toInt</code></pre></li></ul></li><li>일반적인 경우는 파티션의 크기를 10MB로 잡자.<ul><li>CPU가 많이 먹으면 파티션의 크기를 조정해야됨</li></ul></li><li>parquet로 쓰면 컬럼 기반으로 데이터 구조가 잡혀있기 때문에 spark에서 읽을 때 오버헤드가 줄어든다.<ul><li>parquet를 쓰면 SQL From 절에 바로 써서 조회할 수 있다.</li><li>parquet를 쓰면 컬럼 기반으로 조회(column pruning)를 해서 분석 프로세스를 더 빨리 진행할 수 있다. (FileScan step에서 이미 필터링을 진행)</li><li>ex)<pre><code>val sqlDF = spark.sql(&quot;SELECT countryName, cityName, sum(gdp) FROM parquet.`&#x2F;sparklab&#x2F;tmp-output&#x2F;wiki_gdp` WHERE gdp &gt; 1321200 GROUP BY countryName, cityName&quot;)</code></pre></li></ul></li></ul><h2 id="UDF-User-Defined-Function"><a href="#UDF-User-Defined-Function" class="headerlink" title="UDF (User Defined Function)"></a>UDF (User Defined Function)</h2><ul><li>사용자가 만든 함수. 조인을 할 때 udf를 잘못 쓰면 옵티마이저가 안먹힐 수도 있다.<ul><li>ex)<pre><code>import org.apache.spark.sql.functions._val coder: (Int =&gt; String) = (added: Int) =&gt; if (added &gt; 10) &quot;frequent&quot; else &quot;rare&quot;val sqlfunc = udf(coder)wikiDF.withColumn(&quot;Frequency&quot;, sqlfunc(col(&quot;added&quot;))).select($&quot;page&quot;, $&quot;added&quot;, $&quot;frequency&quot;).show()</code></pre></li></ul></li><li>SQL로 만든것을 Spark DataFrame 메소드로 바꿔보기 연습<ul><li>ex)<pre><code>wikiDF  .select($&quot;countryName&quot;, $&quot;cityName&quot;, $&quot;comment&quot;, $&quot;added&quot;)  .groupBy($&quot;countryName&quot;, $&quot;cityName&quot;)  .agg(avg($&quot;added&quot;).alias(&quot;avg_added&quot;), max($&quot;added&quot;).alias(&quot;max_added&quot;))  .orderBy($&quot;avg_added&quot;.desc)  .limit(10)  .show&#x2F;&#x2F; select 컬럼에 내가 보고자 하는 컬럼을 추가해도 groupBy에 지정 안한 컬럼은 결과로 나오지 않음</code></pre></li></ul></li></ul><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><h2 id="Pivoting"><a href="#Pivoting" class="headerlink" title="Pivoting"></a>Pivoting</h2><ul><li>데이터를 Row로 쫙 늘리는 것?</li></ul><h2 id="Wikipedia-연습"><a href="#Wikipedia-연습" class="headerlink" title="Wikipedia 연습"></a>Wikipedia 연습</h2><pre><code>pageCountsDF.withColumn(&quot;masked_project&quot;, regexp_replace(regexp_replace(regexp_replace($&quot;project&quot;, &quot;[0-9]+&quot;, &quot;9&quot;), &quot;[A-Z]+&quot;, &quot;A&quot;), &quot;[a-z]+&quot;, &quot;a&quot;))  .filter($&quot;masked_project&quot; === &quot;a-a&quot; or $&quot;masked_project&quot; === &quot;a-a-a&quot; or $&quot;masked_project&quot; === &quot;a-a-a.a&quot;) &#x2F;&#x2F; &quot;masked_project = &#39;a-a&#39; or masked_project = &#39;a-a-a&#39;&quot; 이렇게도 쓸 수 있음  .groupBy($&quot;masked_project&quot;)  .count  .orderBy($&quot;count&quot;.desc)  .show(100)</code></pre><h2 id="Wikipedia-실습"><a href="#Wikipedia-실습" class="headerlink" title="Wikipedia 실습"></a>Wikipedia 실습</h2><ul><li>spark.catalog.listTables().show(false)<ul><li>메소드의 파라미터를 false로 주면 안짤리고 다 나옴</li></ul></li></ul><h2 id="SKT에서-Spark-활용-사례"><a href="#SKT에서-Spark-활용-사례" class="headerlink" title="SKT에서 Spark 활용 사례"></a>SKT에서 Spark 활용 사례</h2><ul><li>Flume, Kafka로 데이터를 메세지큐에 담음 -&gt; Batch 처리 or Streaming 처리에 Spark 사용 &gt; 저장소에 저장 (Cache, HDFS)</li><li>카프카는 최소 3대 이상으로 구축되어야 함.</li><li>카프카도 토픽에 데이터가 너무 많이 들어오면 repartition을 진행해야 한다.</li><li>Streaming에서는 Transaction 처리가 힘듬.</li><li>Data를 Write하는 것도 고려해야됨. &gt; 대량으로 write하기 위해서는 MQ를 중간에 사용하여 저장 처리 &gt; 그러나 중복이 발생할 수 있다?</li><li>Catalog API가 뭘까?</li><li>DataSet의 장점: Strong Type (Untyped API, Type API 모두 제공함)</li><li>Shared Variable 사용 방법: Accumulator, Broadcast Variables</li><li>Whole Stage CodeGen (실행 시점에 필요한 데이터만 필터링해서 데이터를 올림, Tungsten vetorization)</li></ul><h2 id="Structured-Streaming"><a href="#Structured-Streaming" class="headerlink" title="Structured Streaming"></a>Structured Streaming</h2><ul><li>Streaming 처리를 할 때 unbounded table 형태로 데이터 전체를 사용할 수 있음 (structured stream outputMode: Append, Complete, Update 때문)</li><li>10분 단위로 트리거링해서 Result Table 생성할 수 있음</li><li>Structured Stream은 아직 알파버전</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스파크 강의 노트 Day 2</title>
      <link href="/2017/05/26/20170526-spark-lecture-day02/"/>
      <url>/2017/05/26/20170526-spark-lecture-day02/</url>
      
        <content type="html"><![CDATA[<h2 id="Local에-Spark-환경-구축하기"><a href="#Local에-Spark-환경-구축하기" class="headerlink" title="Local에 Spark 환경 구축하기"></a>Local에 Spark 환경 구축하기</h2><ol start="0"><li>vm 띄우면 별다른 작업할거 없음<ul><li>goo.gl/2nKkOZ</li></ul></li><li>Zeppelin download<ul><li>Spark 내장. 별도 설정 필요 없고</li><li>zeppelin을 띄우면 yarn과 hdfs가 자동으로 뜸</li><li><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> zeppelin</li><li><a href="http://localhost:4040" target="_blank" rel="noopener">http://localhost:4040</a> spark dashboard =&gt; zeppelin만 있는 경우 driver만 뜸</li><li><a href="https://www.zeppelinhub.com" target="_blank" rel="noopener">https://www.zeppelinhub.com</a> =&gt; 예제 노트북 받을 수 있는 곳</li></ul></li><li>Spark Download<ul><li>spark-shell을 띄울 수 있음</li><li><a href="http://13.92.190.120:8080" target="_blank" rel="noopener">http://13.92.190.120:8080</a></li></ul></li></ol><h2 id="Stream-Processing"><a href="#Stream-Processing" class="headerlink" title="Stream Processing"></a>Stream Processing</h2><ul><li>Spark으로도 수집을 할 수 있는데 잘 안씀. 플럼, 카프카를 이용</li><li>Storm은 MapReduce로 된 코드를 마이그레이션 하기 편함</li><li>Streaming Application은 따로 kill하지 않는 이상 끝나지 않고 계속 실행됨</li><li>모니터링은 카프카 다룰 때 한 번더 언급</li><li>windowing</li><li>Production 환경에서는 checkpointing 관련 로직을 고려해야됨</li></ul><h2 id="Accumulator-amp-Broadcast"><a href="#Accumulator-amp-Broadcast" class="headerlink" title="Accumulator &amp; Broadcast"></a>Accumulator &amp; Broadcast</h2><ul><li>shared 변수를 공유하고 싶을 때 사용, (ex: 데이터 모델을 공유하고 싶을 때)</li><li>Broadcast는 read-only. 전체 노드가 다 공유하고 싶을 때 사용. (ex: 다른 데이터와 조인을 할 때 활용할 수도 있음)</li><li>Accumulator는 update 가능</li></ul><h2 id="Streaming-Using-Kafka"><a href="#Streaming-Using-Kafka" class="headerlink" title="Streaming Using Kafka"></a>Streaming Using Kafka</h2><ul><li>카프카로 데이터가 들어오면 잠시 저장함. 데이터 유실이 없음</li></ul><h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><ul><li>Spark SQL은 데이터프레임을 사용</li><li>Spark SQL은 내부적으로는 RDD를 사용하지만, Catalyst Optimizer가 SQL실행을 최적화 해줌</li><li>실습 진행<ul><li>udf가 뭐지?</li></ul></li></ul><h2 id="Spark-2-0"><a href="#Spark-2-0" class="headerlink" title="Spark 2.0"></a>Spark 2.0</h2><ul><li>Tungsten: 메모리 관리, CPU 사용 개선을 진행</li><li>Strunctured Streaming</li><li>Spark Session을 쓰면 어떤 언어를 쓰던 ML 모델링을 할 수 있다.</li><li>Catelog API</li><li>Dataset</li></ul><h3 id="Tungsten"><a href="#Tungsten" class="headerlink" title="Tungsten"></a>Tungsten</h3><ul><li>Whole-stage Codegen을 통해서 스파크 내부에서 코드 최적화를 진행함</li></ul><h3 id="Structured-Streaming"><a href="#Structured-Streaming" class="headerlink" title="Structured Streaming"></a>Structured Streaming</h3><h3 id="Lambda-Architecture"><a href="#Lambda-Architecture" class="headerlink" title="Lambda Architecture"></a>Lambda Architecture</h3><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><ul><li>Spark 진입장벽<ul><li>Scala</li><li>Spark API 사용방법</li><li>ML</li></ul></li><li>Spark.mllib는 RDD를 기반으로, Spark.ml는 DataFrame 기반으로 만들어짐.</li></ul><h3 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h3><ul><li>vector = array<ul><li>Local vector는? 분산이 아니라 싱글 머신(1 JVM)에 있는 Array</li><li>dense vector: 일반적인 array</li><li>sparse vector: array이긴 한데, 복잡한 array (ex: Verctors.sparse(10, Array(1, 2), Array(2, 3)))</li></ul></li><li>LabeledPoint: 레이블이 붙은 벡터</li><li>Matrix<ul><li>vector 모음</li></ul></li><li>IndexedRowMatrix<ul><li>vector가 stack처럼 쌓여있는 것</li></ul></li><li>CoordinateMatrix</li><li>BlockMatrix</li><li>ML 예제: <a href="https://goo.gl/" target="_blank" rel="noopener">https://goo.gl/</a></li><li>어떤 ML 함수를 쓰느냐에 따라 vector나 matrix 써야됨</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스파크 강의 노트 Day 1</title>
      <link href="/2017/05/25/20170525-spark-lecture-day01/"/>
      <url>/2017/05/25/20170525-spark-lecture-day01/</url>
      
        <content type="html"><![CDATA[<h2 id="Scala-훑어보기-실습-SparkIntro-0-Scala-Programming"><a href="#Scala-훑어보기-실습-SparkIntro-0-Scala-Programming" class="headerlink" title="Scala 훑어보기 실습 (SparkIntro/0. Scala Programming)"></a>Scala 훑어보기 실습 (SparkIntro/0. Scala Programming)</h2><ul><li>zeppelin을 통해 스칼라 코드를 간단하게 실행해보자. (스칼라 관련 예제 notebook을 import 하여 실행해봄)<ul><li>Tip. 실행 후 소스코드를 더블클릭 해보면 수정이 가능함</li></ul></li></ul><h2 id="Spark-Overview"><a href="#Spark-Overview" class="headerlink" title="Spark Overview"></a>Spark Overview</h2><ul><li>MapReduce 오버뷰, Spark와 MapReduce를 비교하여 뭐가 좋은지 </li><li>Spark로 할 수 있는게 뭐가 있을까? ETL, Crawling, Statistics</li><li>Spark로 할 수 없는건? 시각화, 데이터 수집</li><li>결국 Spark를 쓰는 목적은 데이터를 저장소에서 읽어서 가공 후 저장하는 것을 분산처리 방식으로 프레임워크화 된 기술을 쓰기위해서 쓰는 것</li></ul><h2 id="Spark-실행-환경-구축하기"><a href="#Spark-실행-환경-구축하기" class="headerlink" title="Spark 실행 환경 구축하기"></a>Spark 실행 환경 구축하기</h2><ul><li>Spark를 하려면 로컬 머신에서 개발용으로 할 것인지, 여러 머신에서 Clustering해서 분산 처리할 것인지에 따라 다르다.</li><li>Local Machine 개발용으로 Spark 환경 구축하기<ul><li>크게 두 가지로 나뉘는데, Zeppelin만 설치하거나 Spark-submit을 사용하면 되는데 Zeppelin을 설치하면 Spark &amp; UI, HDFS가 포함되어 있기 때문에 따로 설치할 필요가 없는 반면, Spark-submit을 쓰려면 저장소인 hdfs나 분산처리 매니징 기술인 YARN, 그리고 Spark 실행 모니터링을 하기 위한 Spark UI를 직접 설치해줘야 한다.</li></ul><ol><li>Zeppelin 설치<ul><li>Zeppelin 공식 사이트에서 제플린 다운로드</li><li>zeppelin을 로컬에서 실행하기 위한 설정 진행 (아래 설정파일 참고)</li><li>$ZEPPELIN_HOME/bin/zeppelin.sh 실행<pre><code>#!&#x2F;bin&#x2F;bash...export JAVA_HOME=&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_121.jdk&#x2F;Contents&#x2F;Homeexport HADOOP_HOME=&#x2F;Users&#x2F;1002371&#x2F;Dev&#x2F;hadoop-2.8.0export SPARK_HOME=&#x2F;Users&#x2F;1002371&#x2F;Dev&#x2F;spark-2.1.1-bin-hadoop2.7export HADOOP_CONF_DIR=${HADOOP_HOME}&#x2F;etc&#x2F;hadoop    </code></pre></li></ul></li><li>Hadoop(YARN) 설치<ul><li>Hadoop 공식 사이트에서 하둡 다운로드</li><li>$HADOOP_HOME/etc/haddop/hdfs-site.xml 등등 설정파일에 HDFS 관련 설정 진행하기 (아래 설정 예시 참고)</li><li>$HADOOP_HOME/bin/start-all.sh 실행 (YARN과 HDFS 실행됨)<pre><code>&lt;configuration&gt; &lt;property&gt;  &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;  &lt;value&gt;hdfs:&#x2F;&#x2F;127.0.0.1:8020&#x2F;&lt;&#x2F;value&gt;  &lt;description&gt;NameNode URI&lt;&#x2F;description&gt; &lt;&#x2F;property&gt; &lt;property&gt;  &lt;name&gt;hadoop.proxyuser.teamsk.groups&lt;&#x2F;name&gt;  &lt;value&gt;*&lt;&#x2F;value&gt; &lt;&#x2F;property&gt; &lt;property&gt;  &lt;name&gt;hadoop.proxyuser.teamsk.hosts&lt;&#x2F;name&gt;  &lt;value&gt;*&lt;&#x2F;value&gt; &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;    </code></pre><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text&#x2F;xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;!--  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--&gt;&lt;!-- Put site-specific property overrides in this file. --&gt;&lt;configuration&gt; &lt;property&gt;  &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;  &lt;value&gt;file:&#x2F;&#x2F;&#x2F;home&#x2F;teamsk&#x2F;Sparklab&#x2F;hadoop-2.8.0&#x2F;data&#x2F;datanode&lt;&#x2F;value&gt;  &lt;description&gt;Comma separated list of paths on the local filesystem of a DataNode where it should store its blocks&lt;&#x2F;description&gt; &lt;&#x2F;property&gt; &lt;property&gt;  &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;  &lt;value&gt;1&lt;&#x2F;value&gt;  &lt;description&gt;Default block replication. The actual number of replications can be specified when the file is created. The default is used if replication is not specified in create time.&lt;&#x2F;description&gt; &lt;&#x2F;property&gt; &lt;property&gt;  &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;  &lt;value&gt;file:&#x2F;&#x2F;&#x2F;home&#x2F;teamsk&#x2F;Sparklab&#x2F;hadoop-2.8.0&#x2F;data&#x2F;namenode&lt;&#x2F;value&gt;  &lt;description&gt;Path on the local filesystem where the NameNode stores the namespace and transaction logs persistently.&lt;&#x2F;description&gt; &lt;&#x2F;property&gt; &lt;property&gt;  &lt;name&gt;dfs.webhdfs.enabled&lt;&#x2F;name&gt;  &lt;value&gt;true&lt;&#x2F;value&gt; &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;    </code></pre></li></ul></li><li>Spark 설치<ul><li>Spark 공식 사이트에서 스파크 다운로드</li><li>Spark App 코드 작성 후 jar로 묶기</li><li>$SPARK_HOME/bin에서 spark-submit.sh 실행하는데 실행 파라미터로 앞에서 만든 JAR 파일 입력하면 스파크 구동됨<pre><code>#!&#x2F;usr&#x2F;bin&#x2F;env bash...export HADOOP_CONF_DIR=&#x2F;Users&#x2F;1002371&#x2F;Dev&#x2F;hadoop-2.8.0&#x2F;etc&#x2F;hadoop    </code></pre></li></ul></li></ol></li></ul><h2 id="Spark-실습-SparkIntro-1-RDD-Programming"><a href="#Spark-실습-SparkIntro-1-RDD-Programming" class="headerlink" title="Spark 실습 (SparkIntro/1. RDD Programming)"></a>Spark 실습 (SparkIntro/1. RDD Programming)</h2><ul><li>SparkContext를 활용하여 word counting 등 간단한 실습</li><li>Spark’s Fault Tolerance: 파티션이 날라가면 계보를 따라 복구 후 다시 해당 파티션만 실행</li><li>deterministically recomputable operations -&gt; Lazy Evaluation 개념 (이게 되어야지 fault tolerance가 됨)</li></ul><h1 id="Spark-Architecture"><a href="#Spark-Architecture" class="headerlink" title="Spark Architecture"></a>Spark Architecture</h1><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><ul><li>Two Types of Operations - transformation and action</li><li>Transaformations are lazy</li><li>Transformations are executed when an action is run.</li><li>Persist and cache</li></ul><h2 id="동작-방식-ETL-기반-읽고-처리하고-저장"><a href="#동작-방식-ETL-기반-읽고-처리하고-저장" class="headerlink" title="동작 방식 (ETL 기반, 읽고 처리하고 저장)"></a>동작 방식 (ETL 기반, 읽고 처리하고 저장)</h2><ul><li>hdfs 읽기 -&gt; 필터링 -&gt; 파티션 조정 -&gt; 저장</li><li>coalesce(2) // 원하는 데이터만 뽑아낸 뒤 파티션을 정리할 때 사용</li><li>늘릴땐 repartition </li><li>메모리 이슈가 발생할 땐 job이 죽음 -&gt; 파티션 조정이 필요</li></ul><h2 id="Spark-Job"><a href="#Spark-Job" class="headerlink" title="Spark Job"></a>Spark Job</h2><ul><li>Job: RDD로 계산하는 가장 최소 단위</li><li>Stage: 코드가 실행된 파이프라인된 RDD 단위</li><li>Task: 스테이지에서 RDD 파티션에 따른 실행 단위</li><li>Shuffle</li><li>Executor: 분산해서 실행시키는 주체</li></ul><h2 id="Spark-Runtime-Architecture"><a href="#Spark-Runtime-Architecture" class="headerlink" title="Spark Runtime Architecture"></a>Spark Runtime Architecture</h2><ul><li>교육에서는 Spark Shell을 쓸 수도 있지만 Zeppelin을 쓴다.</li><li>Zeppelin을 설치하면 스파크 관련 리소스가 생성됨</li><li>Spark Shell을 쓰면 SparkContext를 직접 생성해줘야 함</li><li>Spark을 클러스터링 하려면 Mesos, YARN을 써야됨</li><li>Driver Program, Cluster Manager, Worker</li><li>Spark Context를 생성하면서 클러스터를 지정?</li></ul><h2 id="Spark-Deployment"><a href="#Spark-Deployment" class="headerlink" title="Spark Deployment"></a>Spark Deployment</h2><ul><li>분산환경에 Deploy할 때는 Mesos, Apahce YARN을 고려해야 됨</li><li>Cluster Manager: 자원을 할당하거나 작업실행을 관리</li><li>Spark-repl: spark shell을 띄우지 않아도 spark 코드를 실행시킬 수 있는 환경</li><li>Spark Shell 로컬에서 띄우기: 간단한걸 테스트할 때 로컬에서 실행시키는게 좋음</li><li>Spark 코드 작성 -&gt; Jar로 묶기 -&gt; 클러스터에 배포 (배포할 때 쓰는게 spark-submit)<ul><li>Spark 실행 관련 설정은 conf 파일로 쓰거나 spark-submit의 옵션, 코드로 new SparkConf()에 셋팅할 수 있다.</li></ul></li><li>StandAlone 모드: Master가 죽으면 안되기 때문에 Zookeeper를 사용하여 backup master가 실행할 수 있도록 해준다. (Mesos, YARN을 사용하여 클러스터링 할 때는 상관 없음)</li><li>Yarn Mode: Resource Manager, Node Manager의 개념으로 동작<ul><li>YARN Client Mode: 얀 밖에서 실행할 때 사용 (자원이 많지 않을 때 즉 Driver에서 많은 작업을 할 때 사용, Driver에서 많은 결과물을 전달해야 된다거나 등등..)</li><li>YARN Cluster Mode: 클러스터 내에서 리소스 매니저를 지정</li></ul></li><li>Dynamic Resource Allocation on YARN: Application의 Work node에 따라서 서버가 조정. ETL을 밤에 띄울 때 서버가 많이 필요할 시 서버를 동적으로 늘려서 실행하고 싶을 때 사용<ul><li>RDD를 날리지 않고 재사용하기 위해 external shuffle plugin을 설치해야됨</li><li>executor의 min, max 갯수를 지정하면 work node 내에서 실행되는 스레드 갯수 지정?</li></ul></li><li>Mesos Mode: Mesos는 하둡진영 뿐 아니라 일반 어플리케이션 진영까지 자원관리 가능</li><li>Job Server: SparkContext를 Spark 어플리케이션을 실행할 때마다 생성하는게 아니라 Job Server에 SparkContext를 생성해서 공유해서 사용 (Production 환경에서 사용)</li><li>Hardware sizing<ul><li>Storage: HDFS(추천) or local</li><li>Local disk: raid 구성 안함, 한 노드당 디스크를 25TB 4-8개를 붙여서 씀?</li><li>CPU: 객체 직렬화, 역직렬화 때문에 CPU를 많이 잡아먹음. 한 노드당 8-16 core를 추천</li><li>Network: 셔플링이 많을 경우 네트워크 고민 필요. 10GB</li><li>Memory: 8GB to hundreds of gigabytes, allocating only at most 75% of the memory.</li></ul></li></ul><h2 id="Spark-on-cloud"><a href="#Spark-on-cloud" class="headerlink" title="Spark on cloud"></a>Spark on cloud</h2><ul><li>AWS 사용 사례 소개</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스프링캠프 2017 둘째날 메모</title>
      <link href="/2017/04/23/20170423-spring-camp-day02/"/>
      <url>/2017/04/23/20170423-spring-camp-day02/</url>
      
        <content type="html"><![CDATA[<h1 id="들은-세션-목차"><a href="#들은-세션-목차" class="headerlink" title="들은 세션 목차"></a>들은 세션 목차</h1><ul><li>Keynote</li><li>Reactive Spring ( Spring 5 &amp; Reactor )</li><li>이벤트 소싱 (Event Sourcing) 소개</li><li>Implementing EventSourcing &amp; CQRS (구현부)</li><li>Indroductory RxJava</li><li>Spring Data Envers</li></ul><h2 id="Keynote"><a href="#Keynote" class="headerlink" title="Keynote"></a>Keynote</h2><p>발표자료: <a href="http://benelog.github.io/docs/spring-camp-2017/" target="_blank" rel="noopener">http://benelog.github.io/docs/spring-camp-2017/</a></p><ul><li>spring-composed?</li></ul><h2 id="Reactive-Spring-Spring-5-amp-Reactor-발표자-정윤진"><a href="#Reactive-Spring-Spring-5-amp-Reactor-발표자-정윤진" class="headerlink" title="Reactive Spring: Spring 5 &amp; Reactor (발표자: 정윤진)"></a>Reactive Spring: Spring 5 &amp; Reactor (발표자: 정윤진)</h2><p>발표자료: <a href="https://www.slideshare.net/PivotalKorea/reactive-spring5-springcamp2017-23th-of-april" target="_blank" rel="noopener">https://www.slideshare.net/PivotalKorea/reactive-spring5-springcamp2017-23th-of-april</a></p><ul><li>Spring 5가 어떤 모양으로 될지, Reactor가 어떻게 적용될지 소개</li><li>Ice Breaking<ul><li><a href="http://www.slideshare.net/KevinMcEntee/netflix-incloudsmarch8-2011forwiki" target="_blank" rel="noopener">http://www.slideshare.net/KevinMcEntee/netflix-incloudsmarch8-2011forwiki</a></li><li>데이터베이스의 장애가 서비스 전체 장애로 이어짐 -&gt; 서비스 분리가 안됨</li><li>Reactive로 분산된 서비스에 대한 요청 처리를 어떻게 할 수 있을지 소개 (Spring 5 reactor)</li></ul></li><li>Spring 5<ul><li>JDK 9, HTTP/2, Reactive 차용</li></ul></li><li>Project Reactor<ul><li>왜 필요한가? 2000년대에 의존하는 기술이 많음 -&gt; 요청 처리에 대한 처리를 Thread별로 진행 (요청 지연이 각각 다름) -&gt; 요청이 더 많아지는 것을 처리하기 위해 Load Balancer를 앞에 둠(Are you dead?) -&gt; 어플리케이션이 통으로 하나가 되어 있는 경우라서 처리할 서버만 늘리는 꼴</li><li>이 구조를 탈피할순 없을까? Nonblocking Runtime -&gt; 요청 처리만큼 스레드를 만들지 말자라는 아이디어에서 출발 -&gt; 요청을 받을 때마다 가용한 스레드가 뭔지 알 필요없이 Pub/Sub으로 Worker Thread에게 요청처리를 알림</li><li>JVM을 위한 Reactive Streams</li></ul></li><li>Reactive Manifesto<ul><li>응답성: 모든 요청에 대해 적시에 응답, 문제에 대해 빠르고 효율적으로 응답</li><li>탄력성: 시스템 부하, 자원 변경에도 응답성을 유지</li><li>회복성: 시스템이 장애에도 응답성을 유지 (Circuit Breaker, 응답 불가 상태를 감지하여 미리 지정한 응답으로 전달)</li><li>메세지 중심: 리액티브 시스템은 느슨한 결합을 사용, 컴포넌트들은 비동기 방법으로 메세지 드리븐으로 동작</li></ul></li><li>Reactive System, Reactive Programming -&gt; 복수개의 서비스로 이루어진 분산 시스템에 대한 해법, Microservice가 지향하는 방향</li><li>Reactive Streams<ul><li>인프라간의 상호 운용성에 집중 (웹서버, 데이터 저장소 드라이버, 프레임워크)</li><li>NonBlocking Backpressure 지원 -&gt; 응답 못하면 다른 곳에서 처리할 수 있게 -&gt; 백프레셔는 응답을 처리하지 못하면 역류</li><li>RxJava, Project Reactor, Vert.x, Akka</li><li>Subscriber가 처리를 못하면 Publisher가 큐에 담아놓고 Subscriber를 확보한다.</li><li>크게 Mono와 Flux를 보면 됨</li><li>docker run -p 127.0.0.1:27017:27017 mongo</li></ul></li><li>Reactive 디버깅은? 뭐 있었는데 못봄…</li><li>Managing State with RxJava By Jake Wharton</li></ul><h2 id="이벤트-소싱-Event-Sourcing-소개-발표자-이규원"><a href="#이벤트-소싱-Event-Sourcing-소개-발표자-이규원" class="headerlink" title="이벤트 소싱 (Event Sourcing) 소개 (발표자: 이규원)"></a>이벤트 소싱 (Event Sourcing) 소개 (발표자: 이규원)</h2><p>발표자료: <a href="http://doc.co/fggswS" target="_blank" rel="noopener">http://doc.co/fggswS</a></p><ul><li>이벤트 소싱<ul><li>이벤트 소싱하면 착각하는거? 이벤트 드리븐 아키텍쳐와 착각 -&gt; 이벤트 소싱은 이벤트를 저장하는 것에 대한 것이지 이벤트를 주고 받는다는 것이 아님</li><li>장비구니에 대한 상태는 마지막 것만 저장됨 -&gt; 넣었다가 뻈다가 하는 것에 대한 것은? 이걸 캐치해야지 추천이 가능하지 않을까?</li><li>이벤트는 도메인에 대한 사실을 기록하진 않음</li><li>이벤트 소싱은 변화를 나타내는 이벤트를 저장하고 이 이벤트를 재생해서 일련의 상태를 만들어냄? -&gt; 도메인에서 발생하는 모든 이벤트를 기록하는 일 -&gt; 외부에서 명령을 받으면 결과로 이벤트를 저장 (ex: 장바구니에 물건을 담았다라는 행위를 기록) -&gt; 상태는 영속 대상이 아니며 이벤트가 영속 대상, 상태는 추가될 뿐</li><li>이벤트 소싱의 예) AWS, GIT</li></ul></li><li>데이터 영속<ul><li>이벤트 저장소는 하나의 거대한 이벤트 스트림이 아님 -&gt; 이벤트 저장소는 수많은 이벤트 스트림으로 구성됨 -&gt; 도메인 오브젝트 하나 당 이벤트 스트림이 저장됨</li><li>커맨드와 이벤트는 하나의 데이터 명령(Cammand)는 유효한지 검증이 필요, 반면 이벤트는 이미 지나간 사실 그러므로 검증 대상이 아님 -&gt; 이벤트는 정책이 바뀌어도 실패라는게 없음 -&gt; 이벤트는 재생하면 항상 성공해야함</li><li>이벤트 소싱은 데이터베이스가 뭔지 상관없이 모두 구현 가능 -&gt; 임피던스 미스매치가 발생하지 않음</li><li>CompoundPrimary Key: ShoppingCartId (Object Id), Version | Value: EventType, Payload</li></ul></li><li>백만개의 이벤트를 가지는 도메인 개체일 경우에는? 성능이 이슈가 될 수 있다.<ul><li>스냅샷을 사용 -&gt; 특정 상황이 있을 떄마다 이벤트를 스냅샷으로 남긴다. 스냅샷 이후의 이벤트만 재생하기 때문에 성능 이슈가 나타나지 않음</li><li>Key: ObjectId | value: Version, payload</li></ul></li><li>Messaging<ul><li>이벤트 소싱에서는 정확히 한 번 배달이 어렵다. 메세지 누락이 있을 수가 있어서 비지니스에서는 쓰기 어렵다? 메세지를 한 번 이상 보낼 수도 있다라는 것 때문에 멱등성 문제가 있을 수 있다.</li><li>이벤트 소싱은 정확히 한 번 배달은 어렵지만 최소 한 번 배달은 쉬울 수 있다.</li><li>이벤트 스트림은 순서를 보장</li></ul></li><li>CQRS<ul><li>재고가 10개 미만인 상품 조회 -&gt; 이벤트 스토어를 풀스캔하여 찾는다?</li><li>이벤트 스토어는 다양한 비지니스에 대한 조회를 충족할 수 없다. 그러므로 무조건 CQRS를 적용해야 함</li><li>Command Query Seperation: 질문은 대답을 변경하지 않는다. 질문에 대한 답만 하는 메서드, 저장은 하되 응답은 하지 않는 메서드 이렇게 둘로 나누는 기법</li><li>CQS를 DDD에 적용하다가 더 발전해서 Command Side / Query Side와 같이 시스템 자체를 나누는 CQRS로 발전</li><li>Command Side의 이벤트 스토어에 모두 저장 Query Side의 Materialized Store에 복사해서 사용 (정규화, 중복 데이터는 신경 안씀)</li></ul></li><li>고려사항<ul><li>익숙하지 않아 학습 곡선이 좀 있다.</li><li>비동기와 씨름해야 된다.</li><li><a href="https://github.com/Reacture/Khala.EventSourcing" target="_blank" rel="noopener">https://github.com/Reacture/Khala.EventSourcing</a></li></ul></li></ul><h2 id="Implementing-EventSourcing-amp-CQRS-구현부-발표자-심천보"><a href="#Implementing-EventSourcing-amp-CQRS-구현부-발표자-심천보" class="headerlink" title="Implementing EventSourcing &amp; CQRS 구현부 (발표자: 심천보)"></a>Implementing EventSourcing &amp; CQRS 구현부 (발표자: 심천보)</h2><p>발표자료: <a href="https://github.com/jaceshim/springcamp2017/blob/master/springcamp2017_implementing_es_cqrs.pdf" target="_blank" rel="noopener">https://github.com/jaceshim/springcamp2017/blob/master/springcamp2017_implementing_es_cqrs.pdf</a><br>예제소스: <a href="https://github.com/jaceshim/springcamp2017" target="_blank" rel="noopener">https://github.com/jaceshim/springcamp2017</a></p><ul><li>이벤트 소싱은 데이터 저장 방식의 새로운 패턴!</li><li>스냅샷은 인메모리로 관리? </li><li>구현 소스: <a href="https://github.com/jaceshim/springcamp2017" target="_blank" rel="noopener">https://github.com/jaceshim/springcamp2017</a><ul><li>데이터 변경 시 버전을 먼저 체크</li></ul></li><li>Axon/Eventuate Framework</li></ul><h2 id="Indroductory-RxJava-발표자-김인태"><a href="#Indroductory-RxJava-발표자-김인태" class="headerlink" title="Indroductory RxJava (발표자: 김인태)"></a>Indroductory RxJava (발표자: 김인태)</h2><ul><li>RxJava를 이해하려면… 비동기, Java 8 Lamda, High-order function</li><li>메인스레드에서 Sub 스레드 수행 시 Sub 스레드의 종료 로그가 안찍힘 왜?<ul><li>setDaemon(boolean)</li><li>join()</li><li>블로킹 방식이기 때문에 notify를 사용</li></ul></li><li>Java에서 스레드 생성 시 스택 공간을 잡음 (1MB)<ul><li>Multi-Thread를 직접할 때 문제가 될 수 있음 (without threadPool)</li></ul></li></ul><h2 id="Spring-Data-Envers-발표자-김영한"><a href="#Spring-Data-Envers-발표자-김영한" class="headerlink" title="Spring Data Envers (발표자: 김영한)"></a>Spring Data Envers (발표자: 김영한)</h2><ul><li>변경 이력을 어떻게 할 것인가?</li><li>RevisionRepository를 다른 데이터베이스 서버의 DataSource를 쓸 순 없을까?</li></ul><h2 id="그-외"><a href="#그-외" class="headerlink" title="그 외"></a>그 외</h2><p>이번 스프링캠프의 이벤트소싱 주제는 실로 충격이었다. 마이크로서비스, Reactive Programming, Spring Cloud Data Flow와 같은 것들이 이벤트 소싱을 하기 위한 발판 같아 보였다. (어쩌면 나의 오해일수도..^^;) 아무튼 내가 하고 있는 업무에 대해서는 규모가 커지면 터질게 분명했다. 개선은? 예전 방식과 비슷한 새로 개발이라는 어리석은 선택을 하지 않기 위해 미리 공부해 대비해놔야겠다.</p><ul><li>Thread의 이해</li><li>Reactive Programming (Project Reactor or RxJava)</li><li>DDD</li><li>Event Sourcing</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springcamp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>스프링캠프 2017 첫째날 메모</title>
      <link href="/2017/04/22/20170422-spring-camp-day01/"/>
      <url>/2017/04/22/20170422-spring-camp-day01/</url>
      
        <content type="html"><![CDATA[<h1 id="들은-세션-목차"><a href="#들은-세션-목차" class="headerlink" title="들은 세션 목차"></a>들은 세션 목차</h1><ul><li>Keynote</li><li>프로세스, 스레드, 리액티브</li><li>Aync@Spring</li><li>Spring WebFlux</li><li>Spring Cloud Data Flow</li><li>비동기 어플리케이션과 모니터링으로 밀당하기</li><li>그 외</li></ul><h2 id="Keynote"><a href="#Keynote" class="headerlink" title="Keynote"></a>Keynote</h2><ul><li>히든 피겨스(Hidden Figures)</li></ul><h2 id="프로세스-스레드-리액티브-발표자-부종민"><a href="#프로세스-스레드-리액티브-발표자-부종민" class="headerlink" title="프로세스, 스레드, 리액티브 (발표자: 부종민)"></a>프로세스, 스레드, 리액티브 (발표자: 부종민)</h2><p>발표자료: <a href="https://docs.google.com/presentation/d/1gIZP1DBTTXnGtIgU1KPD6TWxQlOqZAjFOpE2F_jrNiY/mobilepresent?slide=id.g35f391192_00" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1gIZP1DBTTXnGtIgU1KPD6TWxQlOqZAjFOpE2F_jrNiY/mobilepresent?slide=id.g35f391192_00</a></p><ul><li>프로세스는 프로세스 별로 메모리 공간 관리</li><li>멀티프로세스는 컨텍스트 스위칭 시 L1, L2, L3 Cache를 비움</li><li>Java Internal</li><li>I/O Blocking 관련된 비지니스는 스레드로 개발한 경우가 많음</li><li>Java Thread1: Thread Class + Runnable interface (Java Thread는 OS Thread를 사용)<ul><li>코드의 실행 흐름을 알기 어렵다.</li><li>Thread의 실행 결과물을 공유하기 어렵다. -&gt; Main Thread에서 Sub Thread의 결과를 받고 싶을땐 어떻게할까? Main Thread에서 HashMap을 만들고 Sub Thread에서 거기에 저장</li><li>동기화는? wait(), notify(), syncronized -&gt; 개발자의 실수가 많아짐</li><li>구현 Example</li></ul></li><li>Java Thread2: Future, Callable<ul><li>비동기 작업의 결과를 받아오고 싶을 떈 Future Interface의 get()를 사용</li><li>구현 Example</li><li>Executors.newSingleThreadExecutor()</li><li>Future는 JDK 1.5에서 등장</li><li>Future만으로도 만족스럽긴 한데 thread를 직접 사용하는건 쉽지 않음 (지식 + 경험 필요), 스레드풀에 대한 지식도 필요</li><li>ThreadPool 사용 시 트래픽 폭주 시 큐에 스레드가 많이 쌓여서 오히려 속도가 더 안나오는 경우가 있음</li><li>newCacheThreadPool 사용 시 1 request 처리 시 7 thread가 필요한데 트래픽 폭주 시 스레드가 폭등</li></ul></li><li>Java Thread3: CompletableFuture<ul><li>Future 사용 시 콜백 지옥에 빠질 수 있음</li><li>Future 시리즈 중 끝판왕 interface CompletionStage</li><li>구현 Example</li><li>CompletableFuture는 JDK 1.8 부터 추가됨</li><li>Task간 순서와 조합을 CompletableFuture를 사용하여 Chaining 방식으로 해결할 수 있음 (CompletableFuture.thenApply(), CompletableFuture.thenCombine(), CompletableFuture.thenApplyAsync())</li><li>좋긴한데 이것도 싱글 밸류에 콜백 형태이다. -&gt; Collection에 넣고 CompletableTure를 할 수 없을까?</li></ul></li><li>Java NIO<ul><li>아직 풀지 못한 상황 ThreadPool Full</li><li>Circuit Breaker를 하다가 NonBlocking으로 해볼 수 있지 않을까?</li><li>NIO 이전: Native IO의 내용을 JVM Heap에 복사해서 IO</li><li>NIO 이후: Native IO를 그대로 사용</li></ul></li><li>Nonblocking I/O<ul><li>Servlet 3.0: AsyncServlet</li><li>Servlet 3.1: Nonblocking I/O</li></ul></li><li>Event Programming: CF의 공통점 complete로 깨워서 thenApply에서 처리한다. -&gt; 이벤트 드리븐 프로그래밍 방식 아닌가?<ul><li>이벤트가 발생한다는 전제를 깔고 프로그래밍</li><li>이벤트 세상에서 오히여 절차형으로 프로그래밍하는게 어렵다? -&gt; 이벤트 프로그래밍을 위해 잘 추상화된 API -&gt; Reactive Programming, JDK9 Flow</li><li>너무 공부할게 많다. -&gt; 범위를 좁혀보자. Java, Spring, Reactive -&gt; Reactive Stream</li><li>성능은? -&gt; backpressure valve (배압밸브?) -&gt; Circuit Breaker 패턴과 비슷 (Spring 5 MVC에 포함됨)</li></ul></li><li><a href="http://github.com/boojongmin/presentation" target="_blank" rel="noopener">http://github.com/boojongmin/presentation</a></li></ul><h2 id="Aync-Spring-발표자-이일민"><a href="#Aync-Spring-발표자-이일민" class="headerlink" title="Aync@Spring (발표자: 이일민)"></a>Aync@Spring (발표자: 이일민)</h2><ul><li>Spring 3.2 ~ 4.3에서 비동기 개발을 어떻게 할 것인가?</li><li>스프링 비동기 개발 기본지식은 뭐가 필요할까?<ul><li>자바 비동기 개발지식 (Java Thread …)</li><li>서블릿 비동기 개발 (Servlet 3.x …)</li><li>스프링 비동기 개발 (@Async, AsyncRestTemplate)</li></ul></li><li>동기/비동기를 언급할 때는<ul><li>뭐랑 뭐가 시간을 맞출 것인가를 기억하자.</li><li>Sync, Async <-> Blocking, Nonblocking</-></li><li>블로킹, 넌블로킹은 대상이 제한적임 (IO, Multi-Thread)</li><li>어떤 것에 대해 비동기 동기냐, 어떤 작업에 대해 블로킹, 넌블로킹이냐로 분리해서 생각해보자.</li></ul></li><li>@Async 사용 시 메소드 리턴타입이 String일 때는 null이 반환됨 -&gt; void, Future, ListenableFuture, CompletableFuture를 쓰자. -&gt; new AsyncResult()에 담아서 리턴하자.<ul><li>ListenableFuture: Spring 4.0 부터 추가됨 -&gt; 성공 결과와 오류(Exception) 결과를 따로 나눠서 받을 수 있음</li><li>CompletableFuture.CompletedFuture(result);</li><li>@Async를 아무런 설정없이 쓴다면 SimpleAsyncTaskExecutor를 사용함 -&gt; 쓰레드풀이 아니며 실전에서는 사용하지 말자. (단점: @Async를 쓸 때마다 스레드를 새로 만듬, 불릴 떄마다 스레드가 생기므로 1000번 호출하면 스레드 1000개가 생성된다고 보면 됨)</li><li>ThreadPoolExecutor는 처음엔 큐 사이즈만큼 스레드 실행을 대기하고 CoreSize 만큼 스레드를 생성한다.</li></ul></li><li>비동기 Spring@MVC<ul><li>Servlet 3.0 + Spring MVC 비동기 처리</li><li>타임아웃이 필요한 API에는 리턴타입으로 WebAsyncTask을 사용하자.</li><li>DeferredResult와 @Async를 결합한 것을 스프링이 만들어놓음 -&gt; 리턴타입을 그냥 ListenableFutre로 쓰면 똑같이 동작 -&gt; 콜백 지옥에 빠질 수 있음</li><li>CompletableFuture를 쓰자 -&gt; CompletionStage의 조합으로 콜백 체이닝으로 표현할 수 있음</li></ul></li><li>AsyncRestTemplate (비동기 논블로킹 API 호출)<ul><li>RestTemplate는 API 호출 시 블로킹 됨 -&gt; 쓰레드를 하나 잡고 있는 동기 방식</li><li>AsyncRestTemplate는 비동기, 논블로킹 방식으로 API 호출 가능</li><li>톰캣은 스레드 200개 밖에 안되는데 ART로 100개의 API 호출하면 스레드 100개가 생성된다. 낭비 아닌가? Nonblocking IO를 사용하진 않는다는 뜻</li><li>논블로킹 IO를 사용하는 AsyncRestTemplate를 사용해야 함 -&gt; Netty Http Client Factory를 사용하자. (100번 API 호출해도 쓰레드 1개로 처리)</li></ul></li><li>결론<ul><li>스프링의 모든 비동기 기술에는 ExecutorService의 세밀한 설정이 가능</li><li>모르고 쓰면 안됨! 설명할 수 있어야 하고 증명할 수 있어야 한다. (잘 모르고 쓰면 이게 주는 혜택도 뭔지 모를 수 있다.)</li><li>디버깅이 좀 힘들 수 있다.</li></ul></li></ul><h2 id="Spring-WebFlux-발표자-이일민"><a href="#Spring-WebFlux-발표자-이일민" class="headerlink" title="Spring WebFlux (발표자: 이일민)"></a>Spring WebFlux (발표자: 이일민)</h2><ul><li>Spring 5.0 WebFlux 소개와 개발 방법</li><li>스프링 리액티브 스택의 웹 파트 담당</li><li>왜 쓸까? 비동기-논블로킹 리액티브 개발에 사용 (CPU, 자원 낭비 없이 효율적인 고성능 웹앱 개발을 위해)</li><li>@MVC 스타일로 개발할 수 있지만, Annotation이 없는 웹개발을 진행하게 되며, 서블릿 스택과 API에서 탈피 (서블릿이 지원하는 컨터이너에서 동작은 하지만 서블릿을 쓰는건 아님)</li><li>서블릿 스레드를 빨리 반환하게 하는 방식으로 개선 가능</li><li>WebFlux만으로는 성능이 좋아지지 않는다. 동기-블로킹 방식의 환경일 때는.. -&gt; 그럼 개선사항은?<ul><li>데이터 액세스 리포지토리: JDK10 에서 AsyncJDBC를 지원할수도…, Spring Data JPA의 리턴타입을 @Async와 CompletableFuture로 사용, MongoDB, Cassandra, Redis를 사용하여 논블로킹 방식으로 데이터를 받아낼 수 있다. (DB부터 Web까지 논블로킹으로 동작하게 할 수 있다.)</li><li>HTTP API 호출: WebClient를 사용하며, 처음 쓸 떄는 람다로 타입이 가려진채로 쓰지말고 명시적으로 타입이 나온 형태로 코드를 작성해보자.</li></ul></li><li>혜택을 보려면… WebFlux + Reactive Repository, Reactive Remote API call + @Async Block IO을 지원해야 한다.</li></ul><h2 id="Spring-Cloud-Data-Flow-발표자-정윤진"><a href="#Spring-Cloud-Data-Flow-발표자-정윤진" class="headerlink" title="Spring Cloud Data Flow (발표자: 정윤진)"></a>Spring Cloud Data Flow (발표자: 정윤진)</h2><ul><li>데이터 마이크로서비스? Pipeline!</li><li>Greenplum (<a href="http://greenplum.org/" target="_blank" rel="noopener">http://greenplum.org/</a>)</li><li><a href="https://github.com/melofred/FraudDetection-Microservices.git" target="_blank" rel="noopener">https://github.com/melofred/FraudDetection-Microservices.git</a></li><li>SpringOne 할인코드: S1P200_Jeong</li></ul><h2 id="비동기-어플리케이션과-모니터링으로-밀당하기-발표자-이건희"><a href="#비동기-어플리케이션과-모니터링으로-밀당하기-발표자-이건희" class="headerlink" title="비동기 어플리케이션과 모니터링으로 밀당하기 (발표자: 이건희)"></a>비동기 어플리케이션과 모니터링으로 밀당하기 (발표자: 이건희)</h2><ul><li>비동기 어플리케이션 모니터링의 어려움과 어떻게 해결할지에 대해 얘기함</li><li>CPU는 그대로 응답시간이 올라가고 처리량이 떨어질떈? Restart -&gt; APM으로 성능 메트릭 &amp; 원인 찾기</li><li>BCI? Byte code instrumentation -&gt; premain(), ASM, Javassist</li><li>스레드 덤프를 뜨면 스레드 스택 트레이스의 시작 시간, 파라미터 정보를 보고 싶다. 어떻게? BCI<ul><li>스레드의 이름을 바꿈 -&gt; 해당 스레드 이름으로 로그를 찾으면되지 않을까?</li><li>MDC (Logging Framework)</li></ul></li><li>Block Multi-thread는 스레드덤프 이해하기가 쉽다. 그 반대는? asyncRestTemplate에 병목이 걸린 경우에는 스레드 덤프에도 안나옴<ul><li>어떻게 해결? Netflix의 사례를 살펴보자.</li><li>ThreadLocal을 통해 context 정보를 공유할 수 없음 -&gt; ThreadPool 같이 스레드 재사용 하는 환경에서는 쓸 수 없음</li><li>Runnable, Callable으로 해서 스레드 로컬로 this를 키값으로 저장</li><li>Lambda일 때는? 람다는 이너 클래스이긴 하지만 이너 클래스가 아니다. Lambda Proxy -&gt; 람다 바디는 private static method -&gt; 람다의 생성자는 어디며, this는 누구? LambdaMetaFactory!</li><li>ByteBuddy를 통해 LambdaMetaFactory를 transfrom 한다.</li></ul></li></ul><h2 id="그-외"><a href="#그-외" class="headerlink" title="그 외"></a>그 외</h2><ul><li>인텔리제이 &gt; Key Promoter: 버튼이나 메뉴 누르면 단축키 보여주는 플러그인</li><li>마젤란홀에서만 있었는데 앞사람 머리 때문에 프리젠테이션이 잘 안보인다..</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springcamp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scala 강의 요약</title>
      <link href="/2017/04/19/20170419-scala-lecture-review/"/>
      <url>/2017/04/19/20170419-scala-lecture-review/</url>
      
        <content type="html"><![CDATA[<h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ol><li>Scala 환경 구축하기</li><li>Scala 변수, 상수, 타입</li><li>함수와 메소드<ul><li>Lab 1</li></ul></li><li>제어구조</li><li>함수 정의<ul><li>Lab 2</li></ul></li><li>Arrays, Maps and Tuples<ul><li>Lab 3.1 Remove First Negative</li><li>Lab 3.2 Word Count</li><li>Lab 3.3 Grouping</li><li>Lab 3.4 Partitions and Zips</li></ul></li><li>Classes and Objects<ul><li>Lab 4.1 Time</li><li>Lab 4.2 Uniform Access</li><li>Lab 4.3 Uniform Access (con’t)</li><li>Lab 4.4 Operators</li></ul></li><li>Packages, Inheritnce, Traits</li><li>Functional Programming<ul><li>9.1 Function</li><li>9.2 Closures</li><li>9.3 Currying</li></ul></li><li>Pattern Matching</li><li>Case Class</li></ol><hr><h2 id="1-Scala-환경-구축"><a href="#1-Scala-환경-구축" class="headerlink" title="1. Scala 환경 구축"></a>1. Scala 환경 구축</h2><ul><li>JDK 1.8 설치</li><li>SBT 설치</li><li>Scala 설치</li><li>IntelliJ 설치 (스칼라가 처음라면 Scala IDE for Eclise)</li></ul><h2 id="2-Scala-변수-상수-타입"><a href="#2-Scala-변수-상수-타입" class="headerlink" title="2. Scala 변수, 상수, 타입"></a>2. Scala 변수, 상수, 타입</h2><ul><li>변수는 var</li><li>상수는 val로 선언</li><li>Scala에서 데이터 타입의 종류<ul><li>자바와 비슷 Byte, Short, Int, Long, Float, Double, Char, String, Char, Boolean</li><li>단 자바에서는 없는 Unit, Null 이라는 타입도 있음</li></ul></li></ul><pre><code>object Lesson1 {  val answer = 8 * 5 + 2  var greeting: String = &quot;Hello World&quot;}</code></pre><pre><code>object Lesson2 {  1.to(10) &#x2F;&#x2F; 1 ~ 10까지 값을 갖고 있는 배열이 만들어짐  &quot;Hello&quot;.intersect(&quot;World&quot;) &#x2F;&#x2F; lo  &quot;Hello&quot; intersect &quot;World&quot;  1.+(10)  1 + 10  var i = 0  &#x2F;&#x2F; i++ 이거는 안됨  i += 1}</code></pre><h2 id="3-함수와-메소드"><a href="#3-함수와-메소드" class="headerlink" title="3. 함수와 메소드"></a>3. 함수와 메소드</h2><ul><li>파라미터 없는 함수 호출은 다음과 같다.<pre><code>&quot;hello&quot;.distinct</code></pre></li><li>스트링에 아래와 같이 함수 이름 없이 호출하면 apply 함수가 실행 되는 것과 같음<pre><code>&quot;Hello&quot;.(4)&quot;Hello&quot;.apply(4)&quot;Hello&quot;(4)</code></pre></li></ul><h4 id="Lab-1"><a href="#Lab-1" class="headerlink" title="Lab 1"></a>Lab 1</h4><pre><code>object Lesson4 {  import scala.math._  sqrt(10)  1.to(10).map(sqrt(_))  6.*(7)}</code></pre><h2 id="4-제어구조"><a href="#4-제어구조" class="headerlink" title="4. 제어구조"></a>4. 제어구조</h2><ul><li>if 표현식은 값을 반환할 수 있다.<pre><code>if (x &gt; 0) 1 else -1if (x &gt; 0) &quot;positive&quot; else -1 &#x2F;&#x2F; Type is Anyif (x &gt; 0) 1 &#x2F;&#x2F; Missing else... else일 때는 Unit을 반환if (x &gt; 0) 1 else () &#x2F;&#x2F; 위 수식과 이 수식은 같음</code></pre></li><li>변수나 상수 선언 시 아래와 같이 스코프 지정이 가능<pre><code>val distance = {  import scala.math._  val dx = x - x0  val dy = y - y0  sqrt(dx * dx + dy * dy)}</code></pre></li><li>기본적인 For Loop<pre><code>for (i &lt;- 1 to n)for (ch &lt;- &quot;Hello&quot;)for (i &lt;- 1 to 3; j &lt;- 1 to 3) print((10 * i + j) + &quot; &quot;) &#x2F;&#x2F; multiple generator</code></pre></li><li>For Loop Guard<pre><code>for (ch &lt;- &quot;Hello&quot;) &#x2F;&#x2F; 한 글자씩 Loopfor (i &lt;- 1 to 3; j &lt;- 1 to 3 if i != j) print((10 * i + j) + &quot; &quot;)for (i &lt;- 1 to 10) yield i % 3</code></pre></li></ul><h2 id="5-함수-정의"><a href="#5-함수-정의" class="headerlink" title="5. 함수 정의"></a>5. 함수 정의</h2><ul><li>함수 정의 시 함수 몸통 앞에 ‘=’를 붙이고 안붙이고 차이는 뭘까?<ul><li>반환값이 있을 때 ‘=’를 붙인다.</li><li>반환값이 없을 때는 ‘=’를 붙이지 않는다.</li></ul></li></ul><pre><code>def abs(x: Double) = if (x &gt;= 0) x else -xdef fac(n: Int): Int = {  if (n &lt;= 0) 1 else n * fac(n - 1)}def box(s: String) {  val border = &quot;-&quot; * s.length + &quot;--\n&quot;  println(border + &quot;|&quot; + s + &quot;|\n&quot; + border)}</code></pre><ul><li><p>아래와 같이 반환값이 있는 함수를 작성하고 싶은데 =를 안붙이면 컴파일 오류가 발생한다.</p><pre><code>def fac(n: Int) {  var r = 1  for (i &lt;- 1 to n) r = r * i  r}</code></pre></li><li><p>Named argument</p><pre><code>def decorate(str: String, left: String = &quot;[&quot;, right: String = &quot;]&quot;) = left + str + rightdecorate(&quot;Hello&quot;, right = &quot;]&lt;&lt;&lt;&quot;) &#x2F;&#x2F; [Hello]&lt;&lt;&lt;</code></pre></li><li><p>다항 파라미터는 파라미터 데이터타입 뒤에 *을 붙여준다.</p><pre><code>def sum(args: Int*) = {  var result = 0  for (arg &lt;- args) result += arg  result}</code></pre></li><li><p>위 메소드의 파라미터에 Seq[Int]를 다항 파라미터로 변환하여 넣고 싶을 경우 아래와 같이 한다.</p><pre><code>val s = sum(1 to 5: _*)&#x2F;&#x2F; 1 to 5의 반환값은 Seq[Int]</code></pre></li><li><p>What is that _? _ is joker</p></li></ul><h4 id="Lab-2-함수-정의-연습하기"><a href="#Lab-2-함수-정의-연습하기" class="headerlink" title="Lab 2. 함수 정의 연습하기"></a>Lab 2. 함수 정의 연습하기</h4><p>계속…</p><h2 id="6-Array-Maps-and-Tuples"><a href="#6-Array-Maps-and-Tuples" class="headerlink" title="6. Array, Maps and Tuples"></a>6. Array, Maps and Tuples</h2><ul><li>Array.sum</li><li>ArrayBuffer.max</li><li>ArrayBuffer.sorted</li><li>Array.reverse</li><li>Array.mkString() // Array의 내용물을 스트링으로 출력 (예쁘게)</li></ul><pre><code>val c = Array(2,3,5,7,8,11)                     &#x2F;&#x2F;&gt; c  : Array[Int] = Array(2, 3, 5, 7, 8, 11)val result = for (elem &lt;- c if elem % 2 != 0) yield 2 % elem                                                &#x2F;&#x2F;&gt; result  : Array[Int] = Array(2, 2, 2, 2)val mySong = ArrayBuffer(&quot;Mary&quot;, &quot;had&quot;, &quot;a&quot;, &quot;little&quot;, &quot;lamb&quot;)                                                &#x2F;&#x2F;&gt; mySong  : scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer(Mary, h                                                &#x2F;&#x2F;| ad, a, little, lamb)mySong.max                                      &#x2F;&#x2F;&gt; res11: String = littlemySong.sorted                                   &#x2F;&#x2F;&gt; res12: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer(Mary, a, h                                                &#x2F;&#x2F;| ad, lamb, little)Array(1,7,4,5).sorted                           &#x2F;&#x2F;&gt; res13: Array[Int] = Array(1, 4, 5, 7)Array(1,7,4,5).reverse                          &#x2F;&#x2F;&gt; res14: Array[Int] = Array(5, 4, 7, 1)Array(1,2,3).mkString(&quot;[&quot;, &quot;, &quot;, &quot;]&quot;)           &#x2F;&#x2F;&gt; res15: String = [1, 2, 3]</code></pre><h3 id="6-1-Maps"><a href="#6-1-Maps" class="headerlink" title="6.1 Maps"></a>6.1 Maps</h3><ul><li>Map.getOrElse 메소드는 key에 해당하는 value를 못찾을 경우 기본 값을 반환한다.</li><li>updating map을 하고 싶을 땐 그냥 Map(“Bob”) = 20</li><li>append와 remove는 연산자 메소드를 통해서 가능 (+=, -=)</li></ul><pre><code> val scores = Map(&quot;Alice&quot; -&gt; 20, &quot;Bob&quot; -&gt; 10, &quot;Cindy&quot; -&gt; 8)                                                 &#x2F;&#x2F;&gt; scores  : scala.collection.immutable.Map[String,Int] = Map(Alice -&gt; 20, Bob -                                                 &#x2F;&#x2F;| &gt; 10, Cindy -&gt; 8) scores(&quot;Alice&quot;) = 291 &#x2F;&#x2F; immutable map이라서 value 값을 바꿀 수 없음 val mscores = scala.collection.mutable.Map(&quot;Alice&quot; -&gt; 10)                                                 &#x2F;&#x2F;&gt; mscores  : scala.collection.mutable.Map[String,Int] = Map(Alice -&gt; 10) val bobsScore = scores(&quot;Bob&quot;)                   &#x2F;&#x2F;&gt; bobsScore  : Int = 10 val bogsScore = scores(&quot;Bog&quot;)                   &#x2F;&#x2F;&gt; java.util.NoSuchElementException: key not found: Bog                                                 &#x2F;&#x2F;| at scala.collection.MapLike$class.default(MapLike.scala:228)                                                 &#x2F;&#x2F;| at scala.collection.AbstractMap.default(Map.scala:59)                                                 &#x2F;&#x2F;| at scala.collection.MapLike$class.apply(MapLike.scala:141)                                                 &#x2F;&#x2F;| at scala.collection.AbstractMap.apply(Map.scala:59)                                                 &#x2F;&#x2F;| at Lesson5$$anonfun$main$1.apply$mcV$sp(Lesson5.scala:6)                                                 &#x2F;&#x2F;| at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe                                                 &#x2F;&#x2F;| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)                                                 &#x2F;&#x2F;| at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W                                                 &#x2F;&#x2F;| orksheetSupport.scala:65)                                                 &#x2F;&#x2F;| at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor                                                 &#x2F;&#x2F;| ksheetSupport.scala:75)                                                 &#x2F;&#x2F;| at Lesson5$.main(Lesson5.scala:1)                                                 &#x2F;&#x2F;| at Lesson5.main(Lesson5.scala) val bogsDefaultScore = scores.getOrElse(&quot;Bog&quot;, 0)                                                 &#x2F;&#x2F;&gt; bogsDefaultScore  : Int = 0val mbogScore = mscores.contains(&quot;Bog&quot;)   &#x2F;&#x2F;&gt; mbogScore  : Boolean = falsemscores(&quot;Alice&quot;) = 100mscores                                   &#x2F;&#x2F;&gt; res0: scala.collection.mutable.Map[String,Int] = Map(Alice -&gt; 100)val newScores2 = scores + (&quot;Fred&quot; -&gt; 91)  &#x2F;&#x2F;&gt; newScores2  : scala.collection.immutable.Map[String,Int] = Map(Alice -&gt; 20,                                                  &#x2F;&#x2F;| Bob -&gt; 10, Cindy -&gt; 8, Fred -&gt; 91)val newScores3 = newScores2 - &quot;Alice&quot;     &#x2F;&#x2F;&gt; newScores3  : scala.collection.immutable.Map[String,Int] = Map(Bob -&gt; 10, Ci                                                 &#x2F;&#x2F;| ndy -&gt; 8, Fred -&gt; 91)for ((k, v) &lt;- scores) println(k + &quot; has score &quot; + v)                                                 &#x2F;&#x2F;&gt; Alice has score 20                                                 &#x2F;&#x2F;| Bob has score 10                                                 &#x2F;&#x2F;| Cindy has score 8for ((k, v) &lt;- scores) yield (v, k)       &#x2F;&#x2F;&gt; res1: scala.collection.immutable.Map[Int,String] = Map(20 -&gt; Alice, 10 -&gt; Bo                                                 &#x2F;&#x2F;| b, 8 -&gt; Cindy)scores.keySet                             &#x2F;&#x2F;&gt; res2: scala.collection.immutable.Set[String] = Set(Alice, Bob, Cindy)scores.values                             &#x2F;&#x2F;&gt; res3: Iterable[Int] = MapLike(20, 10, 8)</code></pre><h3 id="6-2-Tuples"><a href="#6-2-Tuples" class="headerlink" title="6.2 Tuples"></a>6.2 Tuples</h3><ul><li>Map과 비슷하지만 서로다른 자료형의 데이터를 묶을 수 있음<pre><code>val myTuples = (1, 3.14, &quot;Fred&quot;)val pie = myTuples._2val (_, second, third) = t</code></pre></li></ul><h4 id="Lab-3-1-Remove-First-Negative"><a href="#Lab-3-1-Remove-First-Negative" class="headerlink" title="Lab 3.1 Remove First Negative"></a>Lab 3.1 Remove First Negative</h4><ul><li>ArrayBuffer가 주어졌을 때 양수 값은 모두 출력 &amp; 첫 번째 음수만 출력하고 나머지 음수들은 제거하는 함수 작성</li></ul><pre><code>val myArray = ArrayBuffer(3,6,7,3,-4,8,-3,-5,6,7,-2,9,-1)def myRmNeg(targetArray: ArrayBuffer[Int]): ArrayBuffer[Int] = { var index = 0 var limit = myArray.length var isNegativeFound: Boolean = false val newMyArray = ArrayBuffer[Int]() while(index &lt; limit) { val num = targetArray(index) if (num &lt; 0) { if (!isNegativeFound) { isNegativeFound = true newMyArray += num } } else newMyArray += num  index += 1 } newMyArray}                                               &#x2F;&#x2F;&gt; myRmNeg: (targetArray: scala.collection.mutable.ArrayBuffer[Int])scala.colle                                                &#x2F;&#x2F;| ction.mutable.ArrayBuffer[Int]def myRmNeg2(targetArray: ArrayBuffer[Int]): ArrayBuffer[Int] = {val targetArraySize: Int = targetArray.length&#x2F;&#x2F; 음수를 가진 인덱스 번호만 끄집어 낸다.var negativeIndexArray = for (index &lt;- 0 until targetArraySize if targetArray(index) &lt; 0) yield indexnegativeIndexArray = negativeIndexArray.drop(1).reverseval filterdArray = for (index &lt;- 0 until targetArray.length if !negativeIndexArray.contains(index)) yield targetArray(index)ArrayBuffer[Int]() ++= filterdArray}                                               &#x2F;&#x2F;&gt; myRmNeg2: (targetArray: scala.collection.mutable.ArrayBuffer[Int])scala.col                                                &#x2F;&#x2F;| lection.mutable.ArrayBuffer[Int]</code></pre><h4 id="Lab-3-2-Word-Count"><a href="#Lab-3-2-Word-Count" class="headerlink" title="Lab 3.2 Word Count"></a>Lab 3.2 Word Count</h4><ul><li>파일을 읽어서 특정 단어가 몇 번 나왔는지 세보는 코드 작성하기<br>보<pre><code>def wordCount(filename: String): scala.collection.mutable.Map[String, Int] = {  import scala.io.Source  val count = scala.collection.mutable.Map[String, Int]()    for (line &lt;- Source.fromFile(filename).getLines) {    for (word &lt;- line.split(&quot; &quot;)) {    count(word) = count.getOrElse(word, 0) + 1    }  }  count}                                         &#x2F;&#x2F;&gt; wordCount: (filename: String)scala.collection.mutable.Map[String,Int]def wordCountWithImmutableMap(filename: String): scala.collection.immutable.Map[String, Int] = {import scala.io.Source  var countMap = scala.collection.immutable.Map[String, Int]()    for (line &lt;- Source.fromFile(filename).getLines) {    for (word &lt;- line.split(&quot; &quot;)) {    val wordCount = countMap.getOrElse(word, 0) + 1    countMap += (word -&gt; wordCount)    }  }  countMap}                                         &#x2F;&#x2F;&gt; wordCountWithImmutableMap: (filename: String)scala.collection.immutable.Map[                                                 &#x2F;&#x2F;| String,Int]val filename = &quot;C:\\Users\\Zotac023\\Desktop\\SCALA\\alice.txt&quot;                                                 &#x2F;&#x2F;&gt; filename  : String = C:\Users\Zotac023\Desktop\SCALA\alice.txtval countMap = wordCount(filename)        &#x2F;&#x2F;&gt; countMap  : scala.collection.mutable.Map[String,Int] = Map(talk: -&gt; 1, passi                                                 &#x2F;&#x2F;| on, -&gt; 2, Visit -&gt; 1, etext92 -&gt; 1, follow -&gt; 1, OTHERWISE -&gt; 1, provisions                                                  &#x2F;&#x2F;| -&gt; 1, machines, -&gt; 1, sighing -&gt; 2, is--&quot;Oh, -&gt; 1, sister -&gt; 5, curled -&gt; 2,                                                 &#x2F;&#x2F;|  digging -&gt; 2, absurd, -&gt; 1, mouths. -&gt; 1, `When -&gt; 3, rose-tree, -&gt; 2, plea                                                 &#x2F;&#x2F;| sant -&gt; 1, can--&#39; -&gt; 1, flapper -&gt; 1, dream. -&gt; 1, morning, -&gt; 2, requires -                                                 &#x2F;&#x2F;| &gt; 1, worm. -&gt; 1, `Well! -&gt; 2, lessons -&gt; 4, Files -&gt; 1, `Boots -&gt; 1, `we -&gt;                                                  &#x2F;&#x2F;| 3, expense -&gt; 1, Shakespeare, -&gt; 1, officers, -&gt; 1, Long -&gt; 1, RED -&gt; 1, shr                                                 &#x2F;&#x2F;| ink -&gt; 1, Caterpillar, -&gt; 2, nasty, -&gt; 1, intellectual -&gt; 1, hard -&gt; 8, [Ori                                                 &#x2F;&#x2F;| ginally -&gt; 1, welcome -&gt; 1, off.&#39; -&gt; 1, RIGHT -&gt; 1, Rabbit&#39;s -&gt; 3, carry -&gt;                                                  &#x2F;&#x2F;| 1, opening -&gt; 3, matter,&#39; -&gt; 1, (luckily -&gt; 1, chimney!&#39; -&gt; 1, `As -&gt; 3, jur                                                 &#x2F;&#x2F;| or -&gt; 1, [get -&gt; 1, grand, -&gt; 1, did!&#39; -&gt; 1, medium -&gt; 3, asking! -&gt; 1, gay                                                  &#x2F;&#x2F;| -&gt; 1, bawled -&gt; 1, advance -&gt; 2, `YOU&#39;D -&gt; 1, THAT -&gt; 6, Free -&gt; 1, thunders                                                 &#x2F;&#x2F;| torm. -&gt; 1, mustard-mine                                                 &#x2F;&#x2F;| Output exceeds cutoff limit.val countMap2 = wordCountWithImmutableMap(filename)                                                 &#x2F;&#x2F;&gt; countMap2  : scala.collection.immutable.Map[String,Int] = Map(herself. -&gt; 8,                                                 &#x2F;&#x2F;|  Hatter -&gt; 24, sneezed -&gt; 1, forgotten -&gt; 6, of. -&gt; 1, Rabbit-Hole -&gt; 1, rat                                                 &#x2F;&#x2F;| e -&gt; 4, pepper -&gt; 5, submitted -&gt; 1, NOT!&#39; -&gt; 1, `Fifteenth,&#39; -&gt; 1, like!&#39; -                                                 &#x2F;&#x2F;| &gt; 1, remarked -&gt; 1, lost: -&gt; 1, croquet.&#39; -&gt; 2, est -&gt; 1, room!&#39; -&gt; 2, sighi                                                 &#x2F;&#x2F;| ng. -&gt; 1, Bill!&#39; -&gt; 1, prizes.&#39; -&gt; 1, (a -&gt; 1, accident -&gt; 1, Cat,&#39; -&gt; 1, be                                                 &#x2F;&#x2F;| !&#39; -&gt; 1, camomile -&gt; 1, ftp -&gt; 2, bats, -&gt; 1, conversations -&gt; 1, Down, -&gt; 2                                                 &#x2F;&#x2F;| , `Why -&gt; 7, way? -&gt; 1, cakes,&#39; -&gt; 1, `Nonsense!&#39; -&gt; 1, used -&gt; 14, eye -&gt; 4                                                 &#x2F;&#x2F;| , whisper.) -&gt; 1, PUNITIVE -&gt; 1, Owl -&gt; 2, pleased. -&gt; 1, up.&#39; -&gt; 2, then?&#39;                                                  &#x2F;&#x2F;| -&gt; 1, `Keep -&gt; 1, instance, -&gt; 4, READ -&gt; 1, `Dear, -&gt; 1, $4 -&gt; 1, IN -&gt; 2,                                                  &#x2F;&#x2F;| way?&#39;, -&gt; 1, II -&gt; 1, Still -&gt; 1, conversion -&gt; 1, Please -&gt; 2, At -&gt; 8, dee                                                 &#x2F;&#x2F;| ply. -&gt; 1, &quot;Let -&gt; 1, shelves -&gt; 1, locked; -&gt; 1, beautiful -&gt; 8, mustard-mi                                                 &#x2F;&#x2F;| ne -&gt; 1, leaders, -&gt; 1, `Don&#39;t -&gt; 4, does. -&gt; 1, timidly -&gt; 2, altogether -&gt;                                                 &#x2F;&#x2F;|  1, writing -&gt; 4, Duches                                                 &#x2F;&#x2F;| Output exceeds cutoff limit.</code></pre></li></ul><h4 id="Lab-3-3-Grouping"><a href="#Lab-3-3-Grouping" class="headerlink" title="Lab 3.3 Grouping"></a>Lab 3.3 Grouping</h4><ul><li>문자열 배열에서 길이가 같은 문자열끼리 묶는 코드 작성하기</li></ul><pre><code> val words = Array(&quot;Mary&quot;, &quot;had&quot;, &quot;a&quot;, &quot;little&quot;, &quot;lamb&quot;, &quot;its&quot;, &quot;fleece&quot;, &quot;was&quot;, &quot;white&quot;, &quot;as&quot;, &quot;snow&quot;, &quot;and&quot;, &quot;everywhere&quot;, &quot;that&quot;, &quot;Mary&quot;, &quot;went&quot;, &quot;the&quot;, &quot;lamb&quot;, &quot;was&quot;, &quot;sure&quot;, &quot;to&quot;, &quot;go&quot;)                                                 &#x2F;&#x2F;&gt; words  : Array[String] = Array(Mary, had, a, little, lamb, its, fleece, was,                                                 &#x2F;&#x2F;|  white, as, snow, and, everywhere, that, Mary, went, the, lamb, was, sure, t                                                 &#x2F;&#x2F;| o, go)words.groupBy(_.length())                 &#x2F;&#x2F;&gt; res0: scala.collection.immutable.Map[Int,Array[String]] = Map(5 -&gt; Array(whi                                                 &#x2F;&#x2F;| te), 10 -&gt; Array(everywhere), 1 -&gt; Array(a), 6 -&gt; Array(little, fleece), 2 -                                                 &#x2F;&#x2F;| &gt; Array(as, to, go), 3 -&gt; Array(had, its, was, and, the, was), 4 -&gt; Array(Ma                                                 &#x2F;&#x2F;| ry, lamb, snow, that, Mary, went, lamb, sure))</code></pre><h4 id="Lab-3-4-Partitions-and-Zips"><a href="#Lab-3-4-Partitions-and-Zips" class="headerlink" title="Lab 3.4 Partitions and Zips"></a>Lab 3.4 Partitions and Zips</h4><ul><li>Lab 3.1 문제를 Array의 partition 메소드를 사용해서 풀기</li></ul><pre><code> &quot;New York&quot;.partition(_.isUpper)                 &#x2F;&#x2F;&gt; res0: (String, String) = (NY,ew ork)  val symbols = Array(&quot;&lt;&quot;, &quot;-&quot;, &quot;&gt;&quot;)              &#x2F;&#x2F;&gt; symbols  : Array[String] = Array(&lt;, -, &gt;) val counts = Array(2, 10, 2)                    &#x2F;&#x2F;&gt; counts  : Array[Int] = Array(2, 10, 2) val pairs = symbols.zip(counts)                 &#x2F;&#x2F;&gt; pairs  : Array[(String, Int)] = Array((&lt;,2), (-,10), (&gt;,2))  import scala.collection.mutable.ArrayBuffer val myArray = ArrayBuffer(3,6,7,3,-4,8,-3,-5,6,7,-2,9,-1)                                                 &#x2F;&#x2F;&gt; myArray  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 6, 7,                                                  &#x2F;&#x2F;| 3, -4, 8, -3, -5, 6, 7, -2, 9, -1)  val (positiveArray, negativeArray) = myArray.partition(_ &gt; 0)                                                 &#x2F;&#x2F;&gt; positiveArray  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3,                                                  &#x2F;&#x2F;| 6, 7, 3, 8, 6, 7, 9)                                                 &#x2F;&#x2F;| negativeArray  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(-4,                                                 &#x2F;&#x2F;|  -3, -5, -2, -1)val answer = positiveArray                &#x2F;&#x2F;&gt; answer  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 6, 7, 3                                                 &#x2F;&#x2F;| , 8, 6, 7, 9)answer += negativeArray(0)                &#x2F;&#x2F;&gt; res1: Lesson9.answer.type = ArrayBuffer(3, 6, 7, 3, 8, 6, 7, 9, -4)</code></pre><h2 id="7-Class-Object-Companion-Object"><a href="#7-Class-Object-Companion-Object" class="headerlink" title="7. Class, Object, Companion Object"></a>7. Class, Object, Companion Object</h2><ul><li>Class의 멤버 변수를 val로 선언하면 immutable, var로 선언하면 mutable</li><li>val or var로 했느냐에 따라 getter, setter를 쓸 수 있음</li></ul><pre><code>class myString(val jString: String) {private var extraData = &quot;&quot;override def toString = f&quot;${jString}${extraData}&quot;}object myString {def apply(base: String, extras: String) = {val s = new myString(base)s.extraData = extrass}def apply(base: String) = new myString(base)}println(myString(&quot;hello&quot;, &quot;world&quot;))             &#x2F;&#x2F;&gt; helloworldprintln(myString(&quot;Goodbye&quot;))                    &#x2F;&#x2F;&gt; Goodbye</code></pre><pre><code>class Pizza(var crustSize: Int, var crustType: String) {def this(crustSize: Int) {this(crustSize, Pizza.DEFAULT_CRUST_TYPE)}def this(crustType: String) {this(Pizza.DEFAULT_CRUST_SIZE, crustType)}def this() {this(Pizza.DEFAULT_CRUST_SIZE, Pizza.DEFAULT_CRUST_TYPE)}override def toString = s&quot;A $crustSize inch pizza with a $crustType crust&quot;}object Pizza {val DEFAULT_CRUST_SIZE = 12val DEFAULT_CRUST_TYPE = &quot;THIN&quot;}val pz1 = new Pizza(14, &quot;THICK&quot;)                &#x2F;&#x2F;&gt; pz1  : Lesson10.Pizza = A 14 inch pizza with a THICK crustval pz2 = new Pizza(16)                         &#x2F;&#x2F;&gt; pz2  : Lesson10.Pizza = A 16 inch pizza with a THIN crust</code></pre><pre><code>object Accounts {private var lastNumber = 0def newUniqueNumber() = {lastNumber += 1lastNumber}}Accounts                                        &#x2F;&#x2F;&gt; res0: Lesson10.Accounts.type = Lesson10$$anonfun$main$1$Accounts$2$@68837a7                                                &#x2F;&#x2F;| 7Accounts.newUniqueNumber()                      &#x2F;&#x2F;&gt; res1: Int = 1Accounts.newUniqueNumber()                      &#x2F;&#x2F;&gt; res2: Int = 2Accounts.newUniqueNumber()                      &#x2F;&#x2F;&gt; res3: Int = 3Accounts.newUniqueNumber()                      &#x2F;&#x2F;&gt; res4: Int = 4Accounts.newUniqueNumber()                      &#x2F;&#x2F;&gt; res5: Int = 5</code></pre><ul><li><p>Scala App 만들기</p><pre><code>object HelloWorld extends App {  println(&quot;Hello, world!&quot;)}</code></pre></li><li><p>Uniform Access Method</p><ul><li>클래스에 멤버변수로 선언했지만 해당 멤버 변수와 동일한 메소드를 선언했을 경우 해당 메소드가 호출됨</li></ul></li></ul><pre><code>class Point(...) {  private val r = ...  private val theta = ...  def x = r * cos(theta)  &#x2F;&#x2F; 여기서 x를 유니폼 엑세스 메소드 라고 부르며, 이 메소드는 인자가 없다.}</code></pre><ul><li>scala에서 object 키워드가 붙은 코드는 싱글톤 객체를 말하며, 멤버 메소드는 static method이다.</li><li>Companion Object란 class와 object의 이름이 같은 것을 말하며, 서로간에 private feature에 접근이 가능하다.<ul><li>apply 메소드를 Companion Object에 선언하기도 한다.</li></ul></li></ul><h4 id="Lab-4-1-Time"><a href="#Lab-4-1-Time" class="headerlink" title="Lab 4.1 Time"></a>Lab 4.1 Time</h4><ul><li>시간을 나타내는 클래스 작성하기</li></ul><pre><code>class Time(val hours: Int = 0, var minutes: Int = 0) { if (hours &lt; 0 || hours &gt;= 24 || minutes &lt; 0 || minutes &gt;= 60) {throw new IllegalArgumentException(&quot;hour or minute format incorrect&quot;)}def before(other: Time): Boolean = {val thisTimeMinutes = this.toMinutes()val otherTimeMinutes = other.toMinutes()thisTimeMinutes &lt; otherTimeMinutes} override def toString = f&quot;${hours}:${minutes}&quot;def toMinutes(): Int = this.hours * Time.ONE_HOUR_MINUTES + this.minutes}object Time {val ONE_HOUR_MINUTES = 60def apply(hours: Int, minutes: Int) = new Time(hours, minutes)def apply(hours: Int) = new Time(hours)def apply(hours: Unit, minutes: Int) = new Time(0, minutes)}println(Time(12))println(Time(11, 24).before(Time(16, 11)))val t1 = Time(12, 30)t1.minutes = -100</code></pre><h4 id="Lab-4-2-Uniform-Access"><a href="#Lab-4-2-Uniform-Access" class="headerlink" title="Lab 4.2 Uniform Access"></a>Lab 4.2 Uniform Access</h4><ul><li>시간 클래스의 멤버를 val로 선언한 뒤 해당 멤버 변수는 uniform access method로 접근하기 (class의 멤버 변수에 아무것도 안쓰면 자동으로 val로 선언됨)</li><li>이렇게 하면 getter 메소드를 정의한 것과 비슷한 효과를 볼 수 있다.</li><li>아래 코드와 같이 멤버 변수 uniform access method를 통해 값을 변경하는 것은 컴파일 오류가 발생한다.</li></ul><pre><code>class Time2(h: Int, m: Int) {private val minutesSinceMidnight = h * 60 + mdef hours = minutesSinceMidnight &#x2F; 60def minutes = minutesSinceMidnight % 60}object Time2 {}val t2 = new Time2(12, 45)                      &#x2F;&#x2F;&gt; t2  : Lesson12.Time2 = Lesson12$Time2@61e4705b&#x2F;&#x2F; t2.minutes = 100t2.hours                                        &#x2F;&#x2F;&gt; res0: Int = 12t2.minutes                                      &#x2F;&#x2F;&gt; res1: Int = 45</code></pre><h4 id="Lab-4-3-Uniform-Access-con’t"><a href="#Lab-4-3-Uniform-Access-con’t" class="headerlink" title="Lab 4.3 Uniform Access (con’t)"></a>Lab 4.3 Uniform Access (con’t)</h4><ul><li>위 문제에서 uniform access method를 통해서 setter 구현해보기</li><li>아래 코드를 보면 메소드명 바로 뒤에 ‘_=’가 붙는 것을 볼 수가 있는데 이것은 ‘변수명 =’과 같은 효과를 발휘한다.</li><li>또한 setter uniform access method를 구현하려면 앞에서 작성했던 getter에 해당하는 uniform access method가 먼저 선언되어 있어야 한다.</li></ul><pre><code>class Time3(h: Int, m: Int) {private var minutesSinceMidnight = h * 60 + mdef hours = minutesSinceMidnight &#x2F; 60def minutes = minutesSinceMidnight % 60def hours_=(newHours: Int) {if (newHours &lt; 0 || newHours &gt;= 24) {throw new IllegalArgumentException(&quot;hours is invalid&quot;)}this.minutesSinceMidnight = newHours * 60 + this.minutes}def minutes_=(newMinutes: Int) {if (newMinutes &lt; 0 || newMinutes &gt;= 60) {throw new IllegalArgumentException(&quot;minutes is invalid&quot;)}this.minutesSinceMidnight = this.hours * 60 + newMinutes}}val t3 = new Time3(12, 45)t3.hours = 19t3.minutes = 13t3.hourst3.minutes</code></pre><h4 id="Lab-4-4-Operators"><a href="#Lab-4-4-Operators" class="headerlink" title="Lab 4.4 Operators"></a>Lab 4.4 Operators</h4><pre><code>object Time4 {def apply(hours: Int = 0, minutes: Int = 0) = new Time4(hours, minutes)}class Time4(h: Int = 0, m: Int = 0) {private var minutesSinceMidnight = h * 60 + mif (h &lt; 0 || h &gt; 23) throw new IllegalArgumentException(&quot;hours is invalid&quot;)if (m &lt; 0 || m &gt; 60) throw new IllegalArgumentException(&quot;minutes is invalid&quot;)def hours = this.minutesSinceMidnight &#x2F; 60def minutes = this.minutesSinceMidnight % 60def hours_=(newHours: Int) {if (newHours &lt; 0 || newHours &gt; 23) throw new IllegalArgumentException(&quot;hours is invalid&quot;)else this.minutesSinceMidnight = newHours * 60 + this.minutes}def minutes_=(newMinutes: Int) {if (newMinutes &lt; 0 || newMinutes &gt; 59) throw new IllegalArgumentException(&quot;minutes is invalid&quot;)else this.minutesSinceMidnight = this.hours * 60 + newMinutes}def &lt;(other: Time4): Boolean = this.minutesSinceMidnight &lt; other.minutesSinceMidnightoverride def toString() = f&quot;${this.hours}:${this.minutes}&quot;}val t4 = new Time4(12, 45)                      &#x2F;&#x2F;&gt; t4  : Lesson14.Time4 = 12:45t4.hours = 17t4.minutes = 23t4                                              &#x2F;&#x2F;&gt; res0: Lesson14.Time4 = 17:23t4.hours                                        &#x2F;&#x2F;&gt; res1: Int = 17t4.minutes                                      &#x2F;&#x2F;&gt; res2: Int = 23println(Time4(11, 24) &lt; Time4(16, 11))          &#x2F;&#x2F;&gt; true</code></pre><h2 id="9-Functional-Programming"><a href="#9-Functional-Programming" class="headerlink" title="9. Functional Programming"></a>9. Functional Programming</h2><h3 id="9-1-Function"><a href="#9-1-Function" class="headerlink" title="9.1 Function"></a>9.1 Function</h3><ul><li>Functions as value</li><li>Anonymous Functions</li><li>Functions with Function Parameters</li><li>Functions that Produce Functions</li><li>Parameter Inference</li><li>Map, Filter, Reduce</li></ul><h3 id="9-2-Closures"><a href="#9-2-Closures" class="headerlink" title="9.2 Closures"></a>9.2 Closures</h3><ul><li>양자가 얽힌 것 처럼 함수도 얽힐 수 있다.</li><li><p>클로저를 사용하면 함수가 필요한 정보를 어딘가에서 정의해서 받아 사용할 수 있다.</p><pre><code>package otherscope {  class Foo {    def exec(f: (String) =&gt; Unit, name: String) = {      f(name)    }  }}object HelloWorld extends App {  var hello = &quot;Hello&quot;    def sayHello(name: String) = {    println(s&quot;$hello, $name&quot;)  }    val foo = new otherscope.Foo()  foo.exec(sayHello, &quot;Lee&quot;)    hello = &quot;안녕하세요&quot;  foo.exec(sayHello, &quot;Lee&quot;)}</code></pre></li><li><p>위 코드를 보면 hello라는 변수가 다른 스코프에서 실행되더라도 hello 값을 참조하여 쓰고 있다. (런타임 시 클로저 변수가 참조됨)</p></li></ul><h3 id="9-3-Currying"><a href="#9-3-Currying" class="headerlink" title="9.3 Currying"></a>9.3 Currying</h3><ul><li>함수의 반환값이 함수일 때 해당 함수 호출의 호출을 바로 하는 것<pre><code>def mul(x: Int, y: Int) = x * y                 &#x2F;&#x2F;&gt; mul: (x: Int, y: Int)Intdef mulOneAtATime(x: Int) = (y: Int) =&gt; x * y   &#x2F;&#x2F;&gt; mulOneAtATime: (x: Int)Int =&gt; Int&#x2F;&#x2F;def mulOneAtATime(x: Int)(y: Int) = x * ymulOneAtATime(10)(20)                           &#x2F;&#x2F;&gt; res0: Int = 200</code></pre></li></ul><h2 id="10-Pattern-Matching"><a href="#10-Pattern-Matching" class="headerlink" title="10. Pattern Matching"></a>10. Pattern Matching</h2><ul><li>var.isInstanceOf[Type] 보단 패턴 매칭이 더 best!</li><li>주의: case의 변수명을 안쓰면 companion object를 지정하는 것처럼 보일 수 있음<pre><code> val ch = &#39;-&#39;                                    &#x2F;&#x2F;&gt; ch  : Char = -  val sign = ch match { case &#39;+&#39; =&gt; 1 case &#39;-&#39; =&gt; -1 case _ =&gt; 0 }                                               &#x2F;&#x2F;&gt; sign  : Int = -1val pair = (0, 1)                         &#x2F;&#x2F;&gt; pair  : (Int, Int) = (0,1) val st = pair match { case (0, _) =&gt; &quot;0 ...&quot; case (y, 0) =&gt; y + &quot;0&quot; case _ =&gt; &quot;neither is 0&quot; }                                               &#x2F;&#x2F;&gt; st  : String = 0 ...  val arr = Array(9, 1, 1)                        &#x2F;&#x2F;&gt; arr  : Array[Int] = Array(9, 1, 1)  val out = arr match { case Array(0) =&gt; &quot;0&quot; case Array(x, y) =&gt; x + &quot; &quot; + y case Array(0, _*) =&gt; &quot;0 ...&quot; case _ =&gt; &quot;something else&quot; }                                               &#x2F;&#x2F;&gt; out  : String = something else</code></pre></li></ul><h2 id="11-Case-Class"><a href="#11-Case-Class" class="headerlink" title="11. Case Class"></a>11. Case Class</h2><ul><li>case class는 패턴매칭에 유용하게 쓰임</li><li>case class는 자동으로 companion object가 만들어지며, 멤버 변수들은 자동으로 val로 선언됨</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Transaction의 이해 Part1 - Trasaction AOP 설정과 Java Configuration</title>
      <link href="/2017/02/20/20170220-spring-transaction-part1-overview/"/>
      <url>/2017/02/20/20170220-spring-transaction-part1-overview/</url>
      
        <content type="html"><![CDATA[<p>얼마전에 스프링 관련 커뮤니티에서 Spring에서 XML로 설정된 Transaction Advice에 대해서 Java Configuration 방식으로 어떻게 바꾸는지 질문이 올라왔었다.</p><p><img src="/images/20170220-spring-transaction-part1-overview/question.png" title="Spring Transaction 질문"><br><br><br><img src="/images/20170220-spring-transaction-part1-overview/answer.png" title="댓글들"></p><p>댓글을 보고 좀 더 구체적으로 알아보고 싶다는 욕심이 생겨서 해결방법을 찾아보기 시작했다. 구글이나 스택오버플로우에서 찾아보니 딱히 만족스러운 방법이 없었으나 스프링 레퍼런스에서 힌트를 찾을 수 있었다.</p><blockquote><p><em>17.5.9 Using @Transactional with AspectJ</em></p><p>(중략)</p><p>To weave your applications with the <code>AnnotationTransactionAspect</code> you must either build your application with AspectJ (see the AspectJ Development Guide) or use load-time weaving. See Section 11.8.4, “Load-time weaving with AspectJ in the Spring Framework” for a discussion of load-time weaving with AspectJ.</p><p>출처: <a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/transaction.html#transaction-declarative-aspectj" target="_blank" rel="noopener">http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/transaction.html#transaction-declarative-aspectj</a> </p></blockquote><p>결국 AspectJ를 Java config로 활성화 및 관련 PointCut 설정을 하고 Trasaction Advice를 사용자가 선언한 뒤 TransactionInterceptor에 사용자가 선언한 TxAdvice를 인식할 수 있는 인프라 빈을 주입하면 될 것 같다는 생각이 드는데, 막상 해보려고 하니 또 막막했다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> transaction </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>수식 쓰기 연습</title>
      <link href="/2017/02/09/20170209-math-test/"/>
      <url>/2017/02/09/20170209-math-test/</url>
      
        <content type="html"><![CDATA[<p>When<math xmlns="http://www.w3.org/1998/Math/MathML">  <mi>a</mi><mo>&#x2260;</mo><mn>0</mn></math>,there are two solutions to<math xmlns="http://www.w3.org/1998/Math/MathML">  <mi>a</mi><msup><mi>x</mi><mn>2</mn></msup>  <mo>+</mo> <mi>b</mi><mi>x</mi>  <mo>+</mo> <mi>c</mi> <mo>=</mo> <mn>0</mn></math>and they are<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mi>x</mi> <mo>=</mo>  <mrow>    <mfrac>      <mrow>        <mo>&#x2212;</mo>        <mi>b</mi>        <mo>&#x00B1;</mo>        <msqrt>          <msup><mi>b</mi><mn>2</mn></msup>          <mo>&#x2212;</mo>          <mn>4</mn><mi>a</mi><mi>c</mi>        </msqrt>      </mrow>      <mrow> <mn>2</mn><mi>a</mi> </mrow>    </mfrac>  </mrow>  <mtext>.</mtext></math></p>]]></content>
      
      
      
        <tags>
            
            <tag> 수학 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Machine Learning Study 01 - 머신러닝의 정의 및 기초 용어 정리</title>
      <link href="/2017/02/01/20170201-machine_learning_study_day01/"/>
      <url>/2017/02/01/20170201-machine_learning_study_day01/</url>
      
        <content type="html"><![CDATA[<h1 id="머신러닝-Machine-Learning-의-정의-및-용어-정리"><a href="#머신러닝-Machine-Learning-의-정의-및-용어-정리" class="headerlink" title="머신러닝(Machine Learning)의 정의 및 용어 정리"></a>머신러닝(Machine Learning)의 정의 및 용어 정리</h1><p>Tom Mitchell는 자신의 저서 <code>머신러닝</code>에서 러닝, 즉 학습의 정의를 다음과 같이 내렸다.</p><blockquote><p>만약 컴퓨터 프로그램이 특정한 태스크 T를 수행할 때 성능 P만큼 개선되는 경험 E를 보이면 그 컴퓨터 프로그램은 태스크 T와 성능 P에 대해 경험 E를 학습했다라고 할 수 있다.</p></blockquote><h5 id="example"><a href="#example" class="headerlink" title="example)"></a>example)</h5><p>컴퓨터에게 필기체를 인식하는 학습을 시킨다고 했을 때</p><ul><li>태스크 T: 필기체를 인식하고 분류하는 것</li><li>성능 P: 필기체를 정확히 구분한 확률</li><li>학습 경험 E: 필기체와 정확한 글자를 표시한 데이터세트<br>로 정의할 수 있다.</li></ul><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>머신(컴퓨터)가 학습하기 위해서는, 다시 말해 컴퓨터가 어떤 판단 규칙 만들기 위해서는 사람이 인지하는 데이터를 컴퓨터가 인지하기 위해 데이터의 사전 처리가 필요하다.</li><li>예를 들면, 텍스트로 된 사용자 행동로그 데이터 테이블, 자연어로 구성된 문장, 음성신호, 디지털 이미지, 동영상 등의 데이터는 계산 가능한 정량적인 단위로 변환 및  벡터나 행렬 형태로 가공이 필요하다.</li><li>입력 데이터를 벡터 형태로 표현하는 이유는 입력 데이터가 n개의 특성으로 정량화 됐다면 n차원 벡터 공간에 표현할 수 있어 데이터를 직관적으로 이해하고 수학적인 분류 모델을 만들기 쉽기 때문<br><br></li></ul><h2 id="머신러닝과-데이터-마이닝"><a href="#머신러닝과-데이터-마이닝" class="headerlink" title="머신러닝과 데이터 마이닝"></a>머신러닝과 데이터 마이닝</h2><ul><li>머신러닝에서 사용하는 분류나 군집 같은 방법을 데이터 마이닝에서도 사용함</li><li>분류나 예측, 군집과 같은 기술, 모델, 알고리즘을 이용해 문제를 해결하는 것을 컴퓨터 과학 관점에서는 <code>머신러닝</code>이라고 하고, 통계학 관점에서는 <code>데이터 마이닝</code>이라고 한다.</li><li>머신러닝과 데이터 마이닝의 차이점을 굳이 설명하자면 데이터 마이닝은 가지고 있는 데이터에서 현상 및 특성을 발견하는 것이 목적,</li><li>반면 머신러닝은 기존 데이터를 통해 학습을 시킨 후 새로운 데이터에 대한 예측값을 알아내는 데 목적이 있다라고 할 수 있다.<br><br></li></ul><h2 id="용어-정리"><a href="#용어-정리" class="headerlink" title="용어 정리"></a>용어 정리</h2><h4 id="레이블-Label"><a href="#레이블-Label" class="headerlink" title="레이블(Label)"></a>레이블(Label)</h4><ul><li>학습 데이터의 속성을 우리가 분석하고자 하는 관점에서 정의하는 것</li><li>예를 들어 사진에서 어떤 사물을 구별하는 태스크 T가 있다고 할 때 사진은 학습 데이터, 사진 속에 있는 사물 ‘컵’, ‘책상’, ‘자전거’, ‘고양이’라고 미리 정의해 놓는 것을 레이블이라고 한다.</li></ul><h4 id="지도-Supervised-학습-amp-비지도-Unsupervised-학습"><a href="#지도-Supervised-학습-amp-비지도-Unsupervised-학습" class="headerlink" title="지도(Supervised) 학습 &amp; 비지도(Unsupervised) 학습"></a>지도(Supervised) 학습 &amp; 비지도(Unsupervised) 학습</h4><ul><li>레이블은 사람이 사진을 보고 정의한 것이기 때문에 그러한 레이블된 사진을 읽어서 학습하는 컴퓨터 입장에서는 사람으로부터 지도를 받는 것이라 하여 지도 학습</li><li>입력 데이터에 레이블이 없다면 컴퓨터가 사람으로부터 지도를 받은 것이 없기 때문에 비지도 학습이라 한다.</li><li>지도학습의 종류: 분류 모델(Classification), 예측 모델(Prediction)</li><li>비지도 학습의 종류: 군집 모델(Clustering)</li></ul><h4 id="분류-모델-Classification"><a href="#분류-모델-Classification" class="headerlink" title="분류 모델 (Classification)"></a>분류 모델 (Classification)</h4><ul><li>kNN (k nearest neighbor)</li><li>서포트 벡터 머신 (Support Vector Machine)</li><li>의사결정 트리 (Decision Tree)</li><li>분류 모델의 예를 들면, A,B,C 레이블로 구성된 데이터세트가 있다고 하면 분류모델의 결괏값은 A,B,C 셋 중에 하나가 나온다.</li></ul><h4 id="예측-모델-Regression"><a href="#예측-모델-Regression" class="headerlink" title="예측 모델 (Regression)"></a>예측 모델 (Regression)</h4><ul><li>회귀(Regression)가 주된 방식이라 예측 모델은 회귀 모델이라고 하기도 함</li><li>회귀 모델은 레이블된 학습 데이터를 가지고 특성(Feature)과 레이블의 관계를 함수식으로 표현하는 것이 목적</li><li>회귀 모델은 A,B,C와 같이 유한 개의 결괏값이 나오지 않고 어떤 값이 나올지 예상하지 못하기 때문에 예측 모델이라고 한다.</li><li>주가 분석과 같이 연속적인 범위 내에 결괏값을 예측하는 문제에는 선형 회귀 모델(Linear Regression)을 사용</li><li>회귀 모델도 분류와 같이 몇 가지 범주형(Categorical) 결괏값을 예측하는 경우에는 로지스틱 회귀 모델(Logistic Regression)을 사용<ul><li>Logistic Regression에서는 회귀 분석 시 로지스틱 함수 혹은 시그모이드 sigmoid 함수를 사용</li></ul></li></ul><h4 id="특성-Feature"><a href="#특성-Feature" class="headerlink" title="특성(Feature)"></a>특성(Feature)</h4><ul><li>입력 데이터(ex: 사용자 로그, 음성, 이미지 등)를 구별해낼 수 있는 특징들을 정량화한 것</li><li>통계학에서는 ‘설명변수’, ‘독립변수’, ‘예측변수’로 표현한다.</li><li>적절한 특성의 선정이 효과적인 머신러닝을 만드는데 중요함</li></ul><h4 id="상관-분석-Correlation"><a href="#상관-분석-Correlation" class="headerlink" title="상관 분석 (Correlation)"></a>상관 분석 (Correlation)</h4><ul><li>독립변수와 종속변수 간의 관계의 강도, 정도를 분석하는 것 (즉, 얼마만큼 밀접하게 관련되어 있는지 분석)</li><li>이 때 강도를 상관계수(r)라 부른다.</li><li>상관계수(r): 독립변수와 종속변수의 관계 정도를 -1과 1사이로 정량화한 것</li></ul><h4 id="회귀-분석-Regression"><a href="#회귀-분석-Regression" class="headerlink" title="회귀 분석 (Regression)"></a>회귀 분석 (Regression)</h4><ul><li>관측된 사건들을 정량화해서 여러 독립변수와 종속변수(목적변수라고도 함)의 관계를 함수식으로 설명하는 방법</li><li>종속변수: 우리가 알고 싶어하는 결괏값, 기댓값, 예상값</li><li>독립변수: 이러한 결괏값에 영향을 주는 입력값</li><li>예를 들어, 어떤 고등학교에 있는 학생들의 키와 몸무게의 상관관계를 기반으로 학생의 키가 주어졌을 때 그 학생의 몸무게를 예측할 때 키는 독립변수, 몸무게는 종속변수이다.</li><li><p>이 때 그 상관관계를 함수식으로 규명하는 것이 회귀 분석이며 이를 함수식으로 나타내면 다음과 같다.</p><pre><code>y = -141.24 + 1.185x,    결정계수(r^2) = 0.9331</code></pre></li><li><p>결정계수(r^2): 독립변수를 가지고 얼마만큼 의미 있게 종속변수를 예측할 수 있는지를 판별할 때 사용. 일반적으로 r^2 &gt;= 0.65 이면 의미있는 회귀식이라 말한다.</p></li></ul><h4 id="선형-회귀-Linear-Regression"><a href="#선형-회귀-Linear-Regression" class="headerlink" title="선형 회귀 (Linear Regression)"></a>선형 회귀 (Linear Regression)</h4><ul><li>선형: 독립변수가 1차항으로 돼 있다는 의미. 이를 기하학적으로 표현하면 독립변수와 종속변수의 관계가 2차원에서는 직선형태로, 3차원에서는 평면으로 나타난다.</li><li>선형회귀식을 구할 때는 일반적으로 최소제곱법을 이용</li><li>최소제곱법: 독립변수를 통해 임의의 함수로 예측한 결괏값과 실제 종속변수값의 차이(오차error, 잔차residual 라고도 함)를 제곱해서 모두 더한 값이 최소가 되는 함수식을 찾는 방법</li></ul><h4 id="로지스틱-회귀-Logistic-Regression"><a href="#로지스틱-회귀-Logistic-Regression" class="headerlink" title="로지스틱 회귀 (Logistic Regression)"></a>로지스틱 회귀 (Logistic Regression)</h4><ul><li>종속변수가 예/아니오, 1/0, 클릭/넌클릭 같은 범주형(categorical)으로 표현될 때 </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>머신러닝 소개 자료</title>
      <link href="/2017/01/20/20170120-introduce_machine_learning/"/>
      <url>/2017/01/20/20170120-introduce_machine_learning/</url>
      
        <content type="html"><![CDATA[<h2 id="머신러닝-입문-강의-생초보용"><a href="#머신러닝-입문-강의-생초보용" class="headerlink" title="머신러닝 입문 강의 (생초보용)"></a>머신러닝 입문 강의 (생초보용)</h2><ul><li><a href="https://www.youtube.com/watch?v=j3za7nv7RfI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=j3za7nv7RfI</a></li></ul><h2 id="Decision-Tree"><a href="#Decision-Tree" class="headerlink" title="Decision Tree"></a>Decision Tree</h2><h4 id="의사결정트리-맛보기-디시젼-트리가-뭐다-라고-설명한-뒤-나중에-파이썬으로-구현하는-것까지-보여줌"><a href="#의사결정트리-맛보기-디시젼-트리가-뭐다-라고-설명한-뒤-나중에-파이썬으로-구현하는-것까지-보여줌" class="headerlink" title="의사결정트리 맛보기 (디시젼 트리가 뭐다 라고 설명한 뒤 나중에 파이썬으로 구현하는 것까지 보여줌)"></a>의사결정트리 맛보기 (디시젼 트리가 뭐다 라고 설명한 뒤 나중에 파이썬으로 구현하는 것까지 보여줌)</h4><ul><li>1화: <a href="https://www.youtube.com/watch?v=n0p0120Gxqk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=n0p0120Gxqk</a></li><li>2화: <a href="https://www.youtube.com/watch?v=UPKugq0fK04" target="_blank" rel="noopener">https://www.youtube.com/watch?v=UPKugq0fK04</a></li><li>3화: <a href="https://www.youtube.com/watch?v=GE2P2DlIj9k" target="_blank" rel="noopener">https://www.youtube.com/watch?v=GE2P2DlIj9k</a></li></ul><h4 id="Gradient-Boosting-Machine-소개-with-XGBoost"><a href="#Gradient-Boosting-Machine-소개-with-XGBoost" class="headerlink" title="Gradient Boosting Machine 소개 (with XGBoost)"></a>Gradient Boosting Machine 소개 (with XGBoost)</h4><ul><li><a href="http://ishuca.tistory.com/entry/Introduction-to-Boosted-Trees" target="_blank" rel="noopener">http://ishuca.tistory.com/entry/Introduction-to-Boosted-Trees</a></li><li>원문 링크: <a href="http://xgboost.readthedocs.io/en/latest/model.html" target="_blank" rel="noopener">http://xgboost.readthedocs.io/en/latest/model.html</a></li></ul><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><h4 id="로지스틱-회귀-분석-맛보기"><a href="#로지스틱-회귀-분석-맛보기" class="headerlink" title="로지스틱 회귀 분석 맛보기"></a>로지스틱 회귀 분석 맛보기</h4><ul><li>로지스틱 회귀 분석 개요: <a href="https://www.youtube.com/watch?v=kHLqMsN7yao" target="_blank" rel="noopener">https://www.youtube.com/watch?v=kHLqMsN7yao</a></li><li>코스트 함수 &amp; Weight 구하기 설명: <a href="https://www.youtube.com/watch?v=XvB5u7YSeUk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=XvB5u7YSeUk</a></li></ul><blockquote><p>더욱더 까다로운 알고리즘이 필요한 응용 프로그램이 요구될 때, 논문을 읽고, 좋은 생각을 끄집어내며, 실제 코드에서 프로그램을 실행하고, 이러한 작업을 반복할 수 있는 누군가가 옆에 있다면 유용할 것이다.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Generics</title>
      <link href="/2016/12/15/20161215-java_generics/"/>
      <url>/2016/12/15/20161215-java_generics/</url>
      
        <content type="html"><![CDATA[<h3 id="Type-Parameter와-Type-Argument"><a href="#Type-Parameter와-Type-Argument" class="headerlink" title="Type Parameter와 Type Argument"></a>Type Parameter와 Type Argument</h3><pre><code>public class Generics {    static class Hello&lt;T&gt; { // 여기서 T를 Type Variable 이라고도 한다. T is type parameter    }    static void print(String value) {        System.out.println(value);    }    public static void main(String[] args) {        new Hello&lt;String&gt;(); // type argument    }}</code></pre><h3 id="Intersection-Type"><a href="#Intersection-Type" class="headerlink" title="Intersection Type"></a>Intersection Type</h3><pre><code>public class Generics {  static &lt;T extends List &amp; Serializable &amp; Comparable &amp; Closeable&gt; void print(T t) {  }  public static void main(String[] args) {  }}</code></pre><h3 id="Bounded-Type-Parameter"><a href="#Bounded-Type-Parameter" class="headerlink" title="Bounded Type Parameter"></a>Bounded Type Parameter</h3><pre><code>public class Generics {    static long countGreaterThan(Integer[] arr, Integer elem) {        return Arrays.stream(arr).filter(s -&gt; s &gt; elem).count();    }    public static void main(String[] args) {        Integer[] arr = new Integer[] {1,2,3,4,5,6,7};        System.out.println(countGreaterThan(arr, 4));    }}</code></pre><p>스트링 용의 countGreaterThan을 만들고 싶을 땐?<br>더 나아가서 일반적으로 만들고 싶을 때는?</p><pre><code>public class Generics {    static &lt;T extends Comparable&lt;T&gt;&gt; long countGreaterThan(T[] arr, T elem) {        return Arrays.stream(arr).filter(s -&gt; s.compareTo(elem) &lt; 0).count();        // s 에서는 erase type이라고 해서 정보를 다 날린다.    }    public static void main(String[] args) {        String[] arr = new String[] {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;};        System.out.println(countGreaterThan(arr, &quot;c&quot;));    }}</code></pre><h3 id="제네릭과-상속"><a href="#제네릭과-상속" class="headerlink" title="제네릭과 상속"></a>제네릭과 상속</h3><pre><code>public class Generics {    public static void main(String[] args) {        Integer i = 10;        Number n = i; // 가능        List&lt;Integer&gt; ints = new ArrayList&lt;&gt;();        List&lt;Number&gt; numbers = ints; // 1. compile error, 2. runtime error, 3. ...        // Type parameter 사이에는 상속 관계를 컴파일 타임에 체크할 수 없다. 제네릭에는 상속관계에 영향을 줄 수 없다.        ArrayList&lt;Integer&gt; arrs = new ArrayLIst&lt;&gt;();        Lister&lt;Integer&gt; ints2 = arrs; // 잘 됨    }}</code></pre><pre><code>public class Generics {    static class MyList&lt;E, P&gt; implements List&lt;E&gt; {...}    public static void main(String[] args) {        List&lt;String&gt; s1 = new MyList&lt;String, Integer&gt;();        List&lt;String&gt; s2 = new MyList&lt;String, String&gt;();        // 둘 다 컴파일 오류 없이 잘 됨    }}</code></pre><h3 id="타입-추론"><a href="#타입-추론" class="headerlink" title="타입 추론"></a>타입 추론</h3><p>컴파일러가 추론해주는 일</p><pre><code>public class Generics {    static &lt;T&gt; void method(T t, List&lt;T&gt; list) {...}    public static void main(String[] args) {        method(1, Arrays.asList(1,2,3)); // 타입을 명시하지 않아도 메소드의 파라미터로 넘겨주는 로직이 컴파일 타임에 Integer로 추론되서 컴파일 된다.        Generics.&lt;Integer&gt;method(1, Arrays.asList(1,2,3));    }}</code></pre><p>빈 컬랙션이 타입 추론<br>List<string> c = Collections.<string>emptyList();</string></string></p><pre><code>static &lt;T extends Comparable&gt; void method(List&lt;T&gt; t) {}static void method(List&lt;? extends Comparable&gt; t) { // ? is wildcards}</code></pre><h3 id="Wild-Card"><a href="#Wild-Card" class="headerlink" title="Wild Card"></a>Wild Card</h3><p>List&lt;? extends Object&gt; list;</p><ul><li>오브젝트의 기능이 담긴 타입의 객체를 사용하겠다는 의미</li><li>타입이 뭐가 있던지 간에 리스트의 기능에 집중하겠다는 의미</li></ul><pre><code>static void printList1(List&lt;Object&gt; list) {    list.forEach(s -&gt; System.out.println(s));}static void printList2(List&lt;?&gt; list) {    list.forEach(s -&gt; System.out.println(s));}</code></pre><p>위 두 메소드의 차이점은 뭘까?<br>printList1(Arrays.asList(1,2,3));<br>printList2(Arrays.asList(1,2,3));<br>둘 다 오류는 안남</p><p>그런데…<br>List<integer> list = Arrays.asList(1,2,3);<br>printList1(list); // 이 때는 컴파일 오류가 발생함. List<integer>는 List<object>의 서브타입이 아니기 때문에..<br>printList2(list); // 이거는 문제 없음</object></integer></integer></p><pre><code>class A {}class B extends A {}List&lt;B&gt; lb = new ArrayList&lt;B&gt;();List&lt;A&gt; la = lb; // 이거는 컴파일 오류가 발생함, List&lt;B&gt;는 List&lt;A&gt;의 서브타입이 아니기 떄문List&lt;? extends A&gt; la = lb; // 이거는 가능List&lt;? super A&gt; lc = lb; // 이거도 가능List&lt;? super B&gt; ld = lb; // 이거는 불가la.add(new A()); // 이거도 컴파일 오류la.add(new B()); // 이거도 컴파일 오류la.add(null); // 이거밖에 안됨</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> generics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular 2 - 사례로 살펴보는 @Input과 @Output의 이해 2</title>
      <link href="/2016/12/09/20161209-about_angular2_input_output2/"/>
      <url>/2016/12/09/20161209-about_angular2_input_output2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20161209-about_angular2_input_output2/sample_app_01.png" title="Sample App"><br><img src="/images/20161209-about_angular2_input_output2/sample_app_02.png" title="Sample App"></p><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><pre><code>.├── first-tab│   ├── first-tab.component.css│   ├── first-tab.component.html│   └── first-tab.component.ts├── second-tab│   ├── second-tab.component.css│   ├── second-tab.component.html│   └── second-tab.component.ts├── tab-menu.component.css├── tab-menu.component.html└── tab-menu.component.ts</code></pre><ul><li>스크린샷에 보이는 것 처럼 한 페이지에 Tab으로 구분된 Form이 구성되어 있다. <code>제출하기</code> 버튼 클릭했을 때 모든 탭의 Form 데이터<br>를 얻어오려면 어떻게 해야될까?<br><br></li></ul><h2 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h2><ul><li>위 상황만 따지고 볼 때 핵심은 <code>제출하기</code> 버튼 클릭 시 모든 탭에 있는 Form 데이터를 가져오도록 코드를 작성하면 될 것 같다.</li><li>아래와 같이 Tab들은 자식 컴포넌트로 구성이 될텐데 부모 컴포넌트에서 자식 컴포넌트의 Form 데이터는 어떻게 가져올 것인가?</li></ul><pre><code>&lt;div&gt;  &lt;tabset class=&quot;container&quot;&gt;    &lt;tab heading=&quot;1단계&quot;&gt;      &lt;first-tab&gt;&lt;&#x2F;first-tab&gt;    &lt;&#x2F;tab&gt;    &lt;tab heading=&quot;2단계&quot;&gt;      &lt;second-tab&gt;&lt;&#x2F;second-tab&gt;    &lt;&#x2F;tab&gt;  &lt;&#x2F;tabset&gt;&lt;&#x2F;div&gt;</code></pre><ul><li>문제의 핵심은 부모 컴포넌트(tab-menu.component)에서 자식 컴포넌트(first-tab.component &amp; second-tab.component)의 값을 언제 어떻게 가져올 것인가로 압축할 수 있다.<br><br></li></ul><h3 id="부모-컴포넌트에서-자식-컴포넌트의-값을-가져오는-방법-2가지"><a href="#부모-컴포넌트에서-자식-컴포넌트의-값을-가져오는-방법-2가지" class="headerlink" title="부모 컴포넌트에서 자식 컴포넌트의 값을 가져오는 방법 2가지"></a>부모 컴포넌트에서 자식 컴포넌트의 값을 가져오는 방법 2가지</h3><ul><li>방법 1. 모델 공유</li><li>방법 2. 클로저 이벤트 사용</li></ul><p>일단 위 2가지 방법이 그나마 효율적인 방법이라고 생각한다. (위 2가지 방법 말고도 다른 방법이 있겠지만…) 먼저 첫 번째 방법 부터 살펴보자.<br><br></p><h4 id="방법-1-모델-공유-부모-컴포넌트에-자식-컴포넌트들의-Form-모델을-선언하는-방법"><a href="#방법-1-모델-공유-부모-컴포넌트에-자식-컴포넌트들의-Form-모델을-선언하는-방법" class="headerlink" title="방법 1. 모델 공유 - 부모 컴포넌트에 자식 컴포넌트들의 Form 모델을 선언하는 방법"></a>방법 1. 모델 공유 - 부모 컴포넌트에 자식 컴포넌트들의 Form 모델을 선언하는 방법</h4><p>말 그대로 부모 컴포넌트에서 자식 컴포넌트들의 Form 데이터가 담긴 모델을 갖고 있도록 정의하는 방법이다. 코드로 살펴보면 다음과 같다.</p><p>1) 부모 컴포넌트(tab-menu.component.ts)에서 자식 컴포넌트의 데이터를 받을 모델 멤버변수를 선언한다.</p><ul><li>여기서 firstTabForm과 secondTabForm에 대한 부모컴포넌트의 멤버 필드를 선언하고 인스턴스화 한다.</li><li>이렇게 인스턴스화 된 멤버들을 자식들에게 공유하는 방식이다.</li></ul><pre><code>import { Component, OnInit } from &#39;@angular&#x2F;core&#39;;import { FirstTabForm } from &#39;.&#x2F;firstTabForm&#39;;import { SecondTabForm } from &#39;.&#x2F;secondTabForm&#39;;@Component({  selector: &#39;tab-menu&#39;,  templateUrl: &#39;.&#x2F;tab-menu.component.html&#39;,  styleUrls: [&#39;.&#x2F;tab-menu.component.css&#39;]})export class TabMenuComponent implements OnInit {  firstTabForm: FirstTabForm = new FirstTabForm();  secondTabForm: SecondTabForm = new SecondTabForm();  ngOnInit() {  }}</code></pre><p>2) 부모 컴포넌트의 멤버 변수를 자식 컴포넌트로 전달한다.</p><ul><li>전달할 때는 아래와 같이 자식 컴포넌트의 <code>@Input</code> 멤버 필드에 전달한다.</li></ul><pre><code>&lt;div&gt;  &lt;tabset class=&quot;container&quot;&gt;    &lt;tab heading=&quot;1단계&quot;&gt;      &lt;first-tab [childForm]=&quot;firstTabForm&quot;&gt;&lt;&#x2F;first-tab&gt;    &lt;&#x2F;tab&gt;    &lt;tab heading=&quot;2단계&quot;&gt;      &lt;second-tab [childForm]=&quot;secondTabForm&quot;&gt;&lt;&#x2F;second-tab&gt;    &lt;&#x2F;tab&gt;  &lt;&#x2F;tabset&gt;&lt;&#x2F;div&gt;</code></pre><pre><code>import { Component, OnInit, Input } from &#39;@angular&#x2F;core&#39;;import { FirstTabForm } from &#39;..&#x2F;firstTabForm&#39;;@Component({  selector: &#39;first-tab&#39;,  templateUrl: &#39;.&#x2F;first-tab.component.html&#39;,  styleUrls: [&#39;.&#x2F;first-tab.component.css&#39;]})export class FirstTabComponent implements OnInit {  @Input()  childForm: FirstTabForm;  constructor() { }  ngOnInit() {  }}</code></pre><pre><code>import { Component, OnInit, Input } from &#39;@angular&#x2F;core&#39;;import { SecondTabForm } from &#39;..&#x2F;secondTabForm&#39;;@Component({  selector: &#39;second-tab&#39;,  templateUrl: &#39;.&#x2F;second-tab.component.html&#39;,  styleUrls: [&#39;.&#x2F;second-tab.component.css&#39;]})export class SecondTabComponent implements OnInit {  @Input()  childForm: SecondTabForm;  constructor() { }  ngOnInit() {  }}</code></pre><p>3) 자식 컴포넌트의 템플릿에 선언되어 있는 input, select 등 입출력을 담당하는 엘리먼트에 양방향 바인딩을 걸어준다.</p><ul><li>사실 input 바인딩만 걸어줘도 되는데 추후 저장 후 수정과 같은 페이지를 만들 것을 대비하여 양방향 바인딩을 걸어준다. (이게 비효율적으로 보이면 단방향 바인딩만 해줘도 된다.)</li></ul><pre><code>&lt;div class=&quot;form-group&quot;&gt;  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;이름(Name)&quot; [(ngModel)]=&quot;childForm.name&quot;&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;form-group&quot;&gt;  &lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;이메일(Email)&quot; [(ngModel)]=&quot;childForm.email&quot;&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;form-group&quot;&gt;  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;주소(Address)&quot; [(ngModel)]=&quot;childForm.address&quot;&gt;&lt;&#x2F;div&gt;</code></pre><pre><code>&lt;div class=&quot;form-group&quot;&gt;  &lt;label for=&quot;personCount&quot;&gt;예약 인원&lt;&#x2F;label&gt;  &lt;select class=&quot;form-control&quot; id=&quot;personCount&quot; [(ngModel)]=&quot;childForm.count&quot;&gt;    &lt;option&gt;1&lt;&#x2F;option&gt;    &lt;option&gt;2&lt;&#x2F;option&gt;    &lt;option&gt;3&lt;&#x2F;option&gt;    &lt;option&gt;4&lt;&#x2F;option&gt;    &lt;option&gt;5&lt;&#x2F;option&gt;  &lt;&#x2F;select&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;form-group&quot;&gt;  &lt;label for=&quot;groupName&quot;&gt;모임명&lt;&#x2F;label&gt;  &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;groupName&quot; [(ngModel)]=&quot;childForm.groupName&quot;&gt;&lt;&#x2F;div&gt;</code></pre><p>4) 부모 컴포넌트로 데이터가 제대로 들어오는지 확인</p><ul><li>부모 컴포넌트 쪽에서 데이터가 제대로 들어왔는지 디버깅을 해보자.</li></ul><pre><code>&lt;div&gt;  &lt;tabset class=&quot;container&quot;&gt;    &lt;tab heading=&quot;1단계&quot;&gt;      &lt;first-tab [childForm]=&quot;firstTabForm&quot;&gt;&lt;&#x2F;first-tab&gt;    &lt;&#x2F;tab&gt;    &lt;tab heading=&quot;2단계&quot;&gt;      &lt;second-tab [childForm]=&quot;secondTabForm&quot;&gt;&lt;&#x2F;second-tab&gt;    &lt;&#x2F;tab&gt;  &lt;&#x2F;tabset&gt;  &lt;div&gt;    &lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot; style=&quot;width:140px;&quot; (click)=&quot;saveRequest()&quot;&gt;제출하기&lt;&#x2F;button&gt;    &lt;button class=&quot;btn btn-info&quot; type=&quot;button&quot; style=&quot;width:140px;&quot;&gt;초기화&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</code></pre><pre><code>...@Component({  selector: &#39;tab-menu&#39;,  templateUrl: &#39;.&#x2F;tab-menu.component.html&#39;,  styleUrls: [&#39;.&#x2F;tab-menu.component.css&#39;]})export class TabMenuComponent implements OnInit {  ...  saveRequest() {    console.log(`${this.firstTabForm.name} : ${this.firstTabForm.email} : ${this.firstTabForm.address}`);    console.log(`${this.secondTabForm.count} : ${this.secondTabForm.groupName}`);  }}</code></pre><p>방법 1 전체 소스<br><a href="https://github.com/icednut/angular2-exercise/tree/master" target="_blank" rel="noopener">https://github.com/icednut/angular2-exercise/tree/master</a><br><br></p><h4 id="2-클로저-이벤트-사용-자식-컴포넌트에서-Form-데이터-셋팅-시-부모-컴포넌트에-이벤트-emit-시-Form-데이터-셋팅-클로저를-넘기는-방법"><a href="#2-클로저-이벤트-사용-자식-컴포넌트에서-Form-데이터-셋팅-시-부모-컴포넌트에-이벤트-emit-시-Form-데이터-셋팅-클로저를-넘기는-방법" class="headerlink" title="2. 클로저 이벤트 사용 - 자식 컴포넌트에서 Form 데이터 셋팅 시 부모 컴포넌트에 이벤트 emit 시 Form 데이터 셋팅 클로저를 넘기는 방법"></a>2. 클로저 이벤트 사용 - 자식 컴포넌트에서 Form 데이터 셋팅 시 부모 컴포넌트에 이벤트 emit 시 Form 데이터 셋팅 클로저를 넘기는 방법</h4><p>부모 컴포넌트 페이지에서 <code>제출하기</code>버튼 클릭 시 자식 컴포넌트들에게 이벤트를 발생하는데 이 때 내보내는 이벤트 타입을 클로저로 지정하는 방법이다. 말로 들으면 이해가 안갈지도 모르는데 코드를 살펴보면 다음과 같다.</p><p>1) <code>제출하기</code> 버튼 클릭 핸들러 추가<br><pre><code>&lt;div&gt;  &lt;tabset class=&quot;container&quot;&gt;    &lt;tab heading=&quot;1단계&quot;&gt;      &lt;first-tab&gt;&lt;&#x2F;first-tab&gt;    &lt;&#x2F;tab&gt;    &lt;tab heading=&quot;2단계&quot;&gt;      &lt;second-tab&gt;&lt;&#x2F;second-tab&gt;    &lt;&#x2F;tab&gt;  &lt;&#x2F;tabset&gt;  &lt;div&gt;    &lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot; (click)=&quot;saveRequest()&quot;&gt;제출하기&lt;&#x2F;button&gt;    &lt;button class=&quot;btn btn-info&quot; type=&quot;button&quot;&gt;초기화&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</code></pre></p><pre><code>import { Component, OnInit } from &#39;@angular&#x2F;core&#39;;@Component({  selector: &#39;tab-menu&#39;,  templateUrl: &#39;.&#x2F;tab-menu.component.html&#39;,  styleUrls: [&#39;.&#x2F;tab-menu.component.css&#39;]})export class TabMenuComponent implements OnInit {  ...  ngOnInit() {  }  saveRequest() {    &#x2F;&#x2F; TODO 1: 여기서 first-tab 컴포넌트와 second-tab 컴포넌트에 Form 데이터를 가져올 이벤트를 발생(emit)한다.    &#x2F;&#x2F; TODO 2: 자식 컴포넌트들(first-tab, second-tab)에서는 부모 컴포넌트(tab-menu)로 Form 데이터를 전달한다.  }}</code></pre><p>2) 부모 컴포넌트의 멤버 필드로 데이터를 셋팅하는 로직이 담긴 클로저 이벤트를 발생한다.<br><pre><code>import { Component, OnInit } from &#39;@angular&#x2F;core&#39;;import { FirstTabForm } from &#39;.&#x2F;firstTabForm&#39;;import { SecondTabForm } from &#39;.&#x2F;secondTabForm&#39;;@Component({  selector: &#39;tab-menu&#39;,  templateUrl: &#39;.&#x2F;tab-menu.component.html&#39;,  styleUrls: [&#39;.&#x2F;tab-menu.component.css&#39;]})export class TabMenuComponent implements OnInit {  ...  firstTabForm: FirstForm;  secondTabForm: SecondForm;  firstTabFormSelectEvent: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();  secondTabFormSelectEvent: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();  ngOnInit() {  }  saveRequest() {    &#x2F;&#x2F; TODO 1: 여기서 first-tab 컴포넌트와 second-tab 컴포넌트에 Form 데이터를 가져올 이벤트를 발생(emit)한다.    this.firstTabFormSelectEvent.emit(it =&gt; {      this.firstTabForm = it;      console.log(`${this.firstTabForm.name} : ${this.firstTabForm.email} : ${this.firstTabForm.address}`);    });    this.secondTabFormSelectEvent.emit(it =&gt; {      this.secondTabForm = it;      console.log(`${this.secondTabForm.count} : ${this.secondTabForm.groupName}`);    }); &#x2F;&#x2F; emit의 파라미터를 자세히 살펴보면 클로저를 넘기고 있다.    &#x2F;&#x2F; TODO 2: 자식 컴포넌트들(first-tab, second-tab)에서는 부모 컴포넌트(tab-menu)로 Form 데이터를 전달한다.  }}</code></pre></p><p>3) 이벤트를 자식컴포넌트에서 subscribe 하기 위해서 서비스 클래스(formService.ts)로 따로 뺀다.<br><pre><code>import { Component, OnInit, Output, EventEmitter } from &#39;@angular&#x2F;core&#39;;import { FirstTabForm } from &#39;.&#x2F;firstTabForm&#39;;import { SecondTabForm } from &#39;.&#x2F;secondTabForm&#39;;import { FormService } from &#39;.&#x2F;formService&#39;;@Component({  selector: &#39;tab-menu&#39;,  templateUrl: &#39;.&#x2F;tab-menu.component.html&#39;,  styleUrls: [&#39;.&#x2F;tab-menu.component.css&#39;]})export class TabMenuComponent implements OnInit {  firstTabForm: FirstTabForm;  secondTabForm: SecondTabForm;  constructor(    private formService: FormService  ) { }  ngOnInit() {  }  saveRequest() {    this.formService.selectFirstForm(it =&gt; {      this.firstTabForm = it;      console.log(`${this.firstTabForm.name} : ${this.firstTabForm.email} : ${this.firstTabForm.address}`);    });    this.formService.selectSecondForm(it =&gt; {      this.secondTabForm = it;      console.log(`${this.secondTabForm.count} : ${this.secondTabForm.groupName}`);    });  }}</code></pre></p><pre><code>import { Injectable, EventEmitter } from &#39;@angular&#x2F;core&#39;;@Injectable()export class FormService {  firstTabFormSelectEvent: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();  secondTabFormSelectEvent: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();  selectFirstForm(event: any) {    this.firstTabFormSelectEvent.emit(event);  }  selectSecondForm(event: any) {    this.secondTabFormSelectEvent.emit(event);  }}</code></pre><p>4) 자식 컴포넌트에서는 해당 이벤트를 subscribe 하는데 이 때 자식 컴포넌트의 데이터를 넘기기 위해 받은 이벤트를 실행한다.<br><pre><code>import { Component, OnInit, Input } from &#39;@angular&#x2F;core&#39;;import { FirstTabForm } from &#39;..&#x2F;firstTabForm&#39;;import { FormService } from &#39;..&#x2F;formService&#39;;@Component({  selector: &#39;first-tab&#39;,  templateUrl: &#39;.&#x2F;first-tab.component.html&#39;,  styleUrls: [&#39;.&#x2F;first-tab.component.css&#39;]})export class FirstTabComponent implements OnInit {  @Input()  childForm: FirstTabForm = new FirstTabForm();  constructor(private formService: FormService) { }  ngOnInit() {    this.formService.onSelectFirstForm(eventBody =&gt; {      eventBody(this.childForm);    });  }}</code></pre></p><pre><code>import { Injectable, EventEmitter } from &#39;@angular&#x2F;core&#39;;@Injectable()export class FormService {  firstTabFormSelectEvent: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();  secondTabFormSelectEvent: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();  selectFirstForm(event: any) {    this.firstTabFormSelectEvent.emit(event);  }  selectSecondForm(event: any) {    this.secondTabFormSelectEvent.emit(event);  }  onSelectFirstForm(subscribeFunc: any) {    this.firstTabFormSelectEvent.subscribe(subscribeFunc);  }  onSelectSecondForm(subscribeFunc: any) {    this.secondTabFormSelectEvent.subscribe(subscribeFunc);  }}</code></pre><p>방법 2 전체 소스<br><a href="https://github.com/icednut/angular2-exercise/tree/closure_event" target="_blank" rel="noopener">https://github.com/icednut/angular2-exercise/tree/closure_event</a></p><p>방법1, 방법2 말고도 더 좋은 방법이 있겠지만 이번 포스트는 여기서 마무리!</p>]]></content>
      
      
      
        <tags>
            
            <tag> angular2 </tag>
            
            <tag> input </tag>
            
            <tag> output </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>D3로 Table과 Bar Chart 표현하기</title>
      <link href="/2016/12/09/20161209-d3_table_and_barchart/"/>
      <url>/2016/12/09/20161209-d3_table_and_barchart/</url>
      
        <content type="html"><![CDATA[<h5 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h5><ul><li><a href="http://bl.ocks.org/gka/17ee676dc59aa752b4e6" target="_blank" rel="noopener">http://bl.ocks.org/gka/17ee676dc59aa752b4e6</a></li><li><a href="http://bl.ocks.org/jfreels/6734025" target="_blank" rel="noopener">http://bl.ocks.org/jfreels/6734025</a></li></ul><h5 id="Bar-Chart"><a href="#Bar-Chart" class="headerlink" title="Bar Chart"></a>Bar Chart</h5><ul><li><a href="http://bl.ocks.org/juan-cb/faf62e91e3c70a99a306" target="_blank" rel="noopener">http://bl.ocks.org/juan-cb/faf62e91e3c70a99a306</a></li><li><a href="http://bl.ocks.org/kiranml1/6872226" target="_blank" rel="noopener">http://bl.ocks.org/kiranml1/6872226</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> d3 </tag>
            
            <tag> table </tag>
            
            <tag> bar_chart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular 2 - 사례로 살펴보는 @Input과 @Output의 이해 1</title>
      <link href="/2016/12/09/20161209-about_angular2_input_output/"/>
      <url>/2016/12/09/20161209-about_angular2_input_output/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20161209-about_angular2_input_output/sample_app.png" title="sample app"><br><br></p><h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><pre><code>&lt;my-toolbar&gt;&lt;&#x2F;my-toolbar&gt;&lt;div style=&quot;padding:10px;&quot;&gt;  &lt;router-outlet&gt;&lt;&#x2F;router-outlet&gt;&lt;&#x2F;div&gt;</code></pre><p>Angular 2 기반의 프로젝트에서 위와 같은 컴포넌트 구성일 경우 메뉴1, 2를 클릭할 때마다 빨간색 네모 영역에 메뉴의 서브타이틀을 표시하고 싶을 경우 Angular 2에서는 어떻게 풀 수 있을까?<br>화면에 보이는 바와 같이 상단에 툴바가 있고, router를 통해 각 메뉴에 해당하는 내용이 출력되는 상황이다.   </p><p>프로젝트 파일 구조는 다음과 같다.</p><pre><code>.├── ...├── package.json├── src│   ├── app│   │   ├── app.component.css│   │   ├── app.component.html│   │   ├── app.component.spec.ts│   │   ├── app.component.ts│   │   ├── app.module.ts│   │   ├── index.ts│   │   ├── menu1│   │   │   ├── menu1.component.css│   │   │   ├── menu1.component.html│   │   │   ├── menu1.component.spec.ts│   │   │   └── menu1.component.ts│   │   ├── menu2│   │   │   ├── menu2.component.css│   │   │   ├── menu2.component.html│   │   │   ├── menu2.component.spec.ts│   │   │   └── menu2.component.ts│   │   └── my-toolbar│   │       ├── my-toolbar.component.css│   │       ├── my-toolbar.component.html│   │       ├── my-toolbar.component.spec.ts│   │       └── my-toolbar.component.ts│   ├── ...│   ├── index.html│   ├── main.ts│   ├── styles.css│   └── ...└── ...</code></pre><p><br></p><h2 id="문제-풀이"><a href="#문제-풀이" class="headerlink" title="문제 풀이"></a>문제 풀이</h2><p>단순하게 생각하면 메뉴가 바뀔 때마다 my-toolbar 컴포넌트에 서브타이틀 문자열을 넘겨주고 my-toolbar는 넘겨받은 서브타이틀 문자열을 출력하면 될 것 같다.<br>그런데 서브타이틀을 어떻게 넘겨줄 것인가? 이 때 사용하는 것이 Data Binding 이다. 여러가지 방법이 있겠지만 일단 지금의 컴포넌트 구성을 깨지 않고 진행을 해보자.<br><br></p><h4 id="1-먼저-my-toolbar에서-서브타이틀을-넘겨-받을-수-있게-Input-데이터-바인딩을-해준다"><a href="#1-먼저-my-toolbar에서-서브타이틀을-넘겨-받을-수-있게-Input-데이터-바인딩을-해준다" class="headerlink" title="1. 먼저 my-toolbar에서 서브타이틀을 넘겨 받을 수 있게 Input 데이터 바인딩을 해준다."></a>1. 먼저 my-toolbar에서 서브타이틀을 넘겨 받을 수 있게 Input 데이터 바인딩을 해준다.</h4><pre><code>&lt;my-toolbar [currentMenuSubTitle]=&quot;menuSubTitle&quot;&gt;&lt;&#x2F;my-toolbar&gt;&lt;div style=&quot;padding:10px;&quot;&gt;  &lt;router-outlet&gt;&lt;&#x2F;router-outlet&gt;&lt;&#x2F;div&gt;</code></pre><p>my-toolbar 앨리먼트에 쓰여진 어트리뷰트를 살펴보면 currentMenuSubTitle에 대괄호가 둘러쌓여져 있는데 이는 my-toolbar 컴포넌트의 Input 필드를 의미한다.<br>위의 상황으로 보면 app.component의 menuSubTitle 이라는 필드를 my-toolbar 컴포넌트의 currentMenuSubTitle 이라는 필드로 데이터 바인딩을 하겠다는 것을<br>의미한다. </p><h4 id="2-데이터-바인딩이-잘-될-수-있도록-my-toolbar-컴포넌트에도-동일한-이름의-Input이-붙은-필드를-선언해준다"><a href="#2-데이터-바인딩이-잘-될-수-있도록-my-toolbar-컴포넌트에도-동일한-이름의-Input이-붙은-필드를-선언해준다" class="headerlink" title="2. 데이터 바인딩이 잘 될 수 있도록 my-toolbar 컴포넌트에도 동일한 이름의 @Input이 붙은 필드를 선언해준다."></a>2. 데이터 바인딩이 잘 될 수 있도록 my-toolbar 컴포넌트에도 동일한 이름의 @Input이 붙은 필드를 선언해준다.</h4><pre><code>import {Input, Component, OnInit} from &#39;@angular&#x2F;core&#39;;@Component({  selector: &#39;my-toolbar&#39;,  templateUrl: &#39;.&#x2F;my-toolbar.component.html&#39;,  styleUrls: [&#39;.&#x2F;my-toolbar.component.css&#39;]})export class MyToolbarComponent implements OnInit {  @Input()  currentMenuSubTitle: string;  constructor() { }  ngOnInit() {  }}</code></pre><h4 id="3-app-component에도-menuSubTitle-라는-필드를-선언하고-문자열을-넣어본다"><a href="#3-app-component에도-menuSubTitle-라는-필드를-선언하고-문자열을-넣어본다" class="headerlink" title="3. app.component에도 menuSubTitle 라는 필드를 선언하고 문자열을 넣어본다."></a>3. app.component에도 menuSubTitle 라는 필드를 선언하고 문자열을 넣어본다.</h4><pre><code>import { Component } from &#39;@angular&#x2F;core&#39;;@Component({  selector: &#39;app-root&#39;,  templateUrl: &#39;.&#x2F;app.component.html&#39;,  styleUrls: [&#39;.&#x2F;app.component.css&#39;]})export class AppComponent {  menuSubTitle = &#39;Hello, world!!&#39;;}</code></pre><p>이렇게 하면 아래와 같이 서브타이틀이 표시되는 것을 볼 수 있다.</p><p><img src="/images/20161209-about_angular2_input_output/sample_app_02.png" title="sample app"></p><p>자, 그럼 Menu1Component와 Menu2Component가 AppComponent의 menuSubTitle 필드로 데이터를 넣어줄 것인가?<br>여러가지 방법이 있겠지만 service 클래스를 사용하여 문제 해결을 진행해보자.</p><h4 id="4-서브타이틀-문자열의-변화를-감지할-옵저버를-선언한다"><a href="#4-서브타이틀-문자열의-변화를-감지할-옵저버를-선언한다" class="headerlink" title="4. 서브타이틀 문자열의 변화를 감지할 옵저버를 선언한다."></a>4. 서브타이틀 문자열의 변화를 감지할 옵저버를 선언한다.</h4><p>여기서는 Service 클래스를 사용하여 옵저버 역할을 하게 한다.</p><pre><code>import { Injectable, EventEmitter } from &#39;@angular&#x2F;core&#39;;@Injectable()export class MyToolbarService {  subTitleChangeEvent: EventEmitter&lt;string&gt; = new EventEmitter&lt;string&gt;();  constructor() { }  setSubTitle(subTitle: string) {    this.subTitleChangeEvent.emit(subTitle);  }  onChangeSubTitle(handler: any) {    this.subTitleChangeEvent.subscribe(handler);  }}</code></pre><h4 id="5-AppComponent에서는-subTitle의-변화가-있을-때-자신의-menuSubTitle-필드에-데이터를-바인딩한다"><a href="#5-AppComponent에서는-subTitle의-변화가-있을-때-자신의-menuSubTitle-필드에-데이터를-바인딩한다" class="headerlink" title="5. AppComponent에서는 subTitle의 변화가 있을 때 자신의 menuSubTitle 필드에 데이터를 바인딩한다."></a>5. AppComponent에서는 subTitle의 변화가 있을 때 자신의 menuSubTitle 필드에 데이터를 바인딩한다.</h4><p>이렇게 서브타이틀 변화에 대한 핸들러를 생성자에서 선언해준다. 이 핸들러에서는 서브타이틀 변화가 있을 때 마다 menuSubTitle 필드에 데이터를 바인딩하는 로직이 담겨 있다.<br>실수하지 말아야 할 부분이 있는데 providers에 서브타이틀 이벤트 처리가 담긴 MyToolbarService 클래스를 선언해줘야지 정상적으로 이벤트 핸들링을 할 수 있게 된다.</p><pre><code>import { Component, OnInit } from &#39;@angular&#x2F;core&#39;;import {MyToolbarService} from &#39;.&#x2F;my-toolbar.service&#39;;@Component({  selector: &#39;app-root&#39;,  templateUrl: &#39;.&#x2F;app.component.html&#39;,  styleUrls: [&#39;.&#x2F;app.component.css&#39;],  providers: [MyToolbarService]})export class AppComponent {  menuSubTitle;  constructor(private myToolbarService: MyToolbarService) {    this.myToolbarService.onChangeSubTitle(newMenuSubTitle =&gt; {      this.menuSubTitle = newMenuSubTitle;    });  }}</code></pre><h4 id="6-Menu1Comopnent와-Menu2Component에서는-서브타이틀-변경-이벤트-발생-로직을-작성한다"><a href="#6-Menu1Comopnent와-Menu2Component에서는-서브타이틀-변경-이벤트-발생-로직을-작성한다" class="headerlink" title="6. Menu1Comopnent와 Menu2Component에서는 서브타이틀 변경 이벤트 발생 로직을 작성한다."></a>6. Menu1Comopnent와 Menu2Component에서는 서브타이틀 변경 이벤트 발생 로직을 작성한다.</h4><p>Menu1Component에서는 아래와 같이 서브타이틀 값을 변경하면 앞에 선언한 서비스 코드에 나와 있다시피 서브타이틀 변경 이벤트가<br>발생하게 된다. 그러면 AppComponent에서 이를 감지하여 AppComponent.menuSubTitle 필드에 변경된 값을 할당하게 될 것이고,<br>AppComponent.menuSubTitle는 my-toolbar의 인풋 필드와 바인딩이 되어 있기 때문에 Menu1Component와 Menu2Component의 ngOnInit에서<br>setSubTitle 메소드를 실행하여 서브타이틀 값을 변경하면 툴바의 서브타이틀 부분이 갱신되게 된다.</p><pre><code>import {Output, Component, OnInit, EventEmitter} from &#39;@angular&#x2F;core&#39;;import {MyToolbarService} from &#39;..&#x2F;my-toolbar.service&#39;;@Component({  selector: &#39;app-menu1&#39;,  templateUrl: &#39;.&#x2F;menu1.component.html&#39;,  styleUrls: [&#39;.&#x2F;menu1.component.css&#39;]})export class Menu1Component implements OnInit {  constructor(private myToolbarService: MyToolbarService) { }  ngOnInit() {    this.myToolbarService.setSubTitle(&quot;menu1&#39;s subtitle&quot;);  }}</code></pre><p><img src="/images/20161209-about_angular2_input_output/sample_app_03.png" title="sample app 결과"><br><img src="/images/20161209-about_angular2_input_output/sample_app_04.png" title="sample app 결과"></p><h4 id="전체-결과-소스코드"><a href="#전체-결과-소스코드" class="headerlink" title="전체 결과 소스코드"></a>전체 결과 소스코드</h4><p><a href="https://github.com/icednut/angular2-exercise" target="_blank" rel="noopener">https://github.com/icednut/angular2-exercise</a></p><p>위 방법이 정답이라 생각하지 않고 또 다른 효율적인 방법이 있을 것이라 생각한다. 일단 router-outlet 밑에서 동작하는 컴포넌트들에 대해<br>AppComponent와 연결할 수 있는 마땅한 방법이 떠오르지 않아 서비스 클래스를 사용했지만, 좀 더 코드도 줄이면서 데이터 바인딩도 잘 될 수 있는<br>효율적인 방법을 찾는 것에 대해 계속 노력해야겠다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> angular2 </tag>
            
            <tag> input </tag>
            
            <tag> output </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>개인적으로 마음에 드는 웹 테마들</title>
      <link href="/2016/12/01/20161201-front_end_themes/"/>
      <url>/2016/12/01/20161201-front_end_themes/</url>
      
        <content type="html"><![CDATA[<h4 id="Angualr-amp-Bootstrap를-사용한-마음에-드는-테마들"><a href="#Angualr-amp-Bootstrap를-사용한-마음에-드는-테마들" class="headerlink" title="Angualr &amp; Bootstrap를 사용한 마음에 드는 테마들"></a>Angualr &amp; Bootstrap를 사용한 마음에 드는 테마들</h4><ul><li><a href="https://www.bootstrapzero.com/" target="_blank" rel="noopener">https://www.bootstrapzero.com/</a></li><li><a href="https://www.bootstrapzero.com/bootstrap-template/material-kit" target="_blank" rel="noopener">https://www.bootstrapzero.com/bootstrap-template/material-kit</a></li><li><a href="http://www.responsivemiracle.com/best-angular-2-material-design-theme/" target="_blank" rel="noopener">http://www.responsivemiracle.com/best-angular-2-material-design-theme/</a></li><li><a href="http://www.creative-tim.com/product/light-bootstrap-dashboard-pro/?affiliate_id=85444" target="_blank" rel="noopener">http://www.creative-tim.com/product/light-bootstrap-dashboard-pro/?affiliate_id=85444</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angualr </tag>
            
            <tag> bootstrap </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Deadlock이 뭐지? (Java Thread와 Deadlock에 대한 고찰)</title>
      <link href="/2016/08/06/20160806-about_deadlock/"/>
      <url>/2016/08/06/20160806-about_deadlock/</url>
      
        <content type="html"><![CDATA[<h2 id="들어가기-전에"><a href="#들어가기-전에" class="headerlink" title="들어가기 전에"></a>들어가기 전에</h2><p>최근에 Deadlock이 뭔지 고민해보는 시간이 있었다. 뭐 요즘 들어서 Reactor다 Akka다 뭐다 해서 비동기 프로그래밍을 손쉽게 할 수 있는 프레임워크나 라이브러리가 있어서 Deadlock에 대해 신경을 안쓰고 살고 있어 대답이 선뜻 나오질 못했다. Deadlock이 뭔가요에 대한 질문에 그냥 막연히 다수의 Thread가 서로의 Lock을 기다리는 상황이라고만 대답했는데, 이참에 좀 더 구체적으로 Deadlock이 뭐고 원인, 해결에는 뭐가 있는지 알아봐야 겠다. 정리 하는김에 Java Fork &amp; Join, ThreadLocal, stream parallel에 대해서도 살펴봐야겠다.  </p><h2 id="Deadlock의-원인"><a href="#Deadlock의-원인" class="headerlink" title="Deadlock의 원인"></a>Deadlock의 원인</h2><p><img src="/image/20160806-about_deadlock/deadlock.jpg" title="현실에서 Deadlock 상황"></p><blockquote><p>데드락은 예전부터 <code>식사하는 철학자 dining philosophers</code> 문제로 널리 알려져 왔다. 다섯 명의 철학자가 중국 음식점에 저녁 식사를 하러 가서 둥그런 테이블에 앉았다. 테이블에는 다섯 개의 젓가락(다섯 쌍이 아닌 다섯 개)이 개인별 접시 사이에 하나씩 놓여있다. 철학자는 ‘먹는’ 동작과 ‘생각하는’ 동작을 차례대로 반복한다. 먹는 동안에는 접시 양쪽에 있는 젓가락 두 개를 모아 한 쌍을 만들어야 자신의 접시에 놓인 음식을 먹을 수 있고, 음식을 먹은 이후에는 젓가락을 다시 양쪽에 하나씩 내려 놓고 생각을 시작한다.  </p><p>(중략)</p><p>모든 철학자가 각자 자기 왼쪽에 있는 젓가락을 집은 다음 오른쪽 젓가락을 사용할 수 있을 때까지 기다렸다가 오른쪽 젓가락을 집어서 식사를 한다면, 모든 철학자가 더 이상 먹지 못하는 상황에 다다를 수 있다. 철학자 모두가 먹지 못하는 상황은 음식을 먹는 데 필요한 자원을 모두 다른 곳에서 확보하고 놓지 않기 때문에 모두가 서로 상대방이 자원을 놓기만을 기다리는, 이른바 <code>데드락</code>이 걸린다.<br><code>자바 병렬 프로그래밍 P.305</code></p></blockquote><p>식사하는 철학자의 문제를 Java Thread에 접목하여 Deadlock이 생기는 과정을 살펴보면 다음과 같다.</p><pre><code>// 데드락 위험이 있는 코드public class LeftRightDeadlock {  private final Object left = new Object();  private final Object right = new Object();  public void leftRight() {    synchronized (left) {      synchronized (right) {        doSomething();      }    }  }  public void rightLeft() {    synchronized (right) {      synchronized (left) {        doSomethingElse();      }    }  }}</code></pre><ul><li>스레드 A가 락 left을 확보한 상태에서 락 right을 확보하려 대기</li><li>스레드 B가 락 right을 확보한 상태에서 락 left을 확보하려고 대기</li><li>양쪽 스레드 A, B는 서로가 락을 풀기를 영원히 기다리게 됨</li></ul><p>위와 같이 Java Thread에서도 스레드 하나가 특정 락(Lock)을 놓지 않고 계속 잡고 있으면 그 락을 확보하려는 다른 스레드는 락이 풀릴 때까지 기다리는 수 밖에 없다. Deadlock은 Thread가 두 개의 락을 획득하려 하는 코드에서 나타난다. 학교에서 배울 때는 이 정도 수준에서 멈추는 경우가 많은데 데드락은 상용 서비스를 시작하고 나서 시스템에 부하가 걸리는 경우와 같이 최악의 상황에서 그 모습을 드러내곤 한다. 더군다나 아주 심도있는 방법으로 부하 테스트(load-testing)을 진행했다 하더라도 발생 가능한 데드락 모두 찾아낼 수는 없다. JVM에서는 데이터베이스 서버와 같이 데드락 상태 추적 기능이 없기 때문에 Java Application에서 데드락이 발생했을 때 정상으로 되돌리려 한다면 애플리케이션을 종료하고 다시 실행하는 것밖에 없다.</p><h2 id="Deadlock-예방하기"><a href="#Deadlock-예방하기" class="headerlink" title="Deadlock 예방하기"></a>Deadlock 예방하기</h2><h3 id="방법-1-Lock이-발생하는-순서를-정해놓는다"><a href="#방법-1-Lock이-발생하는-순서를-정해놓는다" class="headerlink" title="방법 1. Lock이 발생하는 순서를 정해놓는다."></a>방법 1. Lock이 발생하는 순서를 정해놓는다.</h3><blockquote><p>프로그램 내부의 모든 스레드에서 필요한 락을 모두 같은 순서로만 사용한다면, 락 순서에 의한 데드락은 발생하지 않는다.<br><code>자바 병렬 프로그래밍 P.307</code></p></blockquote><pre><code>// 해결 전: 데드락 위험이 있는 코드public void transferMoney (Account fromAccount, Account toAccount, DollarAmount amount) {  synchronized (fromAccount) {    synchronized (toAccount) {      if (fromAccount.getBalance().compareTo(amount) &lt; 0) {        throw new InsufficientFundsException();      } else {        fromAccount.debit(amount);        toAccount.credit(amount);      }    }  }}</code></pre><p>위 코드를 얼핏보면 경합이 일어나지 않을 코드 같다. 하지만 파라미터 fromAccount와 toAccount에 순서만 달리해서 동시 호출이 일어난다면 데드락이 걸릴 확률이 증가하게 된다.</p><pre><code>// 해결 후: Lock이 발생하는 순서를 제어한 경우private static final Object tieLock = new Object();public void transferMoney(final Account fromAccount, final Account toAccount, final DollarAmount amount) {  class Helper {    public void transfer() {      if (fromAccount.getBalance().compareTo(acmount) &lt; 0) {        throw new InsufficientFuncsException();      } else {        fromAccount.debit(amount);        toAccount.credit(ammount);      }    }  }  int fromHash = System.identityHashCode(fromAccount);  int toHash = System.identityHashCode(toAccount);  if (fromHash &lt; toHash) {    synchronized(fromAccount) {      synchronized(toAccount) {        new Helper().transfer();      }    }  } else if (fromHash &gt; toHash) {    synchronized(toAccount) {      synchronized(fromAccount) {        new Helper().transfer();      }    }  } else {    synchronized (tieLock) {      synchronized(fromAccount) {        synchronized(toAccount) {          new Helper().transfer();        }      }    }  }}</code></pre><h3 id="방법-2-오픈-호출"><a href="#방법-2-오픈-호출" class="headerlink" title="방법 2. 오픈 호출"></a>방법 2. 오픈 호출</h3><p>메소드 호출이라는 것은 그 너머에 어떤 일이 일어나는지 모르게 막아주는 추상화 방법이다. 하지만 호출한 메소드 내부에서 어떤 일이 일어나는지 알지 못하기 때문에 특정 락을 확보한 상태에서 다른 메소드를 호출한다는 것은 파급 효과를 분석하기가 어렵고 위험한 일이다. 이에 따라 락을 전혀 확보하지 않은 상태에서 메소드를 호출하는 것이 좋은데 이것을 오픈 호출이라고 한다. (스레드 안정성을 확보하기 위해 캡슐화 기법encapsulation을 사용하는 것과 비슷)  </p><p>락을 확보하지 않은 상태에서 메소드를 호출하는게 관건!  </p><h3 id="방법-3-락의-시간-제한"><a href="#방법-3-락의-시간-제한" class="headerlink" title="방법 3. 락의 시간 제한"></a>방법 3. 락의 시간 제한</h3><p>암묵적인 락 synchronized 말고 락 시간을 제한할 있는 Lock 클래스의 tryLock 메소드를 사용한다. 암묵적인 락은 락을 확보할 때까지 영원히 기다리지만, Lock 클래스 등의 명시적인 락은 일정 시간을 정해두고 그 시간 동안 락을 확보하지 못한다면 tryLock 메소드가 오류를 발생시키도록 할 수 있다.</p><h2 id="스레드-덤프를-활용한-Deadlock-분석하기"><a href="#스레드-덤프를-활용한-Deadlock-분석하기" class="headerlink" title="스레드 덤프를 활용한 Deadlock 분석하기"></a>스레드 덤프를 활용한 Deadlock 분석하기</h2><p>스레드 덤프 분석이라면 여기 훌륭한 글이 이미 있다.<br><a href="http://d2.naver.com/helloworld/10963" target="_blank" rel="noopener">http://d2.naver.com/helloworld/10963</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Thread </tag>
            
            <tag> Deadlock </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>나만의 책속 한 줄 -  책 &#39;DDD Start!&#39;를 읽으면서...</title>
      <link href="/2016/08/03/20160803-ddd_reading_memo/"/>
      <url>/2016/08/03/20160803-ddd_reading_memo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>예를 들어, 게시글 데이터를 ARTICLE 테이블과 ARTICLE_CONTENT 테이블로 나눠서 저장한다고 하자.  </p><p>(중략)  </p><p>[그림4.5]만 보면 ARTICLE_CONTENT 테이블의 ID 칼럼이 식별자이므로 ARTICLE_CONTENT와 맵핑되는 ArticleContent를 엔티티로 생각할 수 있는데, 이것 때문에 Article과 ArticleContent를 두 엔티티 간의 일대일 연관으로 매핑하는 실수를 할 수 있다.  </p></blockquote><p>책을 읽다말고 ‘아니 이게 왜 실수인가?’ 라는 생각이 퍼뜩 들었다. 왜냐하면 평소에도 Article과 ArticleContent는 각각 엔티티로 만들어서 연관관계를 맺어줘야 한다고 생각했기 때문이다. 그런데 그 다음을 읽자 내가 생각없이 코딩하고 있었다는 것이 여실히 들어나게 되는 순간을 맞이하게 되었다.  </p><blockquote><p>ArticleContent를 엔티티로 생각할 수 있지만 ArticleContent는 Article의 내용을 담고 있는 밸류로 생각하는 것이 맞다. ARTICLE_CONTENT의 ID는 식별자이기는 하지만 이 식별자를 사용하는 이유는 ARTICLE 테이블의 데이터와 연결하기 위함이지 ARTICLE_CONTENT를 위한 별도 식별자가 필요하기 때문은 아니다. 즉, 이는 게시글의 특정 프로퍼티를 별도 테이블에 보관한 것으로 접근해야 한다.  </p></blockquote><p>아…그 동안 엔티티를 생각없이 무분별하게 남용해왔다는 것을 느꼈다. 여지껏 Article, ArticleContent와 비슷한 상황을 자주 경험하곤 했는데 그 때마다 1대1 연관관계를 맺어서 데이터를 조회해왔던 것이 생각이 났다. 이 책에서 Aggregate, Domain 등에 대해서 얘기하고 있는데 정작 나는 이런 개념들을 모른채 그저 생각없이 JPA를 써왔던 것 같다. ArticleContent를 밸류로 인식하기 위해서는 <code>@Embaddable</code> 대신 <code>@SecondaryTable</code>를 사용하는 것으로 책에는 설명을 하고 있다.</p><pre><code>import javax.persistence.*;@Entity@Table(name = &quot;article&quot;)@SecondaryTable(    name = &quot;article_content&quot;,    pkJoinColumns = @PrimaryKeyJoinColumn(name = &quot;id&quot;))public class Article {    @Id    private Long id;    private String title;    @AttributeOverrides({        @AttributeOverride(name = &quot;content&quot;, column = @Column(table = &quot;article_content&quot;)),        @AttributeOverride(name = &quot;contentType&quot;, column = @Column(table = &quot;article_content&quot;))    })    private ArticleContent content;}</code></pre><p><br></p><pre><code>&#x2F;&#x2F; @SecondaryTable로 매핑된 article_content 테이블을 조인Article article = entityManager.find(Article.class, 1L);</code></pre><p>여기서 굳이 <code>@SecondaryTable</code>나 <code>@AttributeOverrides</code>와 같은 어노테이션을 소개하려고 이 글을 쓰려했던 것은 아니다. 엔티티와 밸류를 어떻게 취급하느냐에 대해 주목해야 될 것 같다. 4장에서 애그리거트에서 엔티티와 밸류를 어떻게 다뤄야 되는지에 대한 주옥같은 방법과 설명들이 있는데 그동안 JPA를 생각없이 썼던 나에겐 굉장한 충격이었다. 책을 좀 더 읽고 애그리거트와 엔티티를 어떻게 나눌지 고민하면서 코딩을 해야겠다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> DDD </tag>
            
            <tag> 나만의_책속_한줄 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Logback &amp; SLF4J를 쓰면서 만났던 문제</title>
      <link href="/2016/07/15/20160715-logback_and_slf4j/"/>
      <url>/2016/07/15/20160715-logback_and_slf4j/</url>
      
        <content type="html"><![CDATA[<p>최근 Oozie에서 RabbitMQ로 메세지를 전송하는 Common Action 개발을 맡았다. 여기서 Action은 Spring Boot 기반으로 개발하고 있었는데 문제는 Spring Boot가 실행되면서 Logging 관련 라이브러리가 말썽을 일으켜 Spring Boot가 아예 실행조차 되질 않는 상황이 발생했다. 상황을 자세히 설명하자면 다음과 같다.</p><h4 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h4><ul><li>Oozie에서 Executable Jar를 실행하는 Action이 하나 있었다.</li><li>그런데 이 Jar파일은 Spring Boot Application 이었고, Jar 파일 안에는 관련 있는 디펜던시 라이브러리들이 모두 한데 묶여 포함되어 있었다. (한마디로 Fat Jar)</li><li>디펜던시 중에는 Logback-core-1.1.3, Logback-classic-1.1.3, Slf4j-api-7.1.13이 있었고, 하필 Oozie 클러스터에 Slf4j-log4j2가 존재하고 있었다.<pre><code>// TODO: 간략한 Dependency Tree 표기할 것</code></pre></li><li>다시 Spring Boot로 초점을 맞춰보면, Spring Boot가 Bootstraping 하면서 여러 Spring Event를 발생시키게 되는데 그 중에 하나가 org.springframework.boot.logging.LoggingApplicationListener이다.</li><li>여기서 LoggingApplicationListener가 ApplicationStartedEvent를 핸들링 할 때 발생하는데, ApplicationStartedEvent를 받으면 LoggingSystem의 구현체를 결정하고 그 구현체를 초기화하는 로직이 실행되게 된다.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onApplicationStartedEvent</span><span class="token punctuation">(</span>ApplicationStartedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>loggingSystem <span class="token operator">=</span> LoggingSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getSpringApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>loggingSystem<span class="token punctuation">.</span><span class="token function">beforeInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>문제는 LoggingSystem의 구현체를 결정할 때(LoggingSystem.get 메소드를 호출할 때) 현재 디펜던시 상황에 따라 LogbackLoggingSystem이 결정되고 초기화가 진행되는데 초기화 진행 중 StaticLoggerBinder에게 LoggerContext를 요청한 뒤 요청 결과물을 LoggerContext로 캐스팅을 진행할 때 결과물이 Log4jLoggerFactory라고 인식이 되어 캐스팅 불가능하게 되어 예외가 발생하며 시스템이 실행되질 않는다.<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> LoggerContext <span class="token function">getLoggerContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ILoggerFactory factory <span class="token operator">=</span> StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>LoggerContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> factory<span class="token punctuation">,</span>    String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>        <span class="token string">"LoggerFactory is not a Logback LoggerContext but Logback is on "</span>            <span class="token operator">+</span> <span class="token string">"the classpath. Either remove Logback or the competing "</span>            <span class="token operator">+</span> <span class="token string">"implementation (%s loaded from %s). If you are using "</span>            <span class="token operator">+</span> <span class="token string">"WebLogic you will need to add 'org.slf4j' to "</span>            <span class="token operator">+</span> <span class="token string">"prefer-application-packages in WEB-INF/weblogic.xml"</span><span class="token punctuation">,</span>        factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getLocation</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>LoggerContext<span class="token punctuation">)</span> factory<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>뭔소리인지 소스코드와 함께 다시 설명하자면 StaticLoggerBinder.getSingleton().getLoggerFactory()의 결과물이 Logback의 LoggerContext가 아니라 Slf4j-log4j2의 Log4jLoggerFactory가 반환된다는 소리이다.</li></ul><p>왜 이런 문제가 발생하는 것일까?<br>앞에서도 이미 말했지만 Logback과 Slf4j-log4j2에 각각 존재하는 StaticLoggerFactory의 구현체가 서로 다르기 때문에 발생하는 문제이다. 사실 java의 Logging 라이브러리를 조금 유심히 살펴본 사람이라면 금방 알아차릴 수 있는 문제이긴 하지만, 모르더라도 Logback과 Slf4j의 소스코드를 살펴보면 구현체가 뭐가 다른지를 알 수 있다. 그럼 어떻게 해결해야 될까?</p><p>위 문제의 원인을 요약하자면 다음과 같다.</p><ul><li>Oozie 클러스터에 있는 slf4j-log4j2 라이브러리 때문에 Spring boot에서 Logback과 오류를 일으킨다.  </li><li>문제는 Logback이 아니라 Spring boot에서 logback과 slf4j-log4j2를 같이 쓰면 오류를 발생시키는게 문제이다.  </li></ul><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><ul><li>spring boot를 안쓰거나 (LoggingApplicationListener만 등록 안하게 하는 것도 방법일 것 같다.)</li><li>logback을 안쓰거나 (Logback을 안쓰고 Slf4j-log4j2를 쓰게 만드는 전략)</li><li>slf4j-log4j2의 LoggerFactory가 인식되기 전에 logback-classic의 LoggerFactory가 인식되게 해야 한다. (아니면 StaticLoggerBinder가 강제로 Logback의 것으로 하게 한다던가..)</li></ul><p>일단 가장 간단한 해결 방법은 Logback을 안쓰는 방법이다. 그런데 그렇게하면 더 이상 파일이나 Standard Output (System.out)으로 로그를 볼 수 없다.<br>그럼 로그도 정상적으로 출력되면서 라이브러리 충돌도 안일으키게 하려면 어떻게 해야될까?</p><h4 id="그-외-앞으로-할-일…"><a href="#그-외-앞으로-할-일…" class="headerlink" title="그 외 앞으로 할 일…"></a>그 외 앞으로 할 일…</h4><p>이번 문제가 어느 정도 해결이 되고 나면 Java의 Logging 라이브러리를 좀 더 연구해봐야 겠다. Logback과 Slf4j의 공식 사이트가서 영어 까막눈이 레퍼런스를 들여다봐도 장님 코끼리 더듬는 느낌이다…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Logback </tag>
            
            <tag> SLF4J </tag>
            
            <tag> oozie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/07/11/20160711-hello_world/"/>
      <url>/2016/07/11/20160711-hello_world/</url>
      
        <content type="html"><![CDATA[<p>안녕하세요! 여긴 저의 개인적인 낙서장이자, 놀이터, 지식 저장소 입니다.<br>다람쥐가 도토리, 밤을 집에 모아놓듯이 저도 일이나 공부하면서 얻은 지식과 경험을 여기에 차곡차곡 모을 생각 입니다.  </p>]]></content>
      
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
