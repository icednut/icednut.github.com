{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee"}},"markdownRemark":{"id":"bca3376f-b517-539d-a513-4632b8a4ee5d","excerpt":"개요 책을 읽다가 실무에서도 많이 쓰일 것 같은 Java9에서의 Stream 다루기가 나오길래 정리!! null이 제거된 Stream 얻기id 목록 스트림이 있고, 아래의 lookup 메소드를 이용하여 얻어진 User 목록 중 null…","html":"<h2>개요</h2>\n<p><code class=\"language-text\">가장 빨리 만나는 코어 자바9</code> 책을 읽다가 실무에서도 많이 쓰일 것 같은 Java9에서의 Stream 다루기가 나오길래 정리!! </p>\n<h2>null이 제거된 Stream 얻기</h2>\n<h3>id 목록 스트림이 있고, 아래의 lookup 메소드를 이용하여 얻어진 User 목록 중 null이 제거된 목록 스트림을 얻어내려면 어떻게 할까?</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>보통 아래와 같이 작성할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ids <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optinal</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>하지만 flatMap을 이용하면 좀 더 우아하게 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이렇게 stream으로 변환하면 각 stream 호출은 User 인스턴스가 없거나 혹은 1개로 구성된 stream을 반환한다. 그 후 flatMap 메소드에서 이 스트림들을 결합하면 null인 user 인스턴스는 제거되어 처리된다.</p>\n<blockquote>\n<p>라고 책에서 봤는데 실제로 그런가 해서 코드를 뜯어봤더니 flatMap 메소드를 호출한다고 해서 null 인스턴스가 그 즉시 제거되는 것은 아니었다.</p>\n<p>정확히 말하자면 결과를 모으는 작업, 즉 collect 메소드를 호출할 때 flatMap의 파라미터로 들어온 Function 람다를 실행(apply 메소드 호출)을 하게 된다.  이 때 람다는 위에서 작성한 <code class=\"language-text\">Optaion&lt;User&gt;</code>를 <code class=\"language-text\">Stream&lt;User&gt;</code>로 변환하는 람다인데 null 인스턴스를 품고 있는 Optional일 경우 <code class=\"language-text\">Stream.empty()</code>을 통해 빈 스트림으로 변환하고 결과를 모으는 Spliterator는 EmptySpliterator로 결정되어 결국엔 결과를 모으는 작업에서 제외된다. 그렇기 때문에 결국 null인 user 인스턴스가 제거된다.</p>\n</blockquote>\n<p><del>뭔 소리여?</del></p>\n<p>일단 아래와 같이 flatMap 메소드까지 호출해서 얻어낸 stream은 결과가 처리되기를 기다리고 있는 stream 인스턴스가 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>아래와 같이 collect 메소드를 호출해야지만 map과 flatMap에 주어진 람다를 호출해서 걸러진 결과가 ArrayList로 모아진다. 이렇게 결과를 모을 때 처리과정을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>일단 map은 생략하고 flatMap 메소드의 코드를 살펴보자. ids는 Array의 stream이기 때문에 <code class=\"language-text\">ReferencePipeline.Head</code> 인스턴스로 시작되는 스트림으로 결정된다. 이후 map을 거쳐 flatMap으로 들어오면 <code class=\"language-text\">ReferencePipeline</code>에 있는 flatMap 메소드를 호출하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReferencePipeline</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>P_IN<span class=\"token punctuation\">,</span> P_OUT<span class=\"token punctuation\">></span></span>\n        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractPipeline</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>P_IN<span class=\"token punctuation\">,</span> P_OUT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&lt;</span>P_OUT<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>P_OUT<span class=\"token punctuation\">></span></span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> P_OUT<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// We can do better than this, by polling cancellationRequested when stream is infinite</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StatelessOp</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>P_OUT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StreamShape</span><span class=\"token punctuation\">.</span>REFERENCE<span class=\"token punctuation\">,</span>\n                                     <span class=\"token class-name\">StreamOpFlag</span><span class=\"token punctuation\">.</span>NOT_SORTED <span class=\"token operator\">|</span> <span class=\"token class-name\">StreamOpFlag</span><span class=\"token punctuation\">.</span>NOT_DISTINCT <span class=\"token operator\">|</span> <span class=\"token class-name\">StreamOpFlag</span><span class=\"token punctuation\">.</span>NOT_SIZED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>P_OUT<span class=\"token punctuation\">></span></span> <span class=\"token function\">opWrapSink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sink</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> sink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sink</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ChainedReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>P_OUT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>sink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        downstream<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">P_OUT</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// We can do better that this too; optimize for depth=0 case and just grab spliterator and forEach it</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                                result<span class=\"token punctuation\">.</span><span class=\"token function\">sequential</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>downstream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이 때 flatMap 메소드의 22번째 줄인 <code class=\"language-text\">try (Stream&lt;? extends R&gt; result = mapper.apply(u))</code>라는 코드 실행되는데 이 코드를 실행하면 앞에서 파라미터로 넘겨준 <code class=\"language-text\">Optional::stream</code> 메소드 레퍼런스가 실행된다. 이후 다음과 같이 실행된다.</p>\n<ol>\n<li>\n<p>user 인스턴스를 품고 있는 Optional 인스턴스 일 때</p>\n<ul>\n<li>해당 Optional 인스턴스는 <code class=\"language-text\">Stream.of(user)</code>로 변환</li>\n<li>user 인스턴스를 처리할 수 있는 spliterator 인스턴스를 갖고 있는 stream으로 결정</li>\n<li><code class=\"language-text\">.collect(Collector.toList)</code> 실행 시 해당 spliterator 인스턴스를 실행하여 user 인스턴스를 ArrayList에 add하여 결과를 모은다.</li>\n</ul>\n</li>\n<li>\n<p>null을 품고 있는 Optional 일 때</p>\n<ul>\n<li>해당 Optional 인스턴스는 <code class=\"language-text\">Stream.empty()</code>로 변환</li>\n<li>이 스트림은 EmptySpliterator를 갖고 있는 stream으로 결정</li>\n<li><code class=\"language-text\">.collect(Collector.toList)</code> 실행 시 EmptySpliterator 인스턴스를 처리하면 해당 스트림에는 처리할 요소가 없으므로 ArrayList에는 아무런 인스턴스도 add하지 않고 끝난다.</li>\n</ul>\n</li>\n</ol>\n<p>정리하자면 결과를 모으는 작업을 호출해야지 빈 스트림에 대해 아무런 처리하지 않고 넘어간다.</p>\n<br/>\n<h3>이번에는 lookup 메소드가 null을 반환할 수 있는 경우라면 stream 처리를 어떻게 할까?</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">User</span> <span class=\"token function\">classicLookup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이럴 때 보통 아래와 같이 filter 메소드를 통해 null 인스턴스를 필터링할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">classicLookup</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>하지만 jdk9을 쓴다면 아래와 같이 null을 Stream으로 변환하여 처리하면 아까와 같이 null인 요소는 건너뛰고 결과를 모을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-></span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token function\">classicLookup</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Users</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">classLookup</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>스트림 결과 모으기를 할 때 합계, 카운트, 평균, 최댓값, 최솟값으로 모으려면?</h2>\n<p>jdk9을 쓴다면 <code class=\"language-text\">summarizing(Int|Long|Double)</code> 메소드를 사용하여 SummaryStatistics 타입의 인스턴스를 받아서 처리하면 간단하게 구할 수 있다. 이 메서드는 스트림 객체를 숫자로 매핑하는 함수를 받고 합계, 카운트, 평균, 최댓값, 최솟값을 동시에 계산해서 <code class=\"language-text\">(Int|Long|Double)SummaryStatistics</code> 타입으로 결과를 돌려준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">IntSummaryStatistics</span> summary <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">summarizingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> averageWordLength <span class=\"token operator\">=</span> summary<span class=\"token punctuation\">.</span><span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> maxWordLegnth <span class=\"token operator\">=</span> summary<span class=\"token punctuation\">.</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>출처</h2>\n<ul>\n<li>가장 빨리 만나는 코어 자바9 p.320, p.322</li>\n</ul>","frontmatter":{"title":"Java9에서의 Stream에 관한 짧은 팁","date":"2018-05-24 15:07:00","tags":["java9","stream"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20180524-java-stream-tips/","previous":{"fields":{"slug":"/20180412-understanding-observer-pattern/"},"frontmatter":{"title":"To-Do App 개발을 통한 Observer Pattern 이해하기 (javascript 버전)"}},"next":{"fields":{"slug":"/20180706-about-grpc/"},"frontmatter":{"title":"gRPC 살펴보기 (gRPC Overview)"}}}}