{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"0632c565-a6cd-5881-bd06-3312c10a0d64","excerpt":"Garbage Collection이란?Garbage Collector를 이해 하려면 Java에서의 메모리 관리 방법과 Garbage Collection이라는 행위(GC Algorithm)를 이해할 필요가 있다. 그 후 Garbage Collector 별로 어떻게 Garbage…","html":"<h2>Garbage Collection이란?</h2>\n<p>Garbage Collector를 이해 하려면 Java에서의 메모리 관리 방법과 Garbage Collection이라는 행위(GC Algorithm)를 이해할 필요가 있다. 그 후 Garbage Collector 별로 어떻게 Garbage Collection을 하는지 알아볼 것이다. 이 글에서는 Oracle에서 공식 개발 및 배포하고 있는 Hotspot JVM을 기준으로 진행한다.</p>\n<h3>Java에서 메모리를 해제하는 것은 개발자의 영역이 아니다.</h3>\n<p>Java에서는 변수나 객체를 다양한 방법으로 선언하고 메모리를 할당 받는다. 그러나 이미 할당 받은 객체나 변수를 해제하는 방법은 없다. System.gc()나 close()와 같은 함수를 떠올릴 수도 있겠지만, 이것은 Garbage Collection을 명시적으로 수행하거나 해당 객체의 사용을 중지하겠다는 의사 표현일 뿐 직접적으로 객체를 메모리에서 삭제(해제)하진 않는다.</p>\n<p>여기서 메모리 해제는 Heap이나 Method Area에 있는 특정한 Object를 Memory에서 삭제한다는 의미다.</p>\n<p>그럼 Java에서는 이런 메모리 해제 작업을 누가 어떻게 할까? 바로 Garbage Collector가 담당하며, 메모리 해제하는 작업을 Garbage Collection이라고 한다.</p>\n<p>JVM Specification에서 Garbage Collection에 대한 정의는 다음과 같다.</p>\n<blockquote>\n<p>Heap storage for objects is reclaimed by an automatic storage management system (typically a garbage collector); objects are never explicity deallocated.</p>\n<br/>\n<p>Heap은 Object를 위한 메모리 공간이고 Garbage Collector라고 하는 자동화된 시스템에 의해 Heap은 재사용 될 수 있다. Object는 절대로 (개발자에 의해) 명시적으로 해제되지 않는다.</p>\n<br/>\n<p>- Java Virtual Machine Speculation, Sectio 3.5.3 [JVMS2 1999]</p>\n</blockquote>\n<p>JVM 벤더들은 위 JVM Specification만 보고 그에 맞게 메모리 구조(Heap Layout)을 구성하고 Garbage Collection에 대한 알고리즘을 적용한 Garbage Collector를 구현했다.</p>\n<p>이러한 노력 덕분에 Java를 사용하면 메모리 해제에 대한 고민을 개발자가 안해도 되게 되었지만 개발자의 의도와는 다르게 프로그램이 갑자기 Garbage Collection만 하면 Suspend 된다거나 하는 현상이 나타날 수 있다. 이러한 현상에 대처하기 위해서는 개발자도 Garbage Collection에 대해 알 필요가 있다.</p>\n<h3>그래서 Garbage Collection이 뭐라고?</h3>\n<p>Garbage Collection이란 행위를 살펴보면 다음과 나눠서 볼 수 있다.</p>\n<ul>\n<li><strong>Collect</strong>: Heap과 Method Area라는 메모리 영역에서 사용되지 않는 Object를 모으고 </li>\n<li><strong>Flush</strong>: 이렇게 모은 Garbage들을 메모리에서 해제한다.</li>\n</ul>\n<p>그럼 사용되지 않는 Object는 어떻게 판단할까? Java에서는 Root Set과의 관계로 판단한다. 즉 Root Set과 연된되지 않는 Object가 있으면 그것은 Garbage Collection 대상이 된다는 의미이다.</p>\n<p>그럼 Root Set이란 뭘까? (정확히 말해 Root Set은 뭘로 구분할까?)</p>\n<ul>\n<li>\n<p>Stack의 참조 정보</p>\n<ul>\n<li>Local Variable Section과 Operand Stack이라는 스택 공간에 Object Reference 데이터가 있다면 이것은 Reachable Object로 판단하며 현재 Thread들이 사용하고 있는 것으로 간주한다. 즉, Garbage Collection의 입장에서는 두 스택공간이 Root Set이 되는 것이다.</li>\n</ul>\n</li>\n<li>\n<p>Constant Pool에 있는 Reference 정보</p>\n<ul>\n<li>Method Area에 로딩된 클래스(static variable이 선언된 클래스)들은 Thread들이 직접적으로 참조하고 있지 않지만 Constant Pool을 통해 간접적으로 Link하고 있는 Reachable Object이다. 그러므로 Constant Pool도 Root Set으로 볼 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>Native Method로 넘겨진 Object Reference</p>\n<ul>\n<li>Native Method로 넘겨진 Object는 JNI 형태로 현재 참조관계가 있는 Object이기 때문에 Reachable Object로 판단한다.</li>\n</ul>\n</li>\n</ul>\n<p>위 세 가지 기준에 따라 Reachable Object 여부를 판단하게 되며 Root Set과 관계 없이 상호 참조만 하고 있는 Object가 있다면 Garbage Collector는 이것을 Garbage로 판단하고 메모리를 해제한다.</p>\n<h3>Heap Fragmentation(힙의 단편화) 등장</h3>\n<p>Garbage Collection의 목적은 새로운 Object의 할당을 위해 한정된 Heap 공간을 재활용하려는 목적으로 수행된다. 그러나 여기서 Garbage가 빠져나간 공간 재활용을 위해 해제한 메모리 공간은 할당했던 그 자리에서 일어나기 때문에 메모리 공간이 듬성듬성해진다. 이렇게 듬성듬성해진 공간이 1kbyte, 2kbyte, 3kbyte 3개를 확보한 상태에서 5kbyte 크기의 Object를 할당하려고하면 할당할 수 없게 된다. 이러한 문제를 Heap Fragmentation이라고 한다.</p>\n<p>이걸 방지하기 위해 어떻게 해야 될까? Garbage Collector는 메모리 해제 후 Compation이라는 알고리즘을 사용한다. (Compaction: 압축, 메모리 공간 정리 작업)</p>\n<h3>정리</h3>\n<p>Garbage Collection을 한 줄로 정리하자면 다음과 같다.</p>\n<blockquote>\n<p>Garbage Collection이란 Heap을 재활용하기 위해 Root Set에서 참조되지 않는 Object를 없애 가용한 공간을 만드는 작업</p>\n</blockquote>\n<p>Garbage Collection이란 이러한 메모리 해제 작업에 대한 알고리즘이고, Garbage Collector은 Garbage Collection을 실행하는 주체라고 보면 된다.</p>\n<h2>Garbage Collection의 기본 알고리즘</h2>\n<p>Java의 Garbage Collection 알고리즘은 여러 시행착오와 경험에 의해 발전되어 왔다. 대표적으로 6개의 알고리즘이 있는데 최근에 Garbage First(G1 GC)라는 새로운 알고리즘도 나왔다. (G1 GC는 Train 알고리즘의 아이디어를 빌려와 채용했다고 한다.) 각 알고리즘의 동작과정과 특징을 살펴보면 GC알고리즘 한 개가 있으면 이 것에 대한 단점을 보완하거나 멀티코어 환경, 서버환경, 클라이언트(모바일) 환경에서의 효율적인 GC를 위해 더 발전된 형태로 다음 GC 알고리즘이 탄생한 것을 볼 수 있다. 그럼 6가지 GC 알고리즘에 대해 알아보자.</p>\n<ul>\n<li>Reference Counting Algorithm</li>\n<li>Mark-and-Sweep Algorithm</li>\n<li>Mark-and-Compaction Algorithm</li>\n<li>Copying Algorithm</li>\n<li>Generational Algorithm</li>\n<li>Train Algorithm</li>\n</ul>\n<h3>Reference Counting Algorithm</h3>\n<p>이 알고리즘은 Java 초기에 나온 알고리즘을 Garbage를 수집하는 것에만 집중되어 있다. Reference Counting 알고리즘 이후의 알고리즘들은 수집 뿐만 아니라 Heap Memory를 어떻게 재활용해야 하는 고민들에 초점이 맞추어 지는 것을 볼 수 있다.</p>\n<p>Reference Count 알고리즘의 기본 아이디어는 다음과 같다.</p>\n<ul>\n<li>각 Object 마다 Reference Count를 관리하여 Reference Count가 0이 되는 Object는 Garbage로 간주하고 메모리 해제</li>\n<li>즉, Object에 Reference 되면 Reference Count는 1이 증가하고 Reference가 사라지면 1이 감소</li>\n<li>이 Reference 관계가 간접적이라 하더라도 참조하고 있는 모든 Object에 대해 연쇄적으로 Reference Count가 변경</li>\n</ul>\n<h4>동작 방식 이해</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<ul>\n<li>예제1</li>\n<li>예제2</li>\n</ul>\n<h4>문제점</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<ul>\n<li>Memory Leak이 발생할 가능성이 있다. (Root Set - a - b - c - a의 상황에서 Root Set과 a의 관계가 끊어지게 되도 a는 살아있게 됨)</li>\n</ul>\n<h3>Mark-and-Sweep Algorithm</h3>\n<p>Mark-and-Sweep 알고리즘은 Tracing Algorithm이라고도 불린다. 이 알고리즘은 Reference Counting 알고리즘의 단점을 극복하기 위해 나왔다고 볼 수 있다. Mark-and-Sweep 알고리즘은 두 가지 단계로 구분되어 진행된다.</p>\n<ul>\n<li>\n<p>Mark Phase</p>\n<ul>\n<li>Garbage Object를 구별해 내는 단계</li>\n<li>Root Set에서 Reference 관계가 있는 Object에 대해 Marking하는 작업 진행</li>\n<li>Marking은 주로 Object Header에 Flag에 하거나 별도의 Bitmap Table등을 사용</li>\n</ul>\n</li>\n<li>\n<p>Sweep Phase</p>\n<ul>\n<li>Marking되지 않은 Object를 지우는 작업</li>\n</ul>\n</li>\n</ul>\n<h4>동작 방식 이해</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<h4>문제점</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<ul>\n<li>Garbage Collection 과정 중에는 Heap의 사용이 제한되기 때문에 프로그램이 잠깐 멈추는 현상(Suspend) 발생</li>\n<li>Heap Fragmentation 발생</li>\n</ul>\n<h3>Mark-and-Compaction Algorithm</h3>\n<p>이 알고리즘은 Mark-and-Sweep 알고리즘의 단점을 보완하고자 나왔다. 앞의 알고리즘에서 Compaction이 포함되었다고 보면 된다. 이 알고리즘도 두 가지 단계로 구분되어 진행된다.</p>\n<ul>\n<li>\n<p>Mark Phase</p>\n<ul>\n<li>Mark-and-Sweep 알고리즘의 Mark Phase와 Sweep Phase가 이 단계와 동일</li>\n</ul>\n</li>\n<li>\n<p>Compaction Phase</p>\n<ul>\n<li>Mark Phase에서 살아남은 Live Object를 연속된 메모리 공간에 차곡차곡 적재</li>\n<li>Arbitrary 방식, Linear 방식, Sliding 방식이 있는데 Hotspot JVM은 Sliding 방식을 채용</li>\n</ul>\n</li>\n</ul>\n<h4>동작 방식 이해</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<h4>문제점</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<ul>\n<li>Compaction Phase를 통해 Fragmentation을 방지 및 메모리 공간의 효율성이 좋아졌지만, 모든 Reference를 메모리 공간에서 업데이트하는 작업이 성능 측면에서 오버헤드가 될 수 있다.</li>\n<li>Mark Phase와 Compaction Phase 모두 Suspend 현상이 발생한다.</li>\n</ul>\n<h3>Copying Algorithm</h3>\n<p>이 알고리즘은 Fragmentation의 문제를 해결하기 위해 제시된 또 다른 방법이라고 보면된다. 이 알고리즘 부터는 Heap을 영역별로 나누어서 다루게 되는데 Copying 알고리즘은 Heap을 Active 영역, Inactive 영역으로 나누어 사용한다. 이 알고리즘의 동작을 요약하면 다음과 같다.</p>\n<ul>\n<li>Active 영역에만 Object를 할당 받을 수 있음</li>\n<li>Active 영역이 꽉차서 더 이상 Allocation이 불가능해지면 Garbage Collection 수행</li>\n<li>Active 영역에서 살아남은 Live Object는 Inactive 영역으로 Copy하고 Active 영역을 비움 (이를 Scavenge라고 함)</li>\n<li>Inactive에 복사할 때 한 쪽 방향에서 차곡차곡 적재를 하기 때문에 Fragmentation이 극복됨</li>\n<li>이 알고리즘의 단점은 Garbage Collection을 하려고 하면 일단 프로그램은 Suspend 상태가 된다.</li>\n</ul>\n<h4>동작 방식 이해</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<h4>문제점</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<ul>\n<li>GC 수행 전 Suspend하고 GC 진행</li>\n<li>Fragmentation 방지에는 효과적이지만 전체 Heap의 절반 정도를 사용하지 못함 (Active, Inactive로 나뉘어 있기 때문)</li>\n<li>Copy 작업이 오버헤드</li>\n</ul>\n<h3>Generational Algorithm</h3>\n<p>앞서 소개한 Copying 알고리즘을 사용하면서 JVM은 몇 가지 경험을 알게 된다.</p>\n<ul>\n<li>Copying 알고리즘을 사용하면서 대부분의 프로그램에서 생성되는 대다수의 Object는 생성된지 얼마 되지 않아 Garbage가 된다</li>\n<li>어떤 프로그래밍라 하더라도 수명이 긴 몇 개의 Object는 반드시 가지고 있다</li>\n<li>이렇게 긴 수명의 Object (Long Lived Object)의 경우 Inactive와 Active를 계속 왔다 갔다 하면서 Copy 작업이 일어나며 이에 대한 Overhead가 만만치 않음</li>\n</ul>\n<p>위 경험들을 극복하기 위해 Generational 알고리즘이 나오게 되었으며, 이 알고리즘은 Copying 알고리즘의 연장선상에 있다고 볼 수 있다. 이 알고리즘에서는 Heap을 Youngest Generation Sub Heap, Oldest Generation Sub Heap 이렇게 두 부분으로 나누어 사용한다. 이 알고리즘의 특징은 다음과 같다.</p>\n<ul>\n<li>Object는 처음에 할당하게 되면 Youngest Generation Sub Heap에 위치</li>\n<li>GC가 일어날 때마다 살아남은 Object는 age라는 메타 정보를 증가</li>\n<li>age가 임계값을 넘어가는 Youngest Generation Sub Heap의 Object들은 Oldest Generation Sub Heap으로 이동 (이를 Promotion이라고 함)</li>\n</ul>\n<p>이 알고리즘의 장점은 Heap을 Young, Old라는 두 가지 부분으로 나누어서 다루기 때문에 각 부분마다 GC를 따로따로 실행할 수 있게 되었고, 또 Young, Old 각각 다른 알고리즘을 적용할 수도 있게 되었다. 그렇기 때문에 Hotspot JVM이나 IBM JVM에서도 이 알고리즘을 사용하게 된다. 여기서는 단순히 Young, Old라고만 적었는데 Hotspot JVM에서는 Young Generation 안에서도 Eden, Survivor 등과 같은 영역으로 나눠서 좀 더 세분화하여 Heap을 다룬다.</p>\n<h3>Train Algorithm</h3>\n<p>Tracing 알고리즘 이후 Suspend 현상이 나타나는 것은 골치거리였다. 특히 WAS와 같이 짧은 트랜잭션을 처리하는 시스템의 경우 불규칙적인 Suspend 현상은 불쾌한 사용자 경험만 안겨줄 뿐이다. Train 알고리즘은 Suspend와 같은 현상을 극복하기 위해 Heap을 작은 Memory Block으로 나누어 Single Block 단위로 Mark Phase &#x26; Copy Phase로 구성된 Garbage Collection을 수행한다. 덕분에 작은 메모리 블록 별로 스레드가 GC를 수행하여 Suspend를 분산시켜 Pause Time 줄여보자는 아이디어인 것이다. 이 알고리즘은 Garbage First Garbage Collector의 알고리즘이 되며 결국 Java 9에서는 G1GC가 Default Garbage Collector로 채택되게 된다.</p>\n<h4>동작 방식 이해</h4>\n<p>이 부분은 추후 업데이트 예정</p>\n<h2>Hotspot JVM의 Garbage Collection</h2>\n<p>오라클에서 유지보수하고 있는 공식 Hotspot JVM은 Generational Collection 방식을 택하고 있다. 최근 Garbage First Garbage Collection을 기본으로 택하면서 그 방식이 약간 변경되긴 했지만 공통적으로 Heap을 Generation이라는 영역별로 나누어 사용하는 것이 Hotspot JVM의 가장 큰 특징이다.</p>\n<p><img src=\"./20180325-about-java-garbage-collection/hotspot_jvm_heap.png\" alt=\"otspot_jvm_hea\"></p>\n<p>이미지 출처: <a href=\"http://performeister.tistory.com/60\">http://performeister.tistory.com/60</a></p>\n<p>Hotspot JVM의 Heap 메모리 구조는 다음과 같이 되어 있다.</p>\n<ul>\n<li>\n<p>Young Generation</p>\n<ul>\n<li>Eden</li>\n<li>Survivor 1</li>\n<li>Survivor 2</li>\n</ul>\n</li>\n<li>\n<p>Old Generation</p>\n<ul>\n<li>Tenured</li>\n</ul>\n</li>\n<li>Permanent Generation</li>\n</ul>\n<h4>Eden 영역</h4>\n<ul>\n<li>Young Generation은 Object를 Allcation하는 영역이며, 그 중에서 Eden 영역은 Object가 최초로 할당되는 영역</li>\n<li>Object Allocation은 TLAB(Thread Local Allocation Buffer)라는 기술을 사용</li>\n</ul>\n<blockquote>\n<p>What is TLAB?</p>\n<ul>\n<li>Thread 마다 할당을 위한 주소 범위를 미리 부여하고 그 범위 내에서 Object Allocation을 하게 하는 것</li>\n<li>이러한 범위를 Thread Local Allocation Buffer라고 부름</li>\n<li>Thread 별로 공간을 나누어 주어 그 안에서 아무런 대기 현상 없이 Allocation이 가능해짐</li>\n<li>단 TLAB를 Thread에게 최초 할당하거나 할당된 TLAB가 부족하여 새로 받을 때는 동기화 이슈가 발생하지만 Object Allocation 횟수에 비하면 이 동기화는 껌</li>\n</ul>\n</blockquote>\n<h4>Survivor 1, 2 영역 (From, To 영역이라고도 함)</h4>\n<ul>\n<li>Eden 영역에서 Old Generation으로 가기 위한 대기 장소</li>\n<li>이 영역의 Object가 Old Generation으로 가는 것을 Promotion 이라고 함</li>\n<li>여기까지를 Young Generation 이라고 하며, Young Generation에서 발생하는 Garbage Collection을 Minor GC라고 부른다.</li>\n</ul>\n<h4>Old Generation</h4>\n<ul>\n<li>Tenured 영역이라고도 하며 Long Lived Object가 머무르는 곳이다.</li>\n<li>Old Generation에서 발생하는 Garbage Collection을 Major GC라고 부른다.</li>\n<li>Major GC는 Promotion을 통해 Old Generation으로 Object가 이동하는 과정에서 메모리가 부족해지면 발생</li>\n<li>Major GC는 Minor GC로 인해 Garbage Collection이 확산된 것</li>\n</ul>\n<h4>Permanent Generation</h4>\n<ul>\n<li>추후 설명 예정</li>\n</ul>\n<p>이렇게 Generation을 나누고 Minor GC, Major GC로 나눠서 GC를 하게 되면 전체적인 Suspend Time을 줄일 수 있다. 여기에는 대부분의 Object는 새로 생겨난 후 얼마되지 않아 Garbage가 된다는 가정이 깔려있다. 또한 Older Object가 Younger Object를 참조하는 일은 상당히 드물다는 가정이 깔려있다. 이러한 가정을 바탕으로 Minor GC를 가볍게 유지하기 위해 노력한다.</p>\n<p>그런데 Older Object가 Young Generation에 있는 Object를 참조하는 경우는 어떻게 할 것인가? 드물긴해도 불가능한 것은 아니다. 만약 이런 상황이라면 Minor GC 이후 Major GC에서 Old generation의 Object들의 Reference를 모두 추적한다면 Heap Memory 전체 Suspend 시간이 길어져 곤란하다. 이를 해결하기 위해 태어난게 Card Table과 Write Barrier 이다.</p>\n<h4>Card Table &#x26; Write Barrier</h4>\n<p>추후 설명 업데이트 예정</p>\n<ul>\n<li>Old Object가 Young Object를 참조하고 있다면 Old Object의 시작주소에 해당하는 Card에 Dirty 표시</li>\n<li>이렇게 표시하는 작업을 수행하는 것을 Write Barrier이 수행</li>\n</ul>\n<h2>출처</h2>\n<ul>\n<li>\n<p>Java Performance Fundamental, 김한도 지음 (2009년도 출판)</p>\n</li>\n<li>\n<p>[http://performeister.tistory.com/60]: <a href=\"http://performeister.tistory.com/60\">http://performeister.tistory.com/60</a></p>\n<p>​</p>\n</li>\n</ul>","frontmatter":{"title":"Java Garbage Collector 이해하기 Part 1 (with G1GC, Garbage First GC)","date":"2018-03-25 12:53:46","tags":["java","garbage collector"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/03/25/20180325-about-java-garbage-collection/","previous":{"fields":{"slug":"/2018/03/05/20180305-start-druid/"},"frontmatter":{"title":"Druid 파헤치기 - 입문"}},"next":{"fields":{"slug":"/2018/03/27/20180327-understanding-composite-pattern/"},"frontmatter":{"title":"To-Do App 개발을 통한 Composite Pattern 이해하기 (javascript, java 버전)"}}}}