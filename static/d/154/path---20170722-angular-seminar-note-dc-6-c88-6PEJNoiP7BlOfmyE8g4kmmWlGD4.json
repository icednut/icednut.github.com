{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"c32c146a-d1af-50e7-bbd3-69585ad3ac4a","excerpt":"커리큘럼프론트엔드 개발환경의 변화와 앵귤러 맛보기앵귤러 아키텍처앵귤러 프레임워크 활용 예시질의응답 및 마무리\n\n시작하기 전에..Angular Framework 전체 구조를 알아보고 Angular CLI, Spring-boot를 사용하여 데모 프로젝트 개발 과정 소개할 예정Angular…","html":"<h3>커리큘럼</h3>\n<ol>\n<li>프론트엔드 개발환경의 변화와 앵귤러 맛보기</li>\n<li>앵귤러 아키텍처</li>\n<li>앵귤러 프레임워크 활용 예시</li>\n<li>질의응답 및 마무리\n<br/>\n<br/></li>\n</ol>\n<h3>시작하기 전에..</h3>\n<ul>\n<li>Angular Framework 전체 구조를 알아보고 Angular CLI, Spring-boot를 사용하여 데모 프로젝트 개발 과정 소개할 예정</li>\n<li>\n<p>Angular로 Server Side Rendering을 하기 위해 Angular preboot 프로젝트가 진행되고 있다고 함 (세미나에서는 다루지 않음)</p>\n<ul>\n<li>찾아보니깐 이걸 말하고 있었음 (<a href=\"https://github.com/angular/universal\">https://github.com/angular/universal</a>)</li>\n</ul>\n</li>\n<li>저자는 프론트엔드 전문 개발자는 아니며 백엔드 개발자이지만 운영툴을 만들면서 Angular를 접하게 되었다고 함.\n<br/>\n<br/></li>\n</ul>\n<h3>프론트엔드 개발환경의 변화와 앵귤러 맛보기</h3>\n<ul>\n<li>Javascript, jQuery의 탄생 (Javascript는 Brendan Erich가 2주만에 만들었다고 함. 만들 당시 Prototype 프로그래밍과 스크립트에 심취해 있어 Javascript에 해당 철학들이 녹아들어졌다고 함)</li>\n<li>브라우저 별 ES6 지원 현황: <a href=\"http://kangax.github.io/compat-table/es6\">http://kangax.github.io/compat-table/es6</a></li>\n<li>JS가 2015년도에 왜 갑자기 관심을 받기 시작했을까? 저자 생각으로는 node.js 때문이 아닐까라고 생각..</li>\n<li>\n<p>Node.js 덕분에 Javascrit를 브라우저에서 벗어나 서버 웹어플 개발에도 사용할 수 있게 됨 -> 그래서 JS가 발전하게 되었다고 생각함.</p>\n<ul>\n<li>라이브러리 모듈 현황(JS가 엄청 많다는걸 보여주고 있음): <a href=\"http://www.modulecounts.com/\">http://www.modulecounts.com/</a></li>\n<li>JS 개발 스펙트럼: <a href=\"http://joaoperibeiro.com/the-front-end-developer-spectrum\">http://joaoperibeiro.com/the-front-end-developer-spectrum</a></li>\n</ul>\n</li>\n</ul>\n<h4>프론트엔드의 주요 3대 도구 분류</h4>\n<ul>\n<li>\n<p>패키지 관리 도구</p>\n<ul>\n<li>Bower</li>\n<li>NPM</li>\n<li>Yarn</li>\n</ul>\n</li>\n<li>\n<p>자동화 및 Task 도구</p>\n<ul>\n<li>Grunt</li>\n<li>Gulp</li>\n<li>Yeoman</li>\n<li>NPM</li>\n</ul>\n</li>\n<li>\n<p>Compiler (Preprocessor)</p>\n<ul>\n<li>CoffeeScript</li>\n<li>Babel</li>\n<li>Typescript</li>\n</ul>\n</li>\n</ul>\n<h4>Module화를 향한 노력</h4>\n<ul>\n<li>CommonJS, AMD(RequireJS)</li>\n<li>Webpack, Module in ES6\n<br/>\n<br/></li>\n</ul>\n<h3>Angular Framework 이해하기</h3>\n<ul>\n<li><strong>Angular is a framework.</strong></li>\n<li>Angular는 <strong>Client application</strong>(Web, Mobile Web, Native Mobile, Native Desktop)을 좀 더 만들기 쉽게 하기 위해 나왔으며 <strong>Typescript</strong>로 개발할 수 있다.</li>\n<li>앵귤러는 매주 마다 뭘 개발할건지 그리고 뭘 배포할 것인지 공유를 한다고 함 (올해 말에는 구글 내부에서 사용하는 빌드 툴도 개발할 계획이라고 함)</li>\n<li>\n<p>구글은 Angular를 이용한 웹 어플리케이션의 정석 결과물을 오픈 소스로 공개했다.</p>\n<ul>\n<li>angular.io가 앵귤러로 만든 앱의 가장 좋은 선례 (<a href=\"https://github.com/angular/angular/tree/master/aio\">https://github.com/angular/angular/tree/master/aio</a>)</li>\n<li>구글의 의도: Angular로 개발할라믄 angular.io를 참고해서 만들어라.</li>\n</ul>\n</li>\n<li>Angular는 왜 Typescript를 차용했을까? 이걸 참조할 것 (<a href=\"http://www.notforme.kr/archives/1809\">http://www.notforme.kr/archives/1809</a>)</li>\n<li>ngrx (Angular Redux)</li>\n</ul>\n<h4>주요개념1. Component</h4>\n<ul>\n<li>모든 View는 Component로 통한다. (컴포넌트는 앵귤러에서 처음 나온 개념은 아니고 웹 컴포넌트라고 이미 있었음. ex: polymer)</li>\n<li>컴포넌트 기반으로 웹어플 개발을 할 때는 컴포넌트들은 트리 구조로 관리 된다는 것을 기억하자.</li>\n<li>컴포넌트 트리의 최상위 루트 컴포넌트는 관례적으로 AppComponent이다.</li>\n</ul>\n<h4>주요개념2. Template</h4>\n<ul>\n<li>Template? View를 구성하는 Angular-style의 마크업</li>\n<li>Component와 짝꿍</li>\n</ul>\n<h4>주요개념3. Component Lifecycle</h4>\n<ul>\n<li>어플리케이션이 컴포넌트가 언제 생성되고 관리 되는지에 대한 라이프사이클을 알고 있어야 됨.</li>\n<li>라이프사이클에 따른 컴포넌트 관리는 Angular Framework가 해줌</li>\n<li>컴포넌트 라이프사이클에 대한 Hooking은 ngOnChanges, ngOnInit, ngDoCheck, …, ngOnDestory를 구현하여 할 수 있음.</li>\n<li>\n<p>Angular를 처음 써본사람들의 실수가 constructor와 ngOnInit의 차이를 잘 몰라서 constructor에 뭔가 초기화 코드를 작성하려고 한다는 점.</p>\n<ul>\n<li>constructor에서 구현하면 안되고 ngOnInit을 사용하자.</li>\n</ul>\n</li>\n<li>ngDoCheck() -> 컴포넌트를 쫙 스캔할 때 호출되는 메소드(? 뭔지 좀 더 알 필요가 있음)</li>\n</ul>\n<h4>주요개념4. Directive &#x26; Pipe</h4>\n<ul>\n<li>Directive와 Pipe는 Template에서 사용하는 개념</li>\n<li>Directive: View를 동적으로 제어하기 위한 요소</li>\n<li>\n<p>Structural Directive</p>\n<ul>\n<li>NgIf, NgFor, NgSwitch, …</li>\n</ul>\n</li>\n<li>\n<p>Attribute Directives</p>\n<ul>\n<li>NgStyle, NgClass, …</li>\n</ul>\n</li>\n<li>Angular에서는 document를 통해서 DOM 셀렉팅 및 변경하는 것을 죄악시 함. Angular가 그런 부분들을 다 하려고 노력.</li>\n<li>\n<p>Pipe: View에 노출하는 데이터를 변형할 때 사용</p>\n<ul>\n<li>ex: <code class=\"language-text\">\\{\\{ now | date:&#39;YYYY-MM-dd&#39; \\}\\}</code></li>\n<li>ex: json beauty pipe</li>\n</ul>\n</li>\n</ul>\n<h4>주요개념5. Data Binding</h4>\n<ul>\n<li>View와 컴포넌트를 따로 테스트 할 수 없을까? 테스트하려면 셀레니움을 통한 통합 테스트를 해야되는데 그거 말고 view만 테스트하고 싶을 때는? Data Binding을 통해 View와 컴포넌트의 종속성을 제거</li>\n<li>Component(+Template)과 View 사이의 연결 고리</li>\n<li>Angular에 제공하는 3가지 바인딩: Property(In), Event(Out), 2-way Binding</li>\n<li>\n<p>Attribute와 Property의 차이점</p>\n<ul>\n<li>Html DOM을 브라우저에 로딩하기 전에는 Attribute지만 로딩하여 메모리에 올라간 것이 Property</li>\n<li>Angular는 여기서 Property를 변경해준다. (Attribute 변경이 아님)</li>\n</ul>\n</li>\n</ul>\n<h4>주요개념6. Service &#x26; Dependency Injection</h4>\n<ul>\n<li>단일책임원칙, 의존성 주입</li>\n<li>Angular는 constructor의 파라미터로 의존성을 주입받는다.</li>\n<li>\n<p>컴포넌트마다 providers를 쓰는 것은 지양하긴 한다. 왜냐 DI 받으려고 하는 정보가 바뀔 때마다 모든 컴포넌트를 다 찾아가서 고쳐야되기 때문.</p>\n<ul>\n<li>AppModule의 providers에 정의하면 모든 컴포넌트의 constructor에서 DI 받을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h4>주요개념7. Module</h4>\n<ul>\n<li>여기서 말하는 모듈은 ES6에서 말하는 모듈은 아님</li>\n<li>앞의 주요 개념에 대한 Angular 요소들을 하나로 담은 컨테이너라고 보면 됨.</li>\n<li>ex: FormsModule, RouterModule, …</li>\n<li>AppModule는 Angular로 개발할 때 딱 1번만 작성하면 됨.\n<br/>\n<br/></li>\n</ul>\n<h3>Angular CLI &#x26; Spring-boot를 이용한 데모 시연</h3>\n<ul>\n<li>Google 내부에서는 Angular-cli를 쓰진 않는다고 함.</li>\n<li>Google에서는 추후 Bazel(<a href=\"https://bazel.build/\">https://bazel.build/</a>) + CLouser 기반의 빌드 도구를 내놓을 수도 있다고 함.</li>\n<li>저자 말로는 현재까지 Angular 개발 시 Angular-cli가 제일 좋다고 함. (저자의 의견일 뿐)</li>\n<li>저자는 nginx의 gzip 옵션을 붙여서 쓴다고 함</li>\n<li>데모는 Todo App을 라이브코딩 했는데 시간에 쫓겨서 Todo 등록, 조회만 구현</li>\n</ul>","frontmatter":{"title":"앵귤러 첫걸음 저자 세미나 노트","date":"2017-07-22 12:39:28","tags":["Angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20170722-angular-seminar-note/","previous":{"fields":{"slug":"/20170719-spring-basic-day01/"},"frontmatter":{"title":"스프링 퀵 스타트 Day 01"}},"next":{"fields":{"slug":"/20170830-oracle-code-seoul/"},"frontmatter":{"title":"Oracle Code Seoul"}}}}