{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"2fd61394-a4bd-5771-a3a4-66b3e5f1505e","excerpt":"출처: 스칼라로 배우는 함수형 프로그래밍 6장Chapter 06. 순수 함수적 상태이번 챕터에서 다룰 내용난수 발생(scala.util.Random)의 문제점순수 함수적으로 난수 발생하기상태가 있는 함수를 순수하게 하기난수 발생기 일반화하기순수 상태 함수 일반화하기난수 발생(scala…","html":"<p>출처: 스칼라로 배우는 함수형 프로그래밍 6장</p>\n<h2>Chapter 06. 순수 함수적 상태</h2>\n<p>이번 챕터에서 다룰 내용</p>\n<ul>\n<li>난수 발생(scala.util.Random)의 문제점</li>\n<li>순수 함수적으로 난수 발생하기</li>\n<li>상태가 있는 함수를 순수하게 하기</li>\n<li>난수 발생기 일반화하기</li>\n<li>순수 상태 함수 일반화하기</li>\n</ul>\n<br/>\n<br/>\n<h3>난수 발생(scala.util.Random)의 문제점</h3>\n<p>스칼라의 난수 발생기 클래스(scala.util.Random)은 부수 효과에 의존하는 메소드를 제공한다. 왜 이렇게 말하는걸까?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> rng <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> scala<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Random\nrng<span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Random <span class=\"token operator\">=</span> scala<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Random<span class=\"token annotation punctuation\">@74fab04a</span>\n\nscala<span class=\"token operator\">></span> rng<span class=\"token punctuation\">.</span>nextDouble\nres0<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.8020301517138297</span>\n\nscala<span class=\"token operator\">></span> rng<span class=\"token punctuation\">.</span>nextDouble\nres1<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.169106827118352</span>\n\nscala<span class=\"token operator\">></span> rng<span class=\"token punctuation\">.</span>nextInt\nres2<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">968884305</span>\n\nscala<span class=\"token operator\">></span> rng<span class=\"token punctuation\">.</span>nextInt<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nres3<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">scala.util.Random.nextDouble</code>, <code class=\"language-text\">scala.util.Random.nextInt</code> 메소드를 보면 호출할 때마다 다른 값(난수)이 나오는 것을 볼 수 있다. <u>이것은 해당 메소드들이 호출될 때마다 갱신되는 어떤 내부 상태가 존재한다고 가정할 수 있다</u> (즉 부수효과가 있는 메소드라는 의미). <u>상태 갱신은 부수효과로서 수행되므로 이 메소드들은 참조에 투명하지 않다고 볼 수 있다.</u></p>\n<blockquote>\n<p>부수효과가 있으면 뭐가 안좋다고?</p>\n<ul>\n<li>검사, 합성, 모듈화가 어려워진다.</li>\n<li>병렬화가 쉽지 않다.</li>\n</ul>\n</blockquote>\n<p>과연 그럴까? 부수효과가 있는 함수의 검사성을 살펴보자.</p>\n<h5>문제)</h5>\n<p>주사위 메소드를 구현해보자. 이 메소드는 반드시 1 이상 6 이하의 정수를 돌려주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> rollDie<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> rng <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> scala<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Random\n    rng<span class=\"token punctuation\">.</span>nextInt<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// *</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그런데 <code class=\"language-text\">rng.nextInt(6)</code>은 0 이상 5 이하의 난수를 돌려준다. 그러므로 1 이상 6 이하의 값을 준다는 검사에서 여섯 번 중 다섯 번은 실패하게 되는데 이는 랜덤하게 발생된다. 이 버그를 문제라고 말한다. 왜 이 버그가 이슈일까?</p>\n<ul>\n<li>이슈: 버그가 명백하지만 재현하기가 어렵다.</li>\n<li>이슈: 만약 프로그램이 복잡해지고 버그가 그에 비례하여 복잡해진다면 이를 재현하기가 점점 더 어려워지고 이를 재현하기 위해 프로그래머의 능력이 훨씬 중요해진다.</li>\n</ul>\n<h5>해결1)</h5>\n<p>해결책으로는 난수 발생기 <code class=\"language-text\">rng</code> 를 인수로 전달하는 것이다. 왜 이렇게 할까?</p>\n<ul>\n<li>답: 실패한 검사를 재현할 때 당시에 인수로 쓰인 <code class=\"language-text\">rng</code>를 재사용하기 위해</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> rollDie<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Random<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>그러나 여기에도 이슈가 있다.</p>\n<ul>\n<li>이슈: rng를 인수로 받았다고 해도 여전히 <code class=\"language-text\">rng.nextInt</code> 를 호출하면 rng 내부의 상태가 변한다.</li>\n<li>이슈: 검사를 재현할 때 당시에 인수로 쓰인 rng의 상태가 동일하게 하기 위해서는 nextInt 메소드 호출을 추적해야 되는 메커니즘을 따로 개발해야 된다.</li>\n</ul>\n<p>결국 해결하기 위해서는 <u>부수효과</u>를 피해야 한다.</p>\n<h3>순수 함수적으로 난수 발생하기</h3>\n<p>앞의 문제를 어떻게 해결할까? 상태 갱신을 명시적으로 드러내는 방법으로 난수 생성 함수 호출 시 난수와 상태를 담고 있는 난수생성기를 함께 반환하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> RNG <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> nextInt<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (난수, 난수 생성에 사용된 난수 생성기)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이 트레이트를 사용해서 간단한 난수 생성기를 구현하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> SimpleRNG<span class=\"token punctuation\">(</span>seed<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> RNG <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> nextInt<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> newSeed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>seed <span class=\"token operator\">*</span> <span class=\"token number\">0x5DEECE66D</span>L <span class=\"token operator\">+</span> <span class=\"token number\">0xB</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFFFFFFFF</span>L\n        <span class=\"token keyword\">val</span> nextRNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span>newSeed<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newSeed <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toInt\n\n        <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> nextRNG<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><u><code class=\"language-text\">nextInt</code> 메소드를 살펴보면 <code class=\"language-text\">newSeed</code>(상태)가 담긴 새로운 <code class=\"language-text\">SimpleRNG</code> 인스턴스를 생성하여 난수를 생성하고 있다.</u></p>\n<p>그렇기 때문에 동일한 객체의 <code class=\"language-text\">nextInt</code> 함수를 아무리 많이 호출해도 동일한 <code class=\"language-text\">newSeed</code>를 사용하여 난수를 생성하기 때문에 이 함수는 순수하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> rng <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\nrng<span class=\"token operator\">:</span> SimpleRNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt <span class=\"token comment\">// 1</span>\nn1<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">16159453</span>\nrng2<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">1059025964525</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng2<span class=\"token punctuation\">.</span>nextInt <span class=\"token comment\">// 2</span>\nn2<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1281479697</span>\nrng3<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">197491923327988</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>n3<span class=\"token punctuation\">,</span> rng4<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng2<span class=\"token punctuation\">.</span>nextInt <span class=\"token comment\">// 3</span>\nn3<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1281479697</span>\nrng4<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">197491923327988</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>n4<span class=\"token punctuation\">,</span> rng5<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt <span class=\"token comment\">// 4</span>\nn4<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">16159453</span>\nrng5<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">1059025964525</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 예제에서 보면 <code class=\"language-text\">rng.nextInt</code>1과 4 두 번 실행했음에도 불구하고 동일한 난수를 얻었다. 마찬가지로 2와 3에서도 동일한 난수 생성기로 난수 생성 호출 <code class=\"language-text\">rng2.nextInt</code> 을 했음에도 불구하고 동일한 난수를 얻었다. 따라서 nextInt 함수는 이제 순수해졌다. (상태가 사라짐)</p>\n<p>이 난수 생성기를 사용하면 다음과 같이 동일한 랜덤값을 갖는 튜플을 만들수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> randomPair<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt\n    <span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>더 발전하여 서로 다른 두 수와 이를 만들 때 사용한 난수 생성기를 반환하는 함수도 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> randomPair<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng2<span class=\"token punctuation\">.</span>nextInt <span class=\"token comment\">// i1과 i2가 다르게 하기 위해 rng2 난수 생성기를 사용</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">,</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 최종 상태가 담긴 rng3을 함께 반환한다.</span>\n                     <span class=\"token comment\">// 왜 이렇게 할까? 호출자는 이 rng3을 이용해서 다른 난수를 생성하게 하기 위해</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>상태가 있는 함수를 순수하게 하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> s<span class=\"token operator\">:</span> FooState <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> bar<span class=\"token operator\">:</span> Bar\n    <span class=\"token keyword\">def</span> baz<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">trait</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> bar<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Bar<span class=\"token punctuation\">,</span> Foo<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> baz<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> Foo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">bar</code> 과 <code class=\"language-text\">baz</code> 가 상태 s를 변이한다고 하자. 이 함수들을 순수 함수적으로 만들려면 앞의 난수 생성기와 같이 새로운 상태가 담긴 Foo 객체를 반환하는 패턴을 사용하면 된다. </p>\n<blockquote>\n<p>이 패턴을 적용한다는 것은 계산된 다음 상태를 프로그램의 나머지 부분에 전달하는 책임을 호출자에게 넘기는 것과 같다.</p>\n</blockquote>\n<p>앞의 난수 생성의 순수함수 패턴을 일반화가 필요한 시점이다.</p>\n<p>잠깐 연습문제를 풀고 넘어가자.</p>\n<h5>연습문제 6.1</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// 0 이상, Int.MaxValue 이하의 난수 Int를 반환하는 함수 만들기</span>\n<span class=\"token comment\">// Int.MinValue도 대응하기 (Math.abs(Int.MinValue) == -2147483648)</span>\n<span class=\"token keyword\">def</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> newRng<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> rng<span class=\"token punctuation\">.</span>nextInt\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">.</span>MinValue<span class=\"token punctuation\">)</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> i\n    <span class=\"token keyword\">val</span> t <span class=\"token operator\">=</span> result <span class=\"token operator\">>></span> <span class=\"token number\">31</span>\n\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">^</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> newRng<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 참고: 조건문 없는 절대값 함수 구하기 (http://alloc.tistory.com/137)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\ni<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">16159453</span>\nrng2<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">1059025964525</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng2<span class=\"token punctuation\">)</span>\ni2<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1281479697</span>\nrng3<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">197491923327988</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i3<span class=\"token punctuation\">,</span> rng4<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng3<span class=\"token punctuation\">)</span>\ni3<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">340305902</span>\nrng4<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">259172689157871</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>연습문제 6.2</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// 0 이상, 1 미만의 Double 난수 구하기</span>\n<span class=\"token keyword\">def</span> double<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">.</span>toDouble <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> rng1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nd<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.007524831686168909</span>\nrng1<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">1059025964525</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng1<span class=\"token punctuation\">)</span>\nd<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5967354853637516</span>\nrng2<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">197491923327988</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng2<span class=\"token punctuation\">)</span>\nd<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.15846728440374136</span>\nrng3<span class=\"token operator\">:</span> RNG <span class=\"token operator\">=</span> SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">259172689157871</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>연습문제 6.3</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> intDouble<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nintDouble<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> doubleInt<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndoubleInt<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> double3<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">,</span> rng3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">,</span> rng4<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> double<span class=\"token punctuation\">(</span>rng3<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rng4<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndouble3<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> intDouble<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres35<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">16159453</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5967354853637516</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">197491923327988</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> doubleInt<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres36<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.007524831686168909</span><span class=\"token punctuation\">,</span><span class=\"token number\">1281479697</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">197491923327988</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> double3<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres37<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.007524831686168909</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.5967354853637516</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.15846728440374136</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">259172689157871</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>연습문제 6.4</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> ints<span class=\"token punctuation\">(</span>count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> loop<span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> result<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pastRng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> newRng<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>pastRng<span class=\"token punctuation\">)</span>\n            loop<span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">:</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">,</span> newRng<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> pastRng<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    \n    loop<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> ints<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres41<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1837487774</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94901159</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1163632441</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1015914512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1934589059</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1770001318</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2015756020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">340305902</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1281479697</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16159453</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">120421598792892</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> ints<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres42<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">1770001318</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2015756020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">340305902</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1281479697</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16159453</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">115998806404289</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nscala<span class=\"token operator\">></span> ints<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres43<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token number\">994512970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1835563077</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1166376033</span><span class=\"token punctuation\">,</span> <span class=\"token number\">384268462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250029321</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1911657181</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1660936491</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1571634817</span><span class=\"token punctuation\">,</span> <span class=\"token number\">141607732</span><span class=\"token punctuation\">,</span> <span class=\"token number\">122709694</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1837487774</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94901159</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1163632441</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1015914512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1934589059</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1770001318</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2015756020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">340305902</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1281479697</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16159453</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SimpleRNG<span class=\"token punctuation\">(</span><span class=\"token number\">65176402051806</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>난수 발생기 일반화하기</h3>\n<p>앞의 구현 패턴들을 살펴보면 <code class=\"language-text\">RNG =&gt; (A, RNG)</code>의 형태를 따른다. RNG에 대해 새로운 상태를 담은 RNG로 변환한다고 해서 이런 함수를 상태 동작(state action) or 상태 전이(state transition)이라고 부른다.</p>\n<p>위 함수에 대해 앨리어스를 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">type</span> Rand<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> RNG <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> RNG<span class=\"token punctuation\">)</span> <span class=\"token comment\">// +A == A 일수도 있고 A의 상위일 수도 있다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이를 사용하면 좀 더 간단하게 표시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> int<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span>nextInt\n<span class=\"token keyword\">def</span> unit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rng <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>자 이제 난수 생성기는 건들지 않고 난수 값을 변환하는 map 함수를 만들어보자. (잉? 갑자기 쌩뚱맞게…)</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> map<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    rng <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 map 함수를 사용하면 0 이상이면서 2로 나누어지는 Int를 발생하는 함수를 쉽게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> nonNegativeEven<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">(</span>nonNegativeInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> i <span class=\"token operator\">-</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h5>연습문제 6.5</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// double 함수를 map 함수를 이용해서 다시 만들어라.</span>\n<span class=\"token comment\">// 0 이상, 1 미만의 Double 난수 구하기</span>\n<span class=\"token keyword\">def</span> double<span class=\"token punctuation\">(</span>rng<span class=\"token operator\">:</span> RNG<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">(</span>nonNegativeInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">.</span>toDouble <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> double<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\nres45<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> $$Lambda$<span class=\"token number\">1497</span><span class=\"token operator\">/</span><span class=\"token number\">760675871</span><span class=\"token annotation punctuation\">@6882c069</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h5>연습문제 6.6</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// ra, rb라는 난수 결과와 이 결과들을 조합하는 함수 f를 조합한 함수를 만들어라</span>\n<span class=\"token keyword\">def</span> map2<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ra<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rb<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> C<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>지금까지의 구현에서 보면 RNG 값을 명시적으로 언급하거나 전달하지 않았다. 특히 map, map2라는 변환 함수에서는 RNG를 명시적으로 다루지 않아도 되어서 개발자가 실수할 일이 줄어들었다.</p>\n<blockquote>\n<p>그러나 map, map2로 커버할 수 없는 함수들도 있다.</p>\n<p>바로 nonNegativeLessThan 이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> nonNegativeLessThan<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">(</span>nonNegativeInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> _ <span class=\"token operator\">%</span> n <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이게 왜 문제일까?</p>\n<ul>\n<li>Int.MaxValue가 n으로 나누어떨어지지 않을 수도 있으므로 전체적으로 난수들이 치우치게 된다.</li>\n<li>Int.MaxValue == 2147483647 이므로 n으로 나누어 떨어지지 않는 수가 발생하므로 0이 나오지 않고 0 이상의 값들이 좀 더 자주 나오게 된다.</li>\n</ul>\n<p>어떻게 해결해야 될까?</p>\n<ul>\n<li>n을 통해 나올 수 있는 최대 배수보다 더 큰 난수가 발생하면 난수를 다시 발생하게 한다.</li>\n<li>왜? 난수가 균등하게 나오게 하기 위해</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> nonNegativeLessThan<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    map<span class=\"token punctuation\">(</span>nonNegativeInt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token keyword\">=></span>\n        <span class=\"token keyword\">val</span> mod <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mod <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> mod <span class=\"token keyword\">else</span> nonNegativeLessThan<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 난수(i)가 32비트 Int를 벗어나지 않는 n의 최대 배수보다 크면 난수를 다시 발생한다.</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>nonNegativeLessThan 함수는 애초에 커링이 안되는 함수인데 난수를 새로 만들려면 새로운 상태의 rng가 필요하다. 그런데 우리는 <code class=\"language-text\">Rand[Int]</code> 를 쓰기 때문에 rng를 명시적으로 넘길 수 없다. 어떻게 해결할까?</p>\n<ul>\n<li>답은 <code class=\"language-text\">map</code> 함수를 쓰지 않고 명시적으로 <code class=\"language-text\">(result, RNG)</code> 을 반환하는 식으로 코딩한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> nonNegativeLessThan<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> rng <span class=\"token keyword\">=></span> \n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> nonNegativeInt<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> mod <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mod <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> rng2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> nonNegativeLessThan<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이걸 쓰면 맨 앞에 나왔던 주사위의 버그를 손쉽게 해결할 수 있다. (주사위 함수가 0 ~ 5 까지 밖에 안나왔던 이슈)</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> rollDie<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">(</span>nonNegativeLessThan<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>nonNegativeLessThan 함수에서 쓸 map 함수와 같은 조합기가 필요한 시점이다. 우리는 이걸 flatMap이라 부른다.</p>\n<h5>연습문제6.8</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> flatMap<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>g<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> Rand<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h5>연습문제6.9</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">map과 map2를 flatMap을 이용해서 다시 구현하라<span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>순수 상태 함수 일반화하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> map<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> S <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> S <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이제 임의이 상태를 처리할 수 있는 Rand보다 더 일반적인 형식을 고려해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">type</span> State<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> State<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>run<span class=\"token operator\">:</span> S <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이제 Rand는 그냥 State로도 표현할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">type</span> Rand<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> State<span class=\"token punctuation\">[</span>RNG<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>또 flatMap 함수를 명령식으로도 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> ns<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n\tint<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>x <span class=\"token keyword\">=></span> \n        int<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>y <span class=\"token keyword\">=></span>\n            ints<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>xs <span class=\"token keyword\">=></span>\n                xs<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> y<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> ns<span class=\"token operator\">:</span> Rand<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token keyword\">&lt;-</span> int\n    y <span class=\"token keyword\">&lt;-</span> int\n    xs <span class=\"token keyword\">&lt;-</span> ints<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> xs<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> y<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"스칼라 스터디 Day05 - 순수 함수적 상태","date":"2018-12-25 15:43:51","tags":["scala","functional programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/12/26/20181226-scala-and-functional-programming-day05/","previous":{"fields":{"slug":"/2018/12/18/20181218-scala-and-functional-programming-day04/"},"frontmatter":{"title":"스칼라 스터디 Day04 - 엄격성과 나태성"}},"next":{"fields":{"slug":"/2019/01/07/20190107-scala-and-functional-programming-day06/"},"frontmatter":{"title":"스칼라 스터디 Day06 - 순수 함수적 병렬성"}}}}