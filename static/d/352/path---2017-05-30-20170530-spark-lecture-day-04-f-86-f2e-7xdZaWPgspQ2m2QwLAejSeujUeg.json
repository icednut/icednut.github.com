{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"7254c5a0-a47f-5c56-95a1-10544ff46550","excerpt":"Machine Learing With SparkK-Means주어진 데이터를 K개의 클러스터로 묶는 알고리즘 (Clustering, unsupervised learning)Center 값을 기준으로 분포를 구분함PIC, K-means 참조ML 코딩 (RDD-based API)Setting…","html":"<h1>Machine Learing With Spark</h1>\n<h2>K-Means</h2>\n<ul>\n<li>\n<p>주어진 데이터를 K개의 클러스터로 묶는 알고리즘 (Clustering, unsupervised learning)</p>\n<ul>\n<li>Center 값을 기준으로 분포를 구분함</li>\n<li>PIC, K-means 참조</li>\n</ul>\n</li>\n<li>\n<p>ML 코딩 (RDD-based API)</p>\n<ol>\n<li>Setting SparkContext</li>\n<li>Load Data (ex: RDD[String] -> RDD[Vector], CSV 파일을 읽어서 한 줄씩 Vector로 변환)</li>\n<li>Train Model</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> model<span class=\"token operator\">:</span> KMeansModel <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span>parsedData<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>clusterCenters<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ol start=\"4\">\n<li>Show Results</li>\n<li>Evaluate (평가)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> cost<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>computeCost<span class=\"token punctuation\">(</span>parsedData<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">- cost 값이 0에 수렴할수록 좋은 모델</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ol start=\"6\">\n<li>Predict</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> predictions1<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>Vectors<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>\n<p>ML 코딩 순서 (DataFrame-based APIs)</p>\n<ol>\n<li>Setting SparkContext</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> sqlContext<span class=\"token operator\">:</span> SQLContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SQLContext<span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span> <span class=\"token comment\">// RDD 프로그래밍과 차이점</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ol start=\"2\">\n<li>Load Data</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> dataSet<span class=\"token operator\">:</span> DataFrame <span class=\"token operator\">=</span> sqlContext<span class=\"token punctuation\">.</span>createDataFrame<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Vectors<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Vectors<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toDF<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"features\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// CSV 파일을 읽어서 String을 Vector로 변환해도 된다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol start=\"3\">\n<li>Train Model</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> model<span class=\"token operator\">:</span> KMeans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> KMeans<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>setK<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>setFeaturesCol<span class=\"token punctuation\">(</span><span class=\"token string\">\"features\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>setPredictionCol<span class=\"token punctuation\">(</span><span class=\"token string\">\"prediction\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> model<span class=\"token operator\">:</span> KMeansModel <span class=\"token operator\">=</span> kmeans<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span>clusterCenters<span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>println<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol start=\"4\">\n<li>Show Results</li>\n<li>Evaluate (평가)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> cost<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>computeCost<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">- cost 값이 0에 수렴할수록 좋은 모델</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ol start=\"6\">\n<li>Predict</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> predictions1<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>Vectors<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Logistic Regression</h2>\n<ul>\n<li>\n<p>독립변수의 선형 결합을 이용하여 사건의 발생 가능성을 예측하는 분석 기법</p>\n<ol>\n<li>Term Frequency: 단어 분포 파악</li>\n<li>Classification Model: 모델 생성</li>\n<li>Predict</li>\n</ol>\n</li>\n<li>모델을 PMML 파일로 디스크에 저장할 수 도 있다.</li>\n</ul>\n<h2>Exercise</h2>\n<ul>\n<li><a href=\"https://github.com/sryza/spark-timeseries\">https://github.com/sryza/spark-timeseries</a></li>\n<li>Spark GraphX: 네트워크 분석, 스팸필터 개발에 쓰임</li>\n<li>PCA: 차원 축소 알고리즘</li>\n<li>Scailing: 데이터를 평탄화하는 작업</li>\n<li>Hyper Parameter</li>\n</ul>\n<h2>SparkR, Sparklyr</h2>\n<ul>\n<li>Sparklyr는 R코드를 분산해서 실행시킬 수 없다.</li>\n<li>DataFrame에서 DataSet으로 변환하는 방법: case class</li>\n</ul>","frontmatter":{"title":"스파크 강의 노트 Day 4","date":"2017-05-30 09:08:40","tags":["Spark"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017/05/30/20170530-spark-lecture-day04/","previous":{"fields":{"slug":"/2017/05/29/20170529-spark-lecture-day03/"},"frontmatter":{"title":"스파크 강의 노트 Day 3"}},"next":{"fields":{"slug":"/2017/06/16/20170616-web-page-lecture/"},"frontmatter":{"title":"웹페이지 실습 강의 노트"}}}}