{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"b47045ad-b5ba-570d-b15d-72efbc67f86a","excerpt":"출처: 스칼라로 배우는 함수형 프로그래밍 5장Chapter 05. 엄격성과 나태성이번 챕터에서 다룰 내용List의 한계Stream (Lazy List)스트림 순회의 비엄격성과 나태성List의 한계스칼라에서 다음 코드는 어떻게 수행될까?스칼라 List의 map과 filter…","html":"<p>출처: 스칼라로 배우는 함수형 프로그래밍 5장</p>\n<h2>Chapter 05. 엄격성과 나태성</h2>\n<p>이번 챕터에서 다룰 내용</p>\n<ul>\n<li>List의 한계</li>\n<li>Stream (Lazy List)</li>\n<li>스트림 순회의 비엄격성과 나태성</li>\n</ul>\n<br/>\n<br/>\n<h3>List의 한계</h3>\n<p>스칼라에서 다음 코드는 어떻게 수행될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>스칼라 List의 map과 filter 함수는 임시적인 목록을 만들어서 그 결과를 반환한다. 즉 <code class=\"language-text\">List(1,2,3,4).map(_ + 10)</code>을 수행하면 <code class=\"language-text\">List(11,12,13,14)</code>를 반환하고 <code class=\"language-text\">List(11,12,13,14).filter(_ % 2 == 0)</code>을 수행하면 <code class=\"language-text\">List(12,14)</code>를 반환한다. 위 코드의 추적 과정은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nList<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nList<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nList<span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 방법은 마치 포커 카드에서 홀수 카드를 모두 제거하고 모든 퀸 카드를 뒤집는 놀이가 있다면, 루프를 한 번만 돌게하여 홀수 카드를 제거한 다음 퀸 카드를 찾는 것이아니라, 루프 한 번에 홀수카드를 제거하고 루프를 또 한 번 돌아서 퀸 카드를 찾는 것과 같은 코드이다.</p>\n<p>위 행동을 요약하자면 아래와 같다.</p>\n<ul>\n<li>\n<p>루프 1</p>\n<ul>\n<li>변환 작업(map)</li>\n<li>임시 결과 목록 1</li>\n<li>루프 2</li>\n<li>필터링 작업(filter)</li>\n<li>임시 결과 목록 2</li>\n<li>\n<p>루프 3</p>\n<ul>\n<li>변환 작업(map)</li>\n<li>결과 목록 3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>좀 더 나은 방법은 없을까? 아래와 같은 방법을 생각할 것이다.</p>\n<ul>\n<li>그럼 임시 자료구조를 생성하는 방식보다는 한 번의 루프로 변환 작업을 합성하여 실행하는 것이 어떨까?</li>\n</ul>\n<p>변환 작업을 하나의 패스로 융합(fusion)해서 루프를 한 번만 돌 때 변환 작업을 수행하는 방식을 택하여 임시 자료구조의 생성을 피하는 것이다.</p>\n<p>쉽게 말하자면 다음과 같다.</p>\n<ul>\n<li>\n<p>루프 1</p>\n<ul>\n<li>변환 작업(map)</li>\n<li>필터링 작업(filter)</li>\n<li>변환 작업(map)</li>\n<li>결과 목록 1</li>\n</ul>\n</li>\n</ul>\n<p>루프 1이 한 번 돌 때 map, filter, map을 수행하는 것이다. 어떻게 이걸 할까?</p>\n<p>스칼라에는 이걸 하기 위해 Stream이라는 목록 자료형이 있다.</p>\n<h3>Stream (Lazy List)</h3>\n<p>스트림에는 이런 일련의 변환 작업을 나태성(laziness)을 이용하여 하나의 패스로 융합하는 방법이 담겨 있다. 따라서 List보다 경제적이다.</p>\n<p>위에서 List로 풀었던 문제를 Stream을 사용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">Stream<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Stream을 사용하여 map과 filter를 합성하여 리스트를 만들려면 Stream을 어떻게 만들어야 할까? 앞 장에서 본 List와 마찬가지로 빈 Stream인 Empty와 값이 들어있는 Stream인 Cons를 선언한다.  그리고 마찬가지로 Stream 컴패니언 오브젝트를 만든다. (관례)</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> Stream<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Empty <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span><span class=\"token builtin\">Nothing</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">object</span> Stream <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>앞의 리스트의 Cons에서는 head와 tail이 명시적인 평가된 파라미터 였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> List<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Nil <span class=\"token keyword\">extends</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Nothing</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span> A<span class=\"token punctuation\">,</span> tail<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">object</span> List <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> Nil\n    <span class=\"token keyword\">else</span> Cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>왜 Stream에서는 head와 tail이 함수 타입일까? 추후 설명이 나오겠지만 Stream 컴패니언 오브젝트에서 apply 메소드를 구현할 때 h와 t를 필요할 때만 평가하여 값을 가져와야 하기 때문이다. (왜냐고? Stream은 나태성을 갖는 리스트, 즉 여러 개의 변환 작업을 나태성을 이용하여 한번의 변환 작업으로 합쳐서 수행하는 자료 나열이기 때문이다)</p>\n<blockquote>\n<h5>여기서 잠깐?! Thunk와 비엄격한 함수</h5>\n<p><u>이와 같이 값이 필요할 때만 함수를 호출하여 가져오는 즉 평가되지 않은 채 전달될 인수 타입인 <code class=\"language-text\">() =&gt; A</code>와 같은 자료형은 성크(thunk)라고 부른다.</u> 이 성크는 연산이 필요할 때만 강제로 평가(인수를 호출)하여 값을 가져올 수 있다. 다음은 성크의 예시이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> if2<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>cond<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">,</span> onTrue<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> onFalse<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> A <span class=\"token operator\">=</span> \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> onTrue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> onFalse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<blockquote>\n<p>위 if2 함수를 보면 cond의 조건 true일 때는 onTrue를 강제로 평가(onTrue 인수를 호출)하고 cond의 조건이 false일 때는 onFalse를 강제로 평가한다.즉 cond의 조건을 if로 체크하기 전까지는 onTrue나 onFalse가 호출되지 않는다. <u>onTrue나 onFalse와 같이 조건에 따라 평가가 될 수도 있고 안될 수도 있기 때문에 if2와 같은 함수를 <strong>비엄격한 함수다</strong> 라고 부른다.</u></p>\n<p>스칼라에서는 성크를 다음과 같이 <code class=\"language-text\">()</code>를 생략해서 표현할 수도 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> if2<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>cond<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">,</span> onTrue<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> onFalse<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> A <span class=\"token operator\">=</span> \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> onTrue <span class=\"token keyword\">else</span> onFalse</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<blockquote>\n<p>스칼라에서는 인자에 값을 넘기듯이 if2를 호출하면 표현식을 알아서 감싸준다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">if2<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<blockquote>\n<p> 스칼라 말고도 다른 언어에서도 비엄격성을 표현할 수 있다. 바로 부울 함수 <code class=\"language-text\">&amp;&amp;</code>와 <code class=\"language-text\">||</code>의 단축 평가는 엄격하지 않다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// print문이 실행되질 않는다.</span>\n<span class=\"token comment\">// &amp;&amp;의 특성상 앞의 조건이 false가 되면 &amp;&amp; 뒤의 조건이 평가되지 않기 때문이다.</span>\n\n<span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ||도 마찬가지로 앞의 조건이 true이면 || 뒤의 조건이 평가되지 않기 때문에 print 문이 실행되질 않는다. </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>이와 같이  <code class=\"language-text\">&amp;&amp;</code>와 <code class=\"language-text\">||</code>는 비엄격성을 띄고 있다.</p>\n</blockquote>\n<p>따라서 List.apply 메소드를 참조하여 Stream.apply 메소드를 만들면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Stream <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> Empty\n    \t<span class=\"token keyword\">else</span> Cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// * 컴파일 오류 *</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>List.apply와 거의 동일한 모습이지만, Stream의 Cons를 위와 같이 사용하면 안된다. 왜냐면 Cons의 생성자 인수는 성크이지만, call by name으로 인수의 평가 값을 가져올 수 없기 때문이다. 따라서 인수에 값을 함수로 감싸는 것이 자동으로 되질 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\ndefined <span class=\"token keyword\">class</span> Cons\n\nscala<span class=\"token operator\">></span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>console<span class=\"token punctuation\">></span></span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> `<span class=\"token keyword\">val</span>' parameters may not be call<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>name\n       <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n                              <span class=\"token operator\">^</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>console<span class=\"token punctuation\">></span></span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> `<span class=\"token keyword\">val</span>' parameters may not be call<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>name\n       <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n                                       <span class=\"token operator\">^</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">scala<span class=\"token operator\">></span> <span class=\"token keyword\">object</span> Stream <span class=\"token punctuation\">{</span>\n     <span class=\"token operator\">|</span>     <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n     <span class=\"token operator\">|</span>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> Empty\n     <span class=\"token operator\">|</span>         <span class=\"token keyword\">else</span> Cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">|</span> <span class=\"token punctuation\">}</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>console<span class=\"token punctuation\">></span></span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> mismatch<span class=\"token punctuation\">;</span>\n found   <span class=\"token operator\">:</span> A\n required<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A\n               <span class=\"token keyword\">else</span> Cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">^</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>console<span class=\"token punctuation\">></span></span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> mismatch<span class=\"token punctuation\">;</span>\n found   <span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n required<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n               <span class=\"token keyword\">else</span> Cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                       <span class=\"token operator\">^</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이에 대한 해결 방법은 Cons와 Empty의 성크를 갖는 스마트 생성자를 Stream 컴패니언 오브젝트에 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Stream <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> cons<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>hd<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> tl<span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Cons<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> hd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> tl<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> empty<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Empty\n    \n    <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> empty\n    \t<span class=\"token keyword\">else</span> cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그러나 여기에도 문제가 있다.</p>\n<h4>Cons에 숨어 있는 재계산</h4>\n<p>일단 Cons는 인자로 받은 성크를 계속 실행시키기 때문에 인자로 넘긴 함수가 퍼포먼스를 많이 잡아먹는 함수라면 그 함수가 두 번 호출되는 이슈가 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Stream <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">def</span> headOption<span class=\"token operator\">:</span> Option<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> Empty <span class=\"token keyword\">=></span> None\n        <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Some<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> Cons<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> expensive<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tl<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> h1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>headOption\n<span class=\"token keyword\">val</span> h2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>headOption</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이건 뭘 의미할까? 위에 cons 스마트 생성자에서 hd와 tl 성크를 Cons로 넘겼는데 Cons의 head와 tail이 참조될 때마다 hd, tl성크가 평가된다는 의미이다. 이는 굉장히 비효율적이다. (hd, tl 성크의 값을 한 번만 평가하고 캐싱하는게 좋지 않을까?)</p>\n<p>이렇게 성크의 값을 캐싱하기 위해서는 <code class=\"language-text\">lazy val</code>을 이용한다. 이를 이용한 cons 메소드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> Stream<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Empty <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span><span class=\"token builtin\">Nothing</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">object</span> Stream <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> cons<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>hd<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">,</span> tl<span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">val</span> head <span class=\"token operator\">=</span> hd\n        <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">val</span> tail <span class=\"token operator\">=</span> tl\n        Cons<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> head<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> tail<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">def</span> empty<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Empty\n\n    <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> empty\n    \t<span class=\"token keyword\">else</span> cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다시 본론으로 돌아와서 아래 코드를 수행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">Stream<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>일단 먼저 <code class=\"language-text\">Stream(1,2,3,4)</code>는 Stream.apply 메소드에 의해 cons 메소드를 통해 다음과 같이 변환된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">cons<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList\ncons<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그 다음 cons의 head와 tail에 filter를 적용하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">cons<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList\n<span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList\nStream<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>마찬가지로 <code class=\"language-text\">Stream(2,3,4)</code>에 대해서도 cons와 map과 filter를 차례로 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">cons<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> cons<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> cons<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token operator\">:</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이제 그럼 <code class=\"language-text\">toList()</code> 과 <code class=\"language-text\">takeWhile()</code>를 구현해보자.</p>\n<h5>연습문제 5.1 ~ 3</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> Stream<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> toList<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">def</span> drop<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">def</span> takeWhile<span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<script src=\"https://scastie.scala-lang.org/icednut/wr7XsHyfS9K22yZJTscn1w.js\"></script>\n<h5>연습문제 5.4 ~ 7</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> Stream<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> forAll<span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n    \n    <span class=\"token comment\">// TODO: 아래 메소드들은 foldRight를 이용할 것</span>\n    <span class=\"token keyword\">def</span> takeWhile2<span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Stream<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">def</span> headOption <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">def</span> map <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">def</span> filter <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">def</span> append <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token comment\">// 인자에 대해 비엄격해야 한다.</span>\n    <span class=\"token keyword\">def</span> flatMap <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"스칼라 스터디 Day04 - 엄격성과 나태성","date":"2018-12-17 23:20:52","tags":["scala","functional programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20181218-scala-and-functional-programming-day04/","previous":{"fields":{"slug":"/20181210-scala-and-functional-programming-day03/"},"frontmatter":{"title":"스칼라 스터디 Day03 - 예외를 이용하지 않은 오류 처리"}},"next":{"fields":{"slug":"/20181226-scala-and-functional-programming-day05/"},"frontmatter":{"title":"스칼라 스터디 Day05 - 순수 함수적 상태"}}}}