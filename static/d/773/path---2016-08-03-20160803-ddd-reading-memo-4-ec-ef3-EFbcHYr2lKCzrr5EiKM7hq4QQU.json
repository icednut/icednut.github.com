{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"bf4aaf39-daf8-5f28-b9fb-f4dc0eb1cc78","excerpt":"예를 들어, 게시글 데이터를 ARTICLE 테이블과 ARTICLE_CONTENT 테이블로 나눠서 저장한다고 하자.  (중략)  그림4.5만 보면 ARTICLE_CONTENT 테이블의 ID 칼럼이 식별자이므로 ARTICLE_CONTENT와 맵핑되는 ArticleContent…","html":"<blockquote>\n<p>예를 들어, 게시글 데이터를 ARTICLE 테이블과 ARTICLE_CONTENT 테이블로 나눠서 저장한다고 하자.  </p>\n<p>(중략)  </p>\n<p>[그림4.5]만 보면 ARTICLE_CONTENT 테이블의 ID 칼럼이 식별자이므로 ARTICLE_CONTENT와 맵핑되는 ArticleContent를 엔티티로 생각할 수 있는데, 이것 때문에 Article과 ArticleContent를 두 엔티티 간의 일대일 연관으로 매핑하는 실수를 할 수 있다.  </p>\n</blockquote>\n<p>책을 읽다말고 ‘아니 이게 왜 실수인가?’ 라는 생각이 퍼뜩 들었다. 왜냐하면 평소에도 Article과 ArticleContent는 각각 엔티티로 만들어서 연관관계를 맺어줘야 한다고 생각했기 때문이다. 그런데 그 다음을 읽자 내가 생각없이 코딩하고 있었다는 것이 여실히 들어나게 되는 순간을 맞이하게 되었다.  </p>\n<blockquote>\n<p>ArticleContent를 엔티티로 생각할 수 있지만 ArticleContent는 Article의 내용을 담고 있는 밸류로 생각하는 것이 맞다. ARTICLE_CONTENT의 ID는 식별자이기는 하지만 이 식별자를 사용하는 이유는 ARTICLE 테이블의 데이터와 연결하기 위함이지 ARTICLE_CONTENT를 위한 별도 식별자가 필요하기 때문은 아니다. 즉, 이는 게시글의 특정 프로퍼티를 별도 테이블에 보관한 것으로 접근해야 한다.  </p>\n</blockquote>\n<p>아…그 동안 엔티티를 생각없이 무분별하게 남용해왔다는 것을 느꼈다. 여지껏 Article, ArticleContent와 비슷한 상황을 자주 경험하곤 했는데 그 때마다 1대1 연관관계를 맺어서 데이터를 조회해왔던 것이 생각이 났다. 이 책에서 Aggregate, Domain 등에 대해서 얘기하고 있는데 정작 나는 이런 개념들을 모른채 그저 생각없이 JPA를 써왔던 것 같다. ArticleContent를 밸류로 인식하기 위해서는 <code class=\"language-text\">@Embaddable</code> 대신 <code class=\"language-text\">@SecondaryTable</code>를 사용하는 것으로 책에는 설명을 하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"article\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SecondaryTable</span><span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"article_content\"</span><span class=\"token punctuation\">,</span>\n    pkJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@PrimaryKeyJoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@AttributeOverrides</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@AttributeOverride</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> column <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>table <span class=\"token operator\">=</span> <span class=\"token string\">\"article_content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@AttributeOverride</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"contentType\"</span><span class=\"token punctuation\">,</span> column <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>table <span class=\"token operator\">=</span> <span class=\"token string\">\"article_content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArticleContent</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// @SecondaryTable로 매핑된 article_content 테이블을 조인</span>\n<span class=\"token class-name\">Article</span> article <span class=\"token operator\">=</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Article</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>여기서 굳이 <code class=\"language-text\">@SecondaryTable</code>나 <code class=\"language-text\">@AttributeOverrides</code>와 같은 어노테이션을 소개하려고 이 글을 쓰려했던 것은 아니다. 엔티티와 밸류를 어떻게 취급하느냐에 대해 주목해야 될 것 같다. 4장에서 애그리거트에서 엔티티와 밸류를 어떻게 다뤄야 되는지에 대한 주옥같은 방법과 설명들이 있는데 그동안 JPA를 생각없이 썼던 나에겐 굉장한 충격이었다. 책을 좀 더 읽고 애그리거트와 엔티티를 어떻게 나눌지 고민하면서 코딩을 해야겠다.</p>","frontmatter":{"title":"나만의 책속 한 줄 -  책 'DDD Start!'를 읽으면서...","date":"2016-08-03 00:00:00","tags":["JPA","DDD"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016/08/03/20160803-ddd_reading_memo/","previous":{"fields":{"slug":"/2016/07/15/20160715-logback_and_slf4j/"},"frontmatter":{"title":"Logback & SLF4J를 쓰면서 만났던 문제"}},"next":{"fields":{"slug":"/2016/08/06/20160806-about_deadlock/"},"frontmatter":{"title":"Deadlock이 뭐지? (Java Thread와 Deadlock에 대한 고찰)"}}}}