{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"e509f9c4-a433-5155-95b2-d466c36a302f","excerpt":"목차About gRPCWhy gRPC?gRPC 내부 구조 및 동작 과정gRPC 개발 맛보기protobuf 정의gRPC ServergRPC ClientgRPC 통신의 4가지 방식UnaryServer StreamingClient Streaming양방향 Streaming…","html":"<h2>목차</h2>\n<ul>\n<li>\n<p><strong>About gRPC</strong></p>\n<ul>\n<li>Why gRPC?</li>\n<li>gRPC 내부 구조 및 동작 과정</li>\n<li>gRPC 개발 맛보기</li>\n<li>protobuf 정의</li>\n<li>gRPC Server</li>\n<li>gRPC Client</li>\n</ul>\n</li>\n<li>\n<p><strong>gRPC 통신의 4가지 방식</strong></p>\n<ul>\n<li>Unary</li>\n<li>Server Streaming</li>\n<li>Client Streaming</li>\n<li>양방향 Streaming</li>\n</ul>\n</li>\n<li>\n<p><strong>고민해볼 문제</strong></p>\n<ul>\n<li>Testing</li>\n<li>Authenticatoin (TLS, OAuth)</li>\n<li>Load Balancing (Client-side, Server-side)</li>\n<li>Monitoring</li>\n<li>Proxies, Web (REST Adapter, grpc-gateway)</li>\n<li>Versioning</li>\n</ul>\n</li>\n<li>\n<p><strong>참고 자료</strong></p>\n</li>\n</ul>\n<h2>About gRPC</h2>\n<p><strong>gRPC는 HTTP2 기반의 오픈 소스 하이 퍼포먼스 원격 프로시저 호출(RPC) 프레임워크 입니다.</strong> gRPC에서 클라이언트 어플리케이션은 다른 서버 어플리케이션의 메서드를 마치 로컬 객체인 것처럼 직접 호출할 수 있으므로 분산 어플리케이션 및 서비스를 보다 쉽게 만들 수 있습니다. 많은 RPC 처럼 gRPC는 서비스를 정의하고 파라미터 및 리턴 유형을 사용하여 원격으로 호출할 수있는 메소드를 지정한다는 아이디어를 기반으로 합니다.</p>\n<blockquote>\n<h5>RPC(Remote Procedure Call)이란?</h5>\n<p><strong>원격 프로시저 호출</strong>(remote procedure call, 리모트 프로시저 콜, RPC)은 별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게 하는 프로세스 간 통신 기술이다. 다시 말해, 원격 프로시저 호출을 이용하면 프로그래머는 함수가 실행 프로그램에 로컬 위치에 있든 원격 위치에 있든 동일한 코드를 이용할 수 있다.</p>\n<p><img src=\"./20180706-about-grpc/rpc.png\"></p>\n<p>출처: <a href=\"https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9_%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80_%ED%98%B8%EC%B6%9C\">https://ko.wikipedia.org/wiki/%EC%9B%90%EA%B2%A9<em>%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80</em>%ED%98%B8%EC%B6%9C</a></p>\n</blockquote>\n<p>또한 구글은 사내에서 Stubby라는 RPC 프레임워크를 만들어서 사용하고 있었는데 하루에 초당 100억건의 RPC Call을 처리한다고 합니다. 구글은 Stubby 다음 버전을 계획하면서 오픈소스로 외부에 공개하기로 결정하였고 이에 따라 gRPC가 탄생하게 되었습니다. 참고로 gRPC는 성능을 중요시하기 때문에 HTTP2 기반으로 동작합니다.</p>\n<p><img src=\"./20180706-about-grpc/google_rpcs_per_second.png\"></p>\n<h3>잠깐! 왜 이제와서 RPC를 거들먹거리는건가? (Why gRPC?)</h3>\n<ul>\n<li>RPC 기술들: CORBA, DCOM, RMI (Java RMI)</li>\n<li>CORBA (with Java)로 헬로 월드 찍어 보셨어요? (<a href=\"http://www.ejbtutorial.com/programming/tutorial-for-corba-hello-world-using-java\">http://www.ejbtutorial.com/programming/tutorial-for-corba-hello-world-using-java</a>)</li>\n</ul>\n<p>이렇게 힘든데 왜 구글은 RPC를 사용하는걸까요? 구글은 Stubby를 통해 다음과 같은 점들을 배웠다고 합니다. (gRPC Motivation)</p>\n<ol>\n<li>HTTP/JSON doesn`t cut it!</li>\n<li>Establish a lingua granca<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></li>\n<li>Design for fault tolerance and provide control knobs</li>\n<li>Don`t fly blind: Service Analytics</li>\n<li>Diagonosing problems: Tracing</li>\n<li>Load Balancing is critical</li>\n</ol>\n<p>(시간 관계상 이 부분은 다른 자료로 대체하도록 하겠습니다. <a href=\"https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google\">https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google</a>)</p>\n<p>그리하여 gRPC는 다음과 같은 사양 갖추었습니다.</p>\n<ul>\n<li>Transport: HTTP/2<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></li>\n<li>Wire format: Protocol Buffers 3<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> (Binary)</li>\n<li>Service definition: Protocol Buffers IDL</li>\n</ul>\n<p>gRPC는 이런 HTTP/2의 특징을 기반으로 하기때문에 양방향 스트리밍이 가능하고, 기본적인 통신 속도가 빠릅니다. on-connection 상태에서 비동기 통신의 구현이 용이합니다. 정리하자면 gRPC를 사용해야할 이유는 다음과 같습니다.</p>\n<ul>\n<li>Binary protocol (HTTP/2),</li>\n<li>Multiplexing many requests on one connection (HTTP/2)</li>\n<li>Header compression (HTTP/2)</li>\n<li>Strongly typed service and message definition (Protobuf)</li>\n<li>Idiomatic client/server library implementations in many languages</li>\n<li>gRPC Benchmarking: <a href=\"https://github.com/david-cao/gRPCBenchmarks\">https://github.com/david-cao/gRPCBenchmarks</a></li>\n</ul>\n<h3>gRPC의 특징</h3>\n<ul>\n<li>\n<p><strong>간단한 서비스 정의 (Simple Service Definition)</strong></p>\n<ul>\n<li>\n<p>서비스 정의(모델 정의, 통신 과정 정의)를 Protocol Buffer를 사용</p>\n</li>\n<li>\n<p>Protocol Buffer는 XML과 같은 구조화된 데이터 정의라고 보면 되며, 일종의 IDL(Interface Definition Language)이다. (그러나 XML보다 직관적이고 표현이 풍부하다)</p>\n</li>\n<li>\n<p>Protocol Buffer는 .proto 파일로 정의하며 서비스 인터페이스와 메세지 페이로드를 정의할 때 사용</p>\n</li>\n<li>\n<p>protobuf example</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-protobuf line-numbers\"><code class=\"language-protobuf\">service HelloService <span class=\"token punctuation\">{</span>\n  rpc <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>HelloRequest<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>HelloResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> HelloRequest <span class=\"token punctuation\">{</span>\n  <span class=\"token primitive symbol\">string</span> greeting <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> HelloResponse <span class=\"token punctuation\">{</span>\n  <span class=\"token primitive symbol\">string</span> reply <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p><strong>다양한 언어와 플랫폼에서 동작 (Works across language and platforms)</strong></p>\n<ul>\n<li>protobuf로 생성한 서비스 정의에 따라 클라이언트와 서버에서 사용하는 언어에 맞게 모델과 인터페이스 Stubs를 생성</li>\n<li>각 언어에 맞는 gRPC 프레임워크를 통해 개발 및 실행 진행</li>\n<li>공식 지원하는 변환 타겟 언어: C/C++, C#, Dart*, Go, Java, Node.js, PHP*, Python, Ruby (*은 아직 Beta 단계)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"./20180706-about-grpc/grpc_interoperability.png\"></p>\n<ul>\n<li>\n<p><strong>양방향 스트리밍과 통합 인증 (Bi-directional streaming and integrated auth)</strong></p>\n<ul>\n<li>http/2 기반의 양방향 스트리밍과 조립 가능한 인증 및 인터셉터 인터페이스를 제공</li>\n<li>인증에는 SSL/TLS 혹은 Google Token-based authentication을 사용하거나 직접 인증 시스템을 연동할 수 있음</li>\n</ul>\n</li>\n</ul>\n<h3>따라서 gRPC는 이런 곳에 적용하면 좋습니다.</h3>\n<ul>\n<li>Server to Server</li>\n<li>Server to Mobile device</li>\n<li>ex) 주식 시장, 게임, 스마트홈 디바이스 등등</li>\n</ul>\n<h3>이쯤에서 gRPC의 내부 구조와 동작 과정을 살펴봅시다</h3>\n<p>gRPC는 여러 가지 언어(C/C++, C#, Dart, Go, Java, Node.js, PHP, Python, Ruby에서 동작 가능합니다. 그러나 gRPC는 3가지 언어(C, Java, Go)로 동일하게 구현되어 있습니다.  그 외 나머지 언어들은 핵심은 C-Runtime 라이브러리로 형태로 개발하여 각 언어별로 랩핑되어 있습니다. 이렇게 한 이유는 개발 비용 절감과 구현, 언어별 퍼포먼스 일관성을 가져갈 수 있기 때문입니다.</p>\n<ul>\n<li>grpc-java (<a href=\"https://github.com/grpc/grpc-java\">https://github.com/grpc/grpc-java</a>)</li>\n<li>grpc-go (<a href=\"https://github.com/grpc/grpc-go\">https://github.com/grpc/grpc-go</a>)</li>\n<li>grpc (<a href=\"https://github.com/grpc/grpc\">https://github.com/grpc/grpc</a>)</li>\n</ul>\n<p>그 중에서 gRPC Java는 다음과 같은 아키텍처를 갖추고 있습니다.</p>\n<p><img src=\"./20180706-about-grpc/grpc_architecture.png\"></p>\n<p><img src=\"./20180706-about-grpc/grpc_java.png\"></p>\n<p>gRPC 동작과정을 살펴보기 전에 간단하게 gRPC를 사용하여 Hello world 메세지를 주고 받는 Server, Client Java Application을 개발해보도록 하겠습니다. 개발 과정은 다음과 같습니다.</p>\n<ol>\n<li>Protocol Buffer 3 (IDL)을 이용하여 RPC 인터페이스 및 모델 정의</li>\n<li>프로젝트 셋팅 (with Gradle)</li>\n<li>서버 개발</li>\n<li>클라이언트 개발</li>\n</ol>\n<h4>개발 과정</h4>\n<h5>1. 프로젝트 셋팅 (with Gradle)</h5>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-groovy line-numbers\"><code class=\"language-groovy\">apply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'java'</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'com.google.protobuf'</span>\n\ntargetCompatibility <span class=\"token operator\">=</span> versionJavaLang\nsourceCompatibility <span class=\"token operator\">=</span> versionJavaLang\n\nprotobuf <span class=\"token punctuation\">{</span>\n    protoc <span class=\"token punctuation\">{</span>\n        artifact <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"com.google.protobuf:protoc:<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>protocVersion<span class=\"token punctuation\">}</span></span>\"</span>\n    <span class=\"token punctuation\">}</span>\n    plugins <span class=\"token punctuation\">{</span>\n        grpc <span class=\"token punctuation\">{</span>\n            artifact <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"io.grpc:protoc-gen-grpc-java:<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>grpcVersion<span class=\"token punctuation\">}</span></span>\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    generateProtoTasks <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofSourceSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>each <span class=\"token punctuation\">{</span> task <span class=\"token operator\">-></span>\n            task<span class=\"token operator\">.</span>builtins <span class=\"token punctuation\">{</span>\n                java <span class=\"token punctuation\">{</span>\n                    outputSubDir <span class=\"token operator\">=</span> <span class=\"token string\">'protoGen'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            task<span class=\"token operator\">.</span>plugins <span class=\"token punctuation\">{</span>\n                grpc <span class=\"token punctuation\">{</span>\n                    outputSubDir <span class=\"token operator\">=</span> <span class=\"token string\">'protoGen'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    generatedFilesBaseDir <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"<span class=\"token expression\"><span class=\"token punctuation\">$</span>projectDir</span>/src/\"</span>\n<span class=\"token punctuation\">}</span>\n\nsourceSets <span class=\"token punctuation\">{</span>\n    main <span class=\"token punctuation\">{</span>\n        java <span class=\"token punctuation\">{</span>\n            srcDir <span class=\"token string\">'src/main/java'</span>\n            srcDir <span class=\"token string\">'src/main/protoGen'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"com.google.api.grpc:proto-google-common-protos:1.0.0\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"com.google.protobuf:protobuf-java-util:<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>protobufVersion<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntask cleanProtoGen <span class=\"token punctuation\">{</span>\n    doFirst <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"<span class=\"token expression\"><span class=\"token punctuation\">$</span>projectDir</span>/src/main/protoGen\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nclean<span class=\"token operator\">.</span>dependsOn cleanProtoGen</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>2. Protocol Buffer 3을 이용하여 RPC 인터페이스 및 모델 정의</h5>\n<p>아래와 같이 모델과 RPC Stub 인터페이스를 정의합니다. 그런 뒤 Gradle의 generateProto를 수행하면 HelloRequest, HelloReply 모델 클래스와 커넥션 처리 로직이 담긴 Greeter Stub 클래스가 생성이 됩니다. 특이한 점은 모델 클래스 안에 파싱 로직이 담겨있고 Stub은 서버 측 뿐만 아니라 Java Client 측에서 호출할 수 있는 Stub 로직도 같이 생성됩니다. (서버 측 GreeterGrpc.GreeterImplBase, 클라이언트 측: GreeterGrpc.GreeterBlockingStub)</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-protobuf line-numbers\"><code class=\"language-protobuf\">syntax <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n\noption java_multiple_files <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\noption java_package <span class=\"token operator\">=</span> <span class=\"token string\">\"io.icednut.grpc.common.exercise.helloworld\"</span><span class=\"token punctuation\">;</span>\noption java_outer_classname <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWorldProto\"</span><span class=\"token punctuation\">;</span>\noption objc_class_prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"HLW\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">package</span> helloworld<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Greeting 서비스 정의</span>\nservice Greeter <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 파라미터로 받은 인사요청에 담긴 이름으로 인사 메세지가 담긴 모델 반환하기</span>\n  rpc <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>HelloRequest<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>HelloReply<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-protobuf line-numbers\"><code class=\"language-protobuf\"><span class=\"token keyword\">message</span> HelloRequest <span class=\"token punctuation\">{</span>\n    <span class=\"token primitive symbol\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-protobuf line-numbers\"><code class=\"language-protobuf\"><span class=\"token keyword\">message</span> HelloReply <span class=\"token punctuation\">{</span>\n    <span class=\"token primitive symbol\">string</span> <span class=\"token keyword\">message</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h5>3. 서버 개발</h5>\n<p>Java 서버 측 디펜던시를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-groovy line-numbers\"><code class=\"language-groovy\">compile <span class=\"token string\">'io.grpc:grpc-netty:1.13.1'</span>\ncompile <span class=\"token string\">'io.grpc:grpc-protobuf:1.13.1'</span>\ncompile <span class=\"token string\">'io.grpc:grpc-stub:1.13.1'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Greeter 서비스를 개발합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreeterService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GreeterGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">GreeterImplBase</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HelloReply</span><span class=\"token punctuation\">></span></span> responseObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HelloReply</span> reply <span class=\"token operator\">=</span> <span class=\"token class-name\">HelloReply</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                     <span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                     <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Greeter 서비스 처리를 진행할 서버를 개발합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GrpcCommonServer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GrpcCommonServer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Server</span> server<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GrpcCommonServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BindableService</span><span class=\"token punctuation\">></span></span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ServerBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> serverBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>service <span class=\"token operator\">-></span> serverBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">addService</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> serverBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server started, listening on \"</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">blockUntilShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*** shutting down gRPC server since JVM is shutting down\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">GrpcCommonServer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*** server shut down\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">blockUntilShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Java Main 메소드에서 서버를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GrpcServerApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">GrpcCommonServer</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrpcCommonServer</span><span class=\"token punctuation\">(</span><span class=\"token number\">50551</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GreeterService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">blockUntilShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>3.1. 서버측 동작 과정</h5>\n<p>서버측 동작 과정은 크게 서버 생성, 서버 실행 및 대기, 서버 종료 과정으로 나뉩니다. gRPC 프레임워크에 따라 RPC를 처리할 서버를 생성한 뒤 Netty 서버를 실행하고 Netty 서버가 소켓 및 HTTP2 프로토콜을 사용하여 RPC Call 요청 처리 대기를 합니다. RPC Call 요청이 들어오면 HTTP2 프로토콜로 바이너리 데이터를 주고 받는 방식으로 진행 됩니다. 서버 생성 과정을 살펴보면 다음과 같습니다.</p>\n<p><strong>[서버 생성]</strong></p>\n<p><img src=\"./20180706-about-grpc/grpc_server_sequence_diagram-build.png\"></p>\n<p>요청을 받을 프로세스의 포트와 요청에 부름을 받을 메소드가 담긴 service 객체를 조합하여 최종적으로 NettyServer를 생성한다</p>\n<p>이렇게 생성한 서버에 start 메소드를 실행하면 요청 처리 대기 상태가 됩니다.</p>\n<p><strong>[서버 실행]</strong></p>\n<p><img src=\"./20180706-about-grpc/grpc_server_sequence_diagram-start.png\"></p>\n<p>요청 처리 대기 상태라는 말은 NioEventLoop가 실행되어 의미 있는 커넥션이 맺어질 때 <strong>io.grpc.netty.NettyServerTransport</strong> 와 <strong>io.grpc.netty.ProtocolNegotiators</strong>를 통해 <strong>io.grpc.netty.GrpcHttp2ConnectionHandler</strong> 타입의 응답 처리기(Handler)를 만들어서 클라이언트와의 연결 및 클라이언트와 주고 받는 데이터(byte array)를 처리하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ProtocolNegotiator</span> <span class=\"token function\">serverPlaintext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProtocolNegotiator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Handler</span> <span class=\"token function\">newHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">GrpcHttp2ConnectionHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlaintextHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChannelHandlerAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handlerAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n          handler<span class=\"token punctuation\">.</span><span class=\"token function\">handleProtocolNegotiationCompleted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Attributes</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Grpc</span><span class=\"token punctuation\">.</span>TRANSPORT_ATTR_REMOTE_ADDR<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          ctx<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PlaintextHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>GrpcHttp2ConnectionHandler는 <strong>io.netty.handler.codec.http2.Http2ConnectionHandler</strong> 를 상속받은 구현체로 HTTP2 스펙을 따르며 그에 따른 커낵션 및 라이프사이클을 수행합니다.</p>\n<p><img src=\"./20180706-about-grpc/grpc_server_sequence_diagram-connect.png\"></p>\n<p>그런 다음 클라이언트와 커낵션을 맺은 뒤 해당 커넥션과 protobuf Stub을 사용해서 byte array 형태의 데이터를 주고 받습니다. 앞의 Hello world 예제를 기준으로 설명하면 클라이언트는 sayHello()라는 함수를 호출하면 HelloRequest의 멤버인 String name을 byte array로 변환하여 전송합니다. 그러면 서버에서는 byte array stream으로 받고 연결을 끊지 않은채 스트림에서 데이터를 읽어와 <strong>io.grpc.protobuf.ProtoLiteUtils</strong> 클래스를 통해 모델 객체로 파싱합니다. (궁금해서 모델의 byte array를 열어보니 JSON 형태가 아닌 tag: value 형태의 문자열이었습니다.) 이렇게 파싱한 모델 객체와 byte array에 명시된 호출할 메소드를 호출하여 비로소 우리가 작성한 비지니스 로직을 실행하게 됩니다.</p>\n<p><img src=\"./20180706-about-grpc/grpc_server_sequence_diagram-run.png\"></p>\n<h5>4. 클라이언트 개발</h5>\n<p>클라이언트는 일반 Java command line application으로 가정하고 진행하도록 하겠습니다. 먼저 아래와 같이 디펜던시를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-groovy line-numbers\"><code class=\"language-groovy\">compile <span class=\"token string\">'io.grpc:grpc-netty:1.13.1'</span>\ncompile <span class=\"token string\">'io.grpc:grpc-protobuf:1.13.1'</span>\ncompile <span class=\"token string\">'io.grpc:grpc-stub:1.13.1'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>앞에 서버측에서 정의한 protobuf를 그대로 똑같이 사용하여 모델 및 Stub을 사용합니다. 그런 다음 해당 Stub을 사용하는 HelloWroldClient 클래스를 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldClient</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">GreeterGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">GreeterBlockingStub</span> blockingStub<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloWorldClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannelBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">forAddress</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">usePlaintext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">HelloWorldClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span>\n        blockingStub <span class=\"token operator\">=</span> <span class=\"token class-name\">GreeterGrpc</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBlockingStub</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>여기서 서버와의 접속 수단인 ManagedChannel 객체를 생성하고 Stub에 조립하여 사용합니다. 이렇게 하면 사실 개발자는 내부 통신 과정을 알 필요가 없습니다. 그 다음 stub.sayHello() 메소드를 사용하면 개발자가 보기엔 서버측의 메소드를 사용한 것처럼 보이지만 내부적으로는 Netty Client를 통해 HTTP2 방식으로 byte array 데이터를 전송하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldClient</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">GreeterGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">GreeterBlockingStub</span> blockingStub<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloWorldClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannelBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">forAddress</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">usePlaintext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">HelloWorldClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span>\n        blockingStub <span class=\"token operator\">=</span> <span class=\"token class-name\">GreeterGrpc</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBlockingStub</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HelloRequest</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">HelloRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HelloReply</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            response <span class=\"token operator\">=</span> blockingStub<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StatusRuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RPC failed: {0}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Greeting: \"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>4.1. 클라이언트 측 동작 과정</h5>\n<p>클라이언트 측은 사실 Stub 객체의 동작과정만 잘 알면 됩니다. 그 안에서 데이터 변환 및 서버 호출을 결정하고 수행하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1.\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND SETTINGS: ack=false settings={ENABLE_PUSH=0, MAX_CONCURRENT_STREAMS=0, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_SIZE=8192}\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=983041\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND SETTINGS: ack=false settings={MAX_CONCURRENT_STREAMS=2147483647, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_SIZE=8192}\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND SETTINGS: ack=true\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=983041\n\n2.\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND DATA: streamId=3 padding=0 endStream=true length=14 bytes=00000000090a05776f726c64100a\n\n3.\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND HEADERS: streamId=3 headers=GrpcHttp2ResponseHeaders[:status: 200, content-type: application/grpc, grpc-encoding: identity, grpc-accept-encoding: gzip] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false\n\n4.\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND DATA: streamId=3 padding=0 endStream=false length=18 bytes=000000000d0a0b48656c6c6f20776f726c64\n\n5.\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] INBOUND HEADERS: streamId=3 headers=GrpcHttp2ResponseHeaders[grpc-status: 0] streamDependency=0 weight=16 exclusive=false padding=0 endStream=true\n\n6.\nio.grpc.netty.NettyClientHandler - [id: 0x42c055ac, L:/127.0.0.1:53048 - R:localhost/127.0.0.1:8090] OUTBOUND GO_AWAY: lastStreamId=0 errorCode=0 length=0 bytes=</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>gRPC 통신의 4가지 방식</h2>\n<p>길찾기(?) 서비스를 통해 gRPC의 4가지 통신 방식을 살펴보도록 하겠습니다. 먼저 protobuf를 먼저 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-protobuf line-numbers\"><code class=\"language-protobuf\">syntax <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n\noption java_multiple_files <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\noption java_package <span class=\"token operator\">=</span> <span class=\"token string\">\"io.grpc.examples.routeguide\"</span><span class=\"token punctuation\">;</span>\noption java_outer_classname <span class=\"token operator\">=</span> <span class=\"token string\">\"RouteGuideProto\"</span><span class=\"token punctuation\">;</span>\noption objc_class_prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"RTG\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">package</span> routeguide<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// RouteGuide 서비스 정의합니다.</span>\n<span class=\"token comment\">// 서비스가 제공하는 RPC 메서드를 선언하고, 각 메서드의 요청/응답 메시지를 정의합니다.</span>\nservice RouteGuide <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 단순한 RPC</span>\n  <span class=\"token comment\">// 클라이언트에서 요청를 보내고 서버의 응답을 리턴합니다</span>\n  rpc <span class=\"token function\">GetFeature</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>Feature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 서버에서 클라이언트로 스트리밍하는 RPC</span>\n  <span class=\"token comment\">// 클라이언트에서 요청을 보내고 서버로 부터 더이상 받을 메시지가 없을때까지</span>\n  <span class=\"token comment\">// 스트림(sequence of messages)을 읽습니다</span>\n  <span class=\"token comment\">// 스트림을 사용하기 위해서 stream 키워드를 사용합니다</span>\n  rpc <span class=\"token function\">ListFeatures</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>stream Feature<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 클라이언트에서 서버로 스트리밍하는 RPC</span>\n  <span class=\"token comment\">// 클라이언트에서 스트림을 모두 서버에 쓰고 끝나면 서버의 응답을 리턴합니다</span>\n  rpc <span class=\"token function\">RecordRoute</span><span class=\"token punctuation\">(</span>stream Point<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>RouteSummary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 양방향 스트리밍 RPC</span>\n  <span class=\"token comment\">// 클라이언트와 서버가 서로 독립적으로 스트림을 읽고 씁니다.</span>\n  rpc <span class=\"token function\">RouteChat</span><span class=\"token punctuation\">(</span>stream RouteNote<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>stream RouteNote<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 서비스의 요청/응답 메시지와 타입 정의를 작성합니다.</span>\n<span class=\"token keyword\">message</span> Point <span class=\"token punctuation\">{</span>\n  <span class=\"token primitive symbol\">int32</span> latitude <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token primitive symbol\">int32</span> longitude <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> Rectangle <span class=\"token punctuation\">{</span>\n  Point lo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  Point hi <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> Feature <span class=\"token punctuation\">{</span>\n  <span class=\"token primitive symbol\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  Point location <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> FeatureDatabase <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">repeated</span> Feature feature <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// repeated를 사용하면 자바에서 List&lt;Feature>로 생성</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> RouteNote <span class=\"token punctuation\">{</span>\n  Point location <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token primitive symbol\">string</span> <span class=\"token keyword\">message</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> RouteSummary <span class=\"token punctuation\">{</span>\n  <span class=\"token primitive symbol\">int32</span> point_count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;-- 추후 메시지 변화에 따른 하위 호환성을 위해서 숫자를 지정해야함.</span>\n  <span class=\"token primitive symbol\">int32</span> feature_count <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token primitive symbol\">int32</span> distance <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token primitive symbol\">int32</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>1. Unary call</h3>\n<h5>Server</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideImplBase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getFeature</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feature</span><span class=\"token punctuation\">></span></span> responseObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkFeature</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>Client</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideBlockingStub</span> blockingStub<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouteGuideClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannelBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> channelBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        channel <span class=\"token operator\">=</span> channelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        blockingStub <span class=\"token operator\">=</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBlockingStub</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getFeature</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Point</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                             <span class=\"token punctuation\">.</span><span class=\"token function\">setLatitude</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">)</span>\n                             <span class=\"token punctuation\">.</span><span class=\"token function\">setLongitude</span><span class=\"token punctuation\">(</span>lon<span class=\"token punctuation\">)</span>\n                             <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Feature</span> feature<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            feature <span class=\"token operator\">=</span> blockingStub<span class=\"token punctuation\">.</span><span class=\"token function\">getFeature</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StatusRuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2. Server Streaming</h3>\n<h5>Server</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideImplBase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listFeatures</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rectangle</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feature</span><span class=\"token punctuation\">></span></span> responseObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getLo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getLo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getLo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bottom <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getLo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Feature</span> feature <span class=\"token operator\">:</span> features<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">RouteGuideUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>feature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">int</span> lat <span class=\"token operator\">=</span> feature<span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> lon <span class=\"token operator\">=</span> feature<span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lon <span class=\"token operator\">>=</span> left <span class=\"token operator\">&amp;&amp;</span> lon <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> lat <span class=\"token operator\">>=</span> bottom <span class=\"token operator\">&amp;&amp;</span> lat <span class=\"token operator\">&lt;=</span> top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span>feature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>Client</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideBlockingStub</span> blockingStub<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouteGuideClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannelBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> channelBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        channel <span class=\"token operator\">=</span> channelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        blockingStub <span class=\"token operator\">=</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBlockingStub</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listFeatures</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lowLat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lowLon<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hiLat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hiLon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Rectangle</span> request <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">setLo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLatitude</span><span class=\"token punctuation\">(</span>lowLat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLongitude</span><span class=\"token punctuation\">(</span>lowLon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">setHi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLatitude</span><span class=\"token punctuation\">(</span>hiLat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLongitude</span><span class=\"token punctuation\">(</span>hiLon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feature</span><span class=\"token punctuation\">></span></span> features<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            features <span class=\"token operator\">=</span> blockingStub<span class=\"token punctuation\">.</span><span class=\"token function\">listFeatures</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> features<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Feature</span> feature <span class=\"token operator\">=</span> features<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result #\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\": {0}\"</span><span class=\"token punctuation\">,</span> feature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StatusRuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>3. Client Streaming</h3>\n<h5>Server</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideImplBase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">recordRoute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteSummary</span><span class=\"token punctuation\">></span></span> responseObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> pointCount<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> featureCount<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> distance<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Point</span> previous<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pointCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteGuideUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkFeature</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    featureCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previous <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    distance <span class=\"token operator\">+=</span> <span class=\"token function\">calcDistance</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                previous <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Encountered error in recordRoute\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">long</span> seconds <span class=\"token operator\">=</span> NANOSECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteSummary</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPointCount</span><span class=\"token punctuation\">(</span>pointCount<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">setFeatureCount</span><span class=\"token punctuation\">(</span>featureCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setDistance</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">setElapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>Client</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideStub</span> asyncStub<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouteGuideClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannelBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> channelBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        channel <span class=\"token operator\">=</span> channelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        asyncStub <span class=\"token operator\">=</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token function\">newStub</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">recordRoute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Feature</span><span class=\"token punctuation\">></span></span> features<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numPoints<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> finishLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteSummary</span><span class=\"token punctuation\">></span></span> responseObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteSummary</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteSummary</span> summary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// summary 처리</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>testHelper <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    testHelper<span class=\"token punctuation\">.</span><span class=\"token function\">onRpcError</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                finishLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                finishLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span> requestObserver <span class=\"token operator\">=</span> asyncStub<span class=\"token punctuation\">.</span><span class=\"token function\">recordRoute</span><span class=\"token punctuation\">(</span>responseObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numPoints<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>features<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Point</span> point <span class=\"token operator\">=</span> features<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                requestObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>finishLatch<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            requestObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        requestObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>finishLatch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recordRoute can not finish within 1 minutes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>4. 양방향 Streaming</h3>\n<h5>Server</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideImplBase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">routeChat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">></span></span> responseObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteNote</span> note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">></span></span> notes <span class=\"token operator\">=</span> <span class=\"token function\">getOrCreateNotes</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Respond with all previous notes at this location.</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteNote</span> prevNote <span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span>prevNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\">// Now add the new note to the list</span>\n                notes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Encountered error in routeChat\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                responseObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>Client</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteGuideClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ManagedChannel</span> channel<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RouteGuideStub</span> asyncStub<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouteGuideClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ManagedChannelBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> channelBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        channel <span class=\"token operator\">=</span> channelBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        asyncStub <span class=\"token operator\">=</span> <span class=\"token class-name\">RouteGuideGrpc</span><span class=\"token punctuation\">.</span><span class=\"token function\">newStub</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CountDownLatch</span> <span class=\"token function\">routeChat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> finishLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">></span></span> requestObserver <span class=\"token operator\">=</span>\n                asyncStub<span class=\"token punctuation\">.</span><span class=\"token function\">routeChat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamObserver</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteNote</span> note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">//</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RouteChat Failed: {0}\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromThrowable</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>testHelper <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            testHelper<span class=\"token punctuation\">.</span><span class=\"token function\">onRpcError</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        finishLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finished RouteChat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        finishLatch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">RouteNote</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> requests <span class=\"token operator\">=</span>\n                    <span class=\"token punctuation\">{</span><span class=\"token function\">newNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First message\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">newNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second message\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token function\">newNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Third message\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">newNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fourth message\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteNote</span> request <span class=\"token operator\">:</span> requests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                requestObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            requestObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        requestObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> finishLatch<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>고민해볼 문제</h2>\n<ul>\n<li>\n<h5>Testing</h5>\n<ul>\n<li>gRPC client <a href=\"https://www.npmjs.com/package/grpcc\">https://www.npmjs.com/package/grpcc</a></li>\n<li>gRPC JUnit Test <a href=\"https://grpc.io/blog/gracefully_clean_up_in_grpc_junit_tests\">https://grpc.io/blog/gracefully<em>clean</em>up<em>in</em>grpc<em>junit</em>tests</a></li>\n</ul>\n</li>\n<li>\n<h5>Authenticatoin</h5>\n<ul>\n<li>TLS, OAuth</li>\n</ul>\n</li>\n<li>\n<h5>Load Balancing (Client-side, Server-side)</h5>\n<ul>\n<li>Load Balancing in gRPC <a href=\"https://grpc.io/blog/loadbalancing\">https://grpc.io/blog/loadbalancing</a> <a href=\"https://github.com/grpc/grpc/blob/master/doc/load-balancing.md\">https://github.com/grpc/grpc/blob/master/doc/load-balancing.md</a></li>\n<li>gRPC Load Balancing Example in Kubernetes <a href=\"https://github.com/saturnism/grpc-java-by-example/tree/master/kubernetes-lb-example\">https://github.com/saturnism/grpc-java-by-example/tree/master/kubernetes-lb-example</a></li>\n<li>Spring-gRPC Load Balancing with Eureka <a href=\"https://github.com/saturnism/grpc-java-by-example/tree/master/springboot-example\">https://github.com/saturnism/grpc-java-by-example/tree/master/springboot-example</a></li>\n</ul>\n</li>\n<li>\n<h5>Monitoring</h5>\n<ul>\n<li>Zipkin, Prometheus, Statsd, Google, DIY</li>\n<li>java-grpc-prometheus example <a href=\"https://github.com/grpc-ecosystem/java-grpc-prometheus\">https://github.com/grpc-ecosystem/java-grpc-prometheus</a></li>\n</ul>\n</li>\n<li>\n<h5>Proxies, Web</h5>\n<ul>\n<li>haproxy, traefik, grpc-gateway</li>\n<li>Grpc LB, Service Discovery (etcd, zookeeper, eureka)</li>\n</ul>\n</li>\n<li>\n<h5>Versioning</h5>\n</li>\n</ul>\n<h2>참고자료</h2>\n<ul>\n<li>\n<p><a href=\"https://grpc.io/docs/guides/concepts.html\">https://grpc.io/docs/guides/concepts.html</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc/grpc-java\">https://github.com/grpc/grpc-java</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc/grpc-web\">https://github.com/grpc/grpc-web</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc-ecosystem\">https://github.com/grpc-ecosystem</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/grpc-ecosystem/awesome-grpc\">https://github.com/grpc-ecosystem/awesome-grpc</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/saturnism/grpc-java-by-example\">https://github.com/saturnism/grpc-java-by-example</a></p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@goinhacker/microservices-with-grpc-d504133d191d\">https://medium.com/@goinhacker/microservices-with-grpc-d504133d191d</a></p>\n</li>\n<li>\n<p><a href=\"https://www.slideshare.net/borisovalex/enabling-googley-microservices-with-http2-and-grpc?next_slideshow=1\">https://www.slideshare.net/borisovalex/enabling-googley-microservices-with-http2-and-grpc?next_slideshow=1</a></p>\n</li>\n<li>\n<p><a href=\"https://www.slideshare.net/VarunTalwar4/grpc-design-and-implementation\">https://www.slideshare.net/VarunTalwar4/grpc-design-and-implementation</a></p>\n</li>\n<li>\n<p><a href=\"https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google\">https://www.slideshare.net/datawire/bringing-learnings-from-googley-microservices-with-grpc-varun-talwar-google</a></p>\n</li>\n<li>\n<p><a href=\"http://www.baeldung.com/grpc-introduction\">http://www.baeldung.com/grpc-introduction</a></p>\n</li>\n<li>\n<p>Armeria</p>\n</li>\n</ul>\n<p><img src=\"./20180706-about-grpc/http2.png\"></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>링구아 프랑카(lingua franca)는 서로 다른 모어를 사용하는 화자들이 의사소통을 하기 위해 공통어로 사용하는 제 3의 언어(때로는 한 집단의 모어)를 말하며 국가나 단체에서 공식적으로 정한 언어를 뜻하는 공용어와는 다른 개념이다. 정의를 통해 알 수 있듯, <strong>링구아 프랑카</strong>는 특정 언어를 지칭하는 표현이 아니라, 언어 가교의 기능을 수행하는 언어들을 통칭하는 표현이다. 여기에서 의미가 파생되어 학술, 상업 등의 특정 분야에서 널리 사용되는 언어라는 뜻으로 사용되기도 한다. 피진이나 크리올은 <strong>링구아 프랑카</strong>와 유사한 개념이지만 정의상 완전히 일치하지는 않는다. (그러나 대다수가 언어 가교의 기능을 수행하기에 많은 부분 겹친다고 볼 수 있다) - <a href=\"https://ko.wikipedia.org/wiki/%EB%A7%81%EA%B5%AC%EC%95%84_%ED%94%84%EB%9E%91%EC%B9%B4\">https://ko.wikipedia.org/wiki/%EB%A7%81%EA%B5%AC%EC%95%84_%ED%94%84%EB%9E%91%EC%B9%B4</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>HTTP/1은 기본적으로 클라이언트가 서버에 요청을 보내고, 서버가 요청에 대한 응답을 보내는 구조입니다. 따라서 요청 단위로 클라이언트와 서버를 왕복해야 합니다. 또한 쿠키를 포함한 헤더 크기는 불필요하게 큽니다. 이런 특징때문에 HTTP/1은 느립니다. 성능을 개선하기 위해서 구글은 SPDY를 개발하고, 이를 기반으로 HTTP/2 표준이 만들어집니다. 성능이 개선된 HTTP/2의 주요 특징은 아래와 같습니다. <strong>Header Compression</strong>: Header Table과 Huffman Encoding 기법을 사용하여 HTTP/2 헤더정보를 압축하였습니다. <strong>Multiplexed Streams</strong>: HTTP/1에서 요청마다 새로운 커넥션을 자주 만드는 것과는 달리 HTTP/2는 한개의 커넥션으로 동시에 여러개의 메시지를 주고 받을 수 있습니다. <strong>Server Push</strong>: HTTP/2에서는 클라이언트의 요청없이도 서버가 리소스를 보낼 수 있습니다. 클라이언트 요청이 최소화되기 때문에 성능이 향상될 수 있습니다. <strong>Stream Priority</strong>: 요청에 우선순위를 지정하여 중요한 리소스를 먼저 전달받을 수 있습니다. <a href=\"http://www.http2demo.io/\">http://www.http2demo.io/</a>  <a href=\"http://http2.golang.org/gophertiles?latency=1000\">http://http2.golang.org/gophertiles?latency=1000</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p><a href=\"https://developers.google.com/protocol-buffers/docs/proto3\">https://developers.google.com/protocol-buffers/docs/proto3</a></p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"gRPC 살펴보기 (gRPC Overview)","date":"2018-07-04 22:15:27","tags":["gRPC"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/07/20180706-about-grpc/","previous":{"fields":{"slug":"/20180524-java-stream-tips/"},"frontmatter":{"title":"Java9에서의 Stream에 관한 짧은 팁"}},"next":{"fields":{"slug":"/2018/11/20181125-scala-and-functional-programming-day01/"},"frontmatter":{"title":"스칼라 스터디 Day01 - 함수형 프로그래밍이란?"}}}}