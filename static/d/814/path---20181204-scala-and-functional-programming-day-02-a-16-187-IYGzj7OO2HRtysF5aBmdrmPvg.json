{"data":{"site":{"siteMetadata":{"title":"Icednut's Blog","author":"Will Lee"}},"markdownRemark":{"id":"c435063a-c452-5130-9673-f4320b0b69eb","excerpt":"출처: 스칼라로 배우는 함수형 프로그래밍 3장Chapter 03. 함수적 자료구조이번 챕터에서 다룰 내용함수형 프로그래밍 스타일 작성된  살펴보기 (함수적 자료구조)Pattern Matching함수형 자료구조에서의 Data Sharing…","html":"<p>출처: 스칼라로 배우는 함수형 프로그래밍 3장</p>\n<h2>Chapter 03. 함수적 자료구조</h2>\n<p>이번 챕터에서 다룰 내용</p>\n<ul>\n<li>함수형 프로그래밍 스타일 작성된 <code class=\"language-text\">Single Linked List</code> 살펴보기 (함수적 자료구조)</li>\n<li>Pattern Matching</li>\n<li>함수형 자료구조에서의 Data Sharing</li>\n<li>고차함수와 타입추론, 그리고 고차함수 일반화</li>\n<li>함수형 프로그래밍 스타일로 <code class=\"language-text\">Binary Tree</code> 구현하기</li>\n</ul>\n<br/>\n<br/>\n<h3>함수적 자료구조</h3>\n<p>먼저 함수적 자료구조의 정의부터 살펴보자. 함수적 자료구조란 무엇일까?</p>\n<ul>\n<li>순수한 함수만으로 조작되는 자료구조</li>\n<li>함수적 자료구조는 조작이 일어나도 그 원본은 영원히 불변이다.</li>\n<li>예를 들어 List()와 같은 빈 리스트는 정수 값 3이나 4처럼 영원히 불변이(Immutable) 값이다.</li>\n<li>3 + 4를 수행하면 새로운 정수 값 7이 나오는 것처럼 두 리스트를 합쳐도 입력으로 받은 두 리스트는 변경되지 않는다.</li>\n</ul>\n<p>스칼라에서는 List가 불변이라니 어떻게 그럴수가 있을까? 여기 스칼라로 작성된 불변 싱글 링크드 리스트 구현을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> List<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Nil <span class=\"token keyword\">extends</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Nothing</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span> A<span class=\"token punctuation\">,</span> tail<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">object</span> List <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> A<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> Nil\n    <span class=\"token keyword\">else</span> Cons<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">,</span> apply<span class=\"token punctuation\">(</span>as<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 코드를 사용하여 List를 생성해보자. (여기서는 List 동반객체companion object를 사용하면 된다.)</p>\n<script src=\"https://scastie.scala-lang.org/icednut/pNNYh0CGRUSsAUDB1yfS3w.js\"></script>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">xs와 ys 자료 구조 형태\n\nCons(&quot;a&quot;, tail)\n           ㄴㅡㅡ Cons(&quot;b&quot;, tail)\n                            ㄴㅡㅡ Nil</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>여기서 List 트레이트와 Cons 케이스 클래스의 타입 파라미터에 왜  +A라고 붙였을까? 이유는 다음과 같다.</p>\n<ul>\n<li>Cons의 구성 요소로는 타입 A가 될 수도 있고 A의 하위 형식이 올 수도 있기 때문</li>\n<li>(여기서 A의 하위 형식은 Nothing이 되고 Nothing은 모든 타입의 서브타입이다.)</li>\n<li>여기서는 +A 는 공변(Covariant)를 뜻한다.</li>\n</ul>\n<p>만약 리스트의 타입 파라미터가 공변이 아니라면 어떻게 될까? 그럼 Cons와 같이 리스트에 데이터를 추가하는 행위를 할 수 없게 된다. (이유: <code class=\"language-text\">List[Nothing]</code> 타입인 Nil을 다룰 수 없기 때문)</p>\n<script src=\"https://scastie.scala-lang.org/icednut/FxZrfkH6RBeL92ioJOmQWw.js\"></script>\n<blockquote>\n<h5>공변(Covariant)과 불변(Invariant)</h5>\n<p>예를 들어, 만일 Dog가 Animal의 서브타입이면 <code class=\"language-text\">List[Dog]</code>가 <code class=\"language-text\">List[Animal]</code>의 하위 형식으로 간주되도록 하고 싶을 경우 <code class=\"language-text\">trait List[+A]</code>라고 타입 파라미터에 +를 붙여주면 공변 타입 파라미터가 된다.</p>\n<br/>\n<p>반면, 만약 A 앞에 +가 없다면 <code class=\"language-text\">List[Dog]</code>와 <code class=\"language-text\">List[Animal]</code>은 하위 형식 관계가 아닌 서로 다른 타입이 된다. 여기서 타입 파라미터를 불변(invariant)이라고 표현한다.</p>\n</blockquote>\n<br/>\n<br/>\n<h3>Pattern Matching</h3>\n<p>먼저 패턴 매칭을 쓴 메소드를 먼저 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> ints <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Nil <span class=\"token keyword\">=></span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> product<span class=\"token punctuation\">(</span>ds<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> ds <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Nil <span class=\"token keyword\">=></span> <span class=\"token number\">1.0</span>\n    <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">*</span> product<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">sum</code> 메소드부터 살펴보면, 파라미터로 받은 ints가 빈 배열일 경우(case Nil) 0을 반환하고, 첫 번째 요소가 있고 꼬리로 다음 리스트가 있을 경우(<code class=\"language-text\">case Cons(x, xs)</code>) 재귀적으로 요소를 더하는 과정을 거친다.</p>\n<p>이렇게 패턴 매칭은 자료구조의 내용이 매칭되는지를 판단할 때 쓰인다. 또한 책에 따르면 재귀호출과 결합하여 쓰는 경우도 많다고 한다.</p>\n<p>다음 패턴 매칭은 어떤 값을 반환할까?</p>\n<ul>\n<li><code class=\"language-text\">List(1,2,3) match { case _ =&gt; 42 }</code></li>\n<li><code class=\"language-text\">List(1,2,3) match { case Cons(h, _) =&gt; h }</code></li>\n<li><code class=\"language-text\">List(1,2,3) match { case Cons(_, t) =&gt; t }</code></li>\n<li><code class=\"language-text\">List(1,2,3) match { case Nil =&gt; 42 }</code></li>\n</ul>\n<p>는 읽는 사람의 상상에..</p>\n<p>참고로 스칼라 표준 라이브러리의 List를 써서 패턴 매칭을 할 경우 case Cons(h, t)로 쓰기보다는 case h :: t라고 쓴다. 즉 더 많은 요소를 추출하기 위해 괄호를 중첩할 필요 없이 case h :: h2 :: t 같이 간편하게 쓸 수 있다.</p>\n<br/>\n<br/>\n<h3>함수적 자료구조에서의 Data Sharing</h3>\n<p>앞에서 작성한 List가 불변이라면 해당 리스트에 요소를 추가하거나 요소를 제거하는 함수는 어떻게 작성할까?</p>\n<p>답은 요소를 추가한 리스트를 반환하거나 요소를 제거한 리스트를 반환하는 함수를 만들면 된다.</p>\n<h4>연습문제3.2)</h4>\n<p>List의 첫 요소를 제거하는 함수 tail 구현하기</p>\n<script src=\"https://scastie.scala-lang.org/icednut/ubFvVTh3QOikuMN5GlSuvw.js\"></script>\n<h4>연습문제3.3)</h4>\n<p>List의 첫 요소를 다른 값으로 대체하는 함수 setHead 구현하기</p>\n<script src=\"https://scastie.scala-lang.org/icednut/4RsjXHZZQRWzDMdf8Bszug.js\"></script>\n<p>Data Sharing을 사용하면 리스트의 끝에 다른 리스트를 붙이는 것을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> append<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a2<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    a1 <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> Nil <span class=\"token keyword\">=></span> a2\n        <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Cons<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> append<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<br/>\n<h3>고차함수와 타입추론, 그리고 고차함수 일반화</h3>\n<p>아래와 같이 고차함수가 있을 경우 이 고차함수를 호출할 때 넘기는 익명함수에는 익명함수의 파라미터를 명시해야 한다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> dropWhile<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> f<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n\n<span class=\"token keyword\">val</span> xs<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> ex1 <span class=\"token operator\">=</span> dropWhile<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그러나 아래와 같이 커링을 사용하면 익명함수의 파라미터 타입이 고정되어 버린다. </p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> dropWhile<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    as <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> dropWhile<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> as\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> xs<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> ex1 <span class=\"token operator\">=</span> dropWhile<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">=></span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위와 같은 경우 커링되는 결과의 파라미터가 A로 고정되기 때문에 Int가 된다. 인수들을 이런 식으로 묶는 것은 스칼라의 타입 추론을 돕기 위한 행위라고 볼 수 있다.</p>\n<p>위에서 본 sum과 product 코드를 보면 핵심 연산만 다를 뿐 패턴 매칭하는 과정이 비슷하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> ints <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Nil <span class=\"token keyword\">=></span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> product<span class=\"token punctuation\">(</span>ds<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> ds <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Nil <span class=\"token keyword\">=></span> <span class=\"token number\">1.0</span>\n    <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">*</span> product<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이 경우 부분 표현식들을 추출해서 커링의 인수로 대체하는 것으로 일반화하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> foldRight<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>as<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> B <span class=\"token operator\">=</span> as <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Nil <span class=\"token keyword\">=></span> z\n    <span class=\"token keyword\">case</span> Cons<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> foldRight<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ns<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> foldRight<span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> product<span class=\"token punctuation\">(</span>ns<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> foldRight<span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">*</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 sum 메소드를 사용하면 다음과 같이 치환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">foldRight<span class=\"token punctuation\">(</span>Cons<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Cons<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Cons<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> foldRight<span class=\"token punctuation\">(</span>Cons<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Cons<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> foldRight<span class=\"token punctuation\">(</span>Cons<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> foldRight<span class=\"token punctuation\">(</span>Cons<span class=\"token punctuation\">(</span>Nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<br/>\n<h3>함수형 프로그래밍 스타일로 Binary Tree 구현하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> Tree<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Leaf<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Tree<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Branch<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">:</span> Tree<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> Tree<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Tree<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>나중에 size, maximum, depth, map 함수를 작성해보자. 그리고 이 4개의 함수를 일반화한 fold도 작성해보자.</p>","frontmatter":{"title":"스칼라 스터디 Day02 - 함수적 자료구조","date":"2018-12-04 21:31:10","tags":["scala","functional programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20181204-scala-and-functional-programming-day02/","previous":{"fields":{"slug":"/20181125-scala-and-functional-programming-day01/"},"frontmatter":{"title":"스칼라 스터디 Day01 - 함수형 프로그래밍이란?"}},"next":{"fields":{"slug":"/20181210-scala-and-functional-programming-day03/"},"frontmatter":{"title":"스칼라 스터디 Day03 - 예외를 이용하지 않은 오류 처리"}}}}