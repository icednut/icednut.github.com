{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"00e628b2-3510-5144-bbb5-2ce7fd3bdf3f","excerpt":"요구사항 추가현재 Todo List 상태를 저장한 뒤에 나중에 필요할 때 복원하고 싶다. 저장 및 복원은 어떻게 구현할까?이럴 때 필요한게 Memento 패턴이다.\n\nTodo App with Memento PatternMemento…","html":"<h2>요구사항 추가</h2>\n<p>현재 Todo List 상태를 저장한 뒤에 나중에 필요할 때 복원하고 싶다. 저장 및 복원은 어떻게 구현할까?</p>\n<p>이럴 때 필요한게 Memento 패턴이다.\n<br/>\n<br/></p>\n<h2>Todo App with Memento Pattern</h2>\n<p>Memento 패턴에 집중하기 위해 다른 패턴들은 잠시 다 걷어내고 이전 포스트에서 봤던 Plain Todo App에 Todo 목록 저장, 복원 기능을 Memento 패턴을 이용하여 구현해보도록 하자.\n<br/>\n<br/></p>\n<hr>\n<h2>Memento 패턴과 Command 패턴을 결합한 Undo, Redo 기능 구현</h2>\n<p>잠시 Undo, Redo 구현을 떠나서 만약에 3 * 3 연산을 하면 뭐가 나올까? 9가 나온다. 하지만 9를 다시 곱하기 연산 이전으로 되돌리면 뭐가 될까? 3이 될 수도 있고 -3이 될 수도 있다. (9의 제곱근을 생각해보길..)\n이처럼 이전으로 되돌리기 위해서는 이전에 어떠했는지에 대한 상태를 저장해야 한다. 이렇게 상태를 저장하는 로직을 구현할 때 필요한게 바로 Memento 패턴이다.</p>\n<p>텍스트 에디터나 IDE의 Undo, Redo 기능을 보면 이렇게 상태를 캡쳐하여 저장한 뒤 Undo, Redo 이벤트가 발생하면 해당 상태를 복원하는 식으로 구현이 되어 있다고 한다. 그래서 메모리에 상태를 저장하는데 한계가 있으므로 Undo, Redo 횟수가 제한되어 있는 경우가 많다.</p>","frontmatter":{"title":"Todo 앱을 통한 Memento Pattern의 이해 (with Java, Vaadin)","date":"2019-09-03 06:55:28","tags":["java","vaadin","design pattern","memento pattern"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/09/03/20190903-memento-pattern/","previous":{"fields":{"slug":"/2019/09/02/20190902-command-pattern/"},"frontmatter":{"title":"Todo 앱을 통한 Command Pattern의 이해 (with Java, Vaadin)"}},"next":null}}