{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"2a4576b0-aac3-5320-975f-157446cfdfaf","excerpt":"지난번 포스트(/2019/09/01/20190901-mediator-pattern)에서 Undo, Redo 기능을 적용해야 된다고 하자. 어떻게 구현하면 될까?위 문제를 해결하려면 Undo, Redo…","html":"<p>지난번 포스트(/2019/09/01/20190901-mediator-pattern)에서 Undo, Redo 기능을 적용해야 된다고 하자. 어떻게 구현하면 될까?</p>\n<p>위 문제를 해결하려면 Undo, Redo 할 행위(추가, 삭제)를 캡슐화하여 객체 형태로 만들어서 행위 객체들을 스택에 담아놓고 Undo, Redo에 따라 push, pop을 컨트롤 하면 될거 같다는 생각이 든다. 여기서 필요한 패턴이 Command Pattern이다. Command Pattern에 집중하기 위해 이전 포스트에서 다뤘던 Plain Todo App에 Command Pattern을 적용하도록 하겠다.</p>\n<h2>Todo App with Command Pattern</h2>","frontmatter":{"title":"Todo 앱을 통한 Command Pattern의 이해 (with Java, Vaadin)","date":"2019-09-02 12:05:58","tags":["java","vaadin","design pattern","mediator pattern"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/09/02/20190902-command-pattern/","previous":{"fields":{"slug":"/2019/09/01/20190901-mediator-pattern/"},"frontmatter":{"title":"Todo 앱을 통한 Mediator Pattern의 이해 (with Java, Vaadin)"}},"next":null}}