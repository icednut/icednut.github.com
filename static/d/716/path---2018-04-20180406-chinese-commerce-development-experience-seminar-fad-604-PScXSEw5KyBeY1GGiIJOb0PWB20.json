{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"7c094307-8ab3-59ce-825f-35852c32bcbc","excerpt":"얼마전 회사에 ‘김형준’님께서 오셔서 ‘중국 커머스 서비스 개발기’라는 제목으로 약 2시간 동안 세미나를 하셨다. 어디서 많이 본 얼굴인데 하고 긴가민가 했는데 알고보니 Popit…","html":"<p>얼마전 회사에 ‘김형준’님께서 오셔서 ‘중국 커머스 서비스 개발기’라는 제목으로 약 2시간 동안 세미나를 하셨다. 어디서 많이 본 얼굴인데 하고 긴가민가 했는데 알고보니 Popit에 기고를 하고 계셨던 분이었다. 평소에도 그 분 글을 재미있게 보고 있었는데 우리회사에서 세미나를 하신다니 와!!! (popit 관련 글: <a href=\"http://www.popit.kr/author/babokim/\">http://www.popit.kr/author/babokim/</a>)</p>\n<p>아무튼 세미나 내용은 중국 개발업체로 파견 나가셔서 개발자 약 50명을 이끌고 서비스 개선 및 광군제(쐉쓰이) 대응에 관해 어떤 식으로 진행했는지에 대한 말씀을 해주셨는데 쉽고 재미있게 설명해주셔서 개인적으로 상당히 감명깊었다. 굳이 커머스 개발을 하지 않아도 대용량 트래픽과 유연한 서비스 대응에 대해 MSA를 고민을 하고 있는 상황이라면 이 세미나에서 영감을 받을 수 있으리라.</p>\n<p>그럼 기억력에 의지하여 세미나 때 들은 내용을 적어볼까 한다.</p>\n<h2>중국 진출 및 처한 상황</h2>\n<p>사실 앞에서 제목이 ‘중국 커머스 서비스 개발기’라고 했지만 원래 세미나 제목은 ‘그럭저럭 돌아가는 서비스 만들기’ 였다. 그럭저럭 돌아가는, 대충 돌아가는 서비스를 중국에서 해봤다 이 말인데 뭐야 중국까지 가서 왜 대충 그럭저럭 돌아가는 서비스를 만들고 온거지 라는 의문 첫 인상이었다. 대충 그럭저럭 돌아간다는 의미가 무엇일까?</p>\n<p>대충 그럭저럭 돌아간다는 시스템을 차차 알아가기로 하고, 발표자가 중국 개발업체에 파견을 나가게 되었는데 거기서 받은 미션이</p>\n<ul>\n<li>현재 운영 중인 시스템을 경쟁력 있는 시스템으로 만들어달라.</li>\n</ul>\n<p>라는 미션이었다고 한다. 그런데 현재 운영 중인 시스템은…</p>\n<ul>\n<li>Windows Form</li>\n<li>Stored Procedure</li>\n<li>SQLServer (Table: 675개)</li>\n</ul>\n<p>아키텍처는 심플했지만 시대에 맞는 기민한 대응이 힘들었고 한다. (중복되는 구조의 Stored Procedure가 많았고, 비슷한 이름의 테이블이 많은데다가 특정 테이블의 구조를 변경할 경우 시스템에 미치는 영향을 예측할 수 없었다고 함. 이런 상황에서 요구사항 대응은 힘들었으리라..)</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/screenshot_01.png\"></p>\n<p>이런 상황에서 기존 서비스를 경쟁력 있는 서비스가 될 수 있도록 개선해야 되는 미션이 있었다고 한다.</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/mission.png\"></p>\n<h2>그래도 시작은 해야…</h2>\n<p>기존 시스템을 개선하기 전에 어떤식으로 개선할 것인지 기준을 정했는데 아래와 같은 기준을 정했다고 한다.</p>\n<ul>\n<li>다른 개발 언어, 플랫폼</li>\n<li>다른 운영 환경</li>\n<li>기존 시스템과 연결 안하기</li>\n</ul>\n<p>특히 놀라웠던 것은 기존에 있던 시스템을 새로운 언어로 다시 개발하기 위해 기존에 일했던 팀원에게 업무 분배를 했는데 아래와 같이 당부를 했다고 한다.</p>\n<ul>\n<li>개발자 한 명에 기능 하나</li>\n<li>테이블은 1 or 2개</li>\n<li>화면 역시 1 or 2개</li>\n<li>1주일 동안 무조건 동작하는 것 만들기</li>\n<li>하드코딩 허용</li>\n<li>HTML 날 코딩 허용 등등</li>\n<li>가장 놀라웠던 것은 테이블 간에 JOIN하지 말기</li>\n</ul>\n<p>위와 같이 당부하면서 사용하는 기술도 개발자들이 직접 선택하게 하였는데 이는 변화에 자발적인 참여를 유도하고 내 선택이 서비스에 미치는 영향도 느껴보게 하기 위함이었다고 한다. 다수의 개발자들이 멘붕에 빠지고 다소 혼란스러워 보였으나 중국 개발자들은 시키면 어떻게서든 꾸역꾸역하는 끈기가 있었다고 한다. (퀄리티는 만족스럽진 않았지만..)</p>\n<p>시행착오 끝에 결국 사용기술은 아래와 같이 결정이 되었다고 한다.</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/tech_stack.png\"></p>\n<p>서비스를 개발하기 위해 처음 써본 언어를 공부해 가면서 개발한다는 것은 경영진 입장에선 썩 달가운 모습은 아니었을 것이다. 그렇다고 손 놓고 있으면 미션을 달성할 수 없지 않은가? 이들이 중요하게 생각하는 것은 지금 이게 뭔지 이해는 할 수 없어도 돌아가는 어떤 것을 빨리 만드는 것. 그리고 개발이 끝나면 회고는 하지 않지만 만들었던 것을 잊고 다시 한 번 또 만들면서 개선해보는 것, 이 두 가지를 중요하게 생각하고 실천 했다고 한다. 그러면서 개발자 전체가 조금씩 성장할 수는 있었지만 여전히 한계는 존재했고 사건 사고도 있었다고 한다. (자세한 사고는 생략)</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/just_go.png\"></p>\n<h2>그들이 했던 MSA</h2>\n<p>Micro Service Architecture는 쉬운 아키텍처가 아니고 개발 성숙도가 높은 조직에서나 적용해야 성공적으로 운영할까 말까 한다고 한다. 그런데 그들은 기능을 잘게 나누고 기능만 나눈 것 뿐만 아니라 물리적으로도 서비스를 잘게 나누었다. 결국 기능 하나하나가 Microservice 였던 것이다. 왜 그렇게 했을까?</p>\n<ul>\n<li>현재 개발 조직의 능력으로 할 수 있는 최선이 작게 만드는 것</li>\n</ul>\n<p>위와 같은 이유 였다고 한다. 즉 현재 상황에서 최선을 선택한 것이다. (의도치 않게 MSA를 하게 됨)</p>\n<p>Microservice를 실제로 하면서 가장 큰 장벽은 아래와 같았다고 한다.</p>\n<ul>\n<li>JOIN 없이 기능을 개발하는 것</li>\n<li>떄문에 여러 서비스 호출을 하나의 Transaction으로 묶을 수 없었음</li>\n<li>\n<p>너무 많은 고민/걱정</p>\n<ul>\n<li>서비스 단위는 어떻게 쪼갤가..</li>\n<li>트렌젝션 장애 처리는 어떻게…</li>\n<li>서비스 간 의존/호출 관계가 복잡해지면 어떻게 할까?</li>\n</ul>\n</li>\n</ul>\n<p>JOIN이 없이 개발한다는 것은 서비스 간에 서로의 데이터가 필요한 순간이 있을텐데 이런 상황이 발생할 경우 두 서비스에 같은 테이블을 두고 같은 데이터를 쌓도록 했다고 한다. 중복처럼 보일 수 있지만 한 서비스에서는 해당 테이블에 데이터를 쌓은 뒤 이벤트를 발생시키고 다른 서비스에서는 그 이벤트를 구독해서 데이터를 복사해오는 방식으로 개발했다고 한다. 이렇게 각 서비스별로 중복되는 데이터를 갖고 있게 되거나 서비스 간에 데이터 정합성이 안맞는 문제가 발생할 수도 있지만 서비스간에 조인을 해야되는 골치아픈 상황은 피할 수 있게 되었다고 한다.</p>\n<p>또 트렌젝션 처리는 안하는 것으로 하였는데 이는 비용에 따른 선택 이었다고 한다. 트렌젝션을 엄격하게 지키면서 광군제와 같은 대용량 트래픽이 몰리는 이벤트를 처리할 수 있을까?</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/no_transaction.png\"></p>\n<p>MSA를 하게 되면 빠지지 않고 따라오는 개념이 바로 Event Driven이다. 서비스 간에 통신은 이벤트 드리븐으로 하게 되면 서비스 고유의 역할에만 집중할 수 있게 되고 서비스 플로우에 대한 오류는 관련 있는 서비스만 처리하게 되는 구조가 되게 된다. 거기다가 이벤트 드리븐 특성 상 이러한 일들은 비동기(Async)로 동작하게 된다. (ex: A 서비스에서 처리가 끝나면 Event Queue에 이벤트 전송 -> B 서비스에서 받아가서 처리)</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/event_driven.png\"></p>\n<p>특히 이 부분에서 좀 감명 깊었는데 실제로 MSA를 하다보니 아래와 같이 MSA가 쉽지 않은 것이라는 것을 몸소 체득하게 되었다고 한다.</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/msa_is_difficult.png\"></p>\n<p>그리고 MSA를 하면서 모든 서비스에 대해 모니터링이 필요한데 모니터링을 하기 위해서는 로그가 중요하다. 모든 서비스에서 발생하는 로그, 이벤트를 기록했는데 눈에 띄는 것은 모든 로그를 HDFS에 저장하고 Presto로 이벤트 및 로그를 제플린에서 질의하고 있었다.</p>\n<p><img src=\"./20180406-chinese-commerce-development-experience-seminar/data_federation.png\"></p>\n<p>또 감명깊었던 부분은 모든 서비스 플로우에 대해 Requst ID를 부여하여 request를 추적할 수 있도록 로그를 남겼다는 점이다. 예를들어 서비스 플로우 A가 있으면 A에 해당하는 서비스가 ㄱ 서비스, ㄴ 서비스, ㄷ 서비스가 있으면 request가 서비스를 거칠 때 마다 requestID를 부여하고 덧붙이는 방식이었다. 이렇기 떄문에 서비스 플로우 A에 대한 콜 스택이 어떻게 되는지 추적도 할 수 있고 어느 서비스에서 오류가 발생해서 그 다음 서비스로 못넘어 갔는지도 모니터링이 가능했다고 한다. 더 나아가 이러한 데이터를 바탕으로 실시간 모니터링 툴까지 개발한 모습도 보여주었다.</p>\n<h2>마치며..</h2>\n<p>MSA를 하면서 오류가 발생하는 것은 어쩔 수 없다. 그런데 이들은 어쩔 수 없음을 윗선(경영진)에서 부터 공감하고 허용하고 있었다. 오류는 즉 매출에 영향이 있음에도 불구하고 이런 인식을 갖고 있던 것은 무엇일까? 중국의 많은 인구로 인한 대규모 트래픽과 기민한 서비스 대응만이 살아남는 구조이기 때문에 오류가 발생해도 매출 발생 대응이 중요했기 때문이라고 본다. 이러한 상황이 애자일을 할 수 밖에 없는 상황이 된 것으로 본다. 우리나라 정서에는 안맞는 부분이 있을 수도 있겠지만 배울건 있다고 본다. MSA를 하기 위해 공부를 멈추지 말아야 겠다.</p>\n<h2>참고 자료</h2>\n<ul>\n<li><a href=\"http://www.popit.kr/%EB%8C%80%EC%9A%A9%EB%9F%89-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9F%AD%EC%A0%80%EB%9F%AD-%EB%8F%8C%EC%95%84%EA%B0%80%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0/\">http://www.popit.kr/%EB%8C%80%EC%9A%A9%EB%9F%89-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9F%AD%EC%A0%80%EB%9F%AD-%EB%8F%8C%EC%95%84%EA%B0%80%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0/</a></li>\n<li><a href=\"http://www.popit.kr/micro-service-docker%EB%A1%9C-%ED%95%A0-%EC%88%98-%EB%B0%96%EC%97%90-%EC%97%86%EC%97%88%EB%8D%98-%EC%82%AC%EC%97%B0/\">http://www.popit.kr/micro-service-docker%EB%A1%9C-%ED%95%A0-%EC%88%98-%EB%B0%96%EC%97%90-%EC%97%86%EC%97%88%EB%8D%98-%EC%82%AC%EC%97%B0/</a></li>\n<li><a href=\"http://www.popit.kr/author/babokim/page/2/\">http://www.popit.kr/author/babokim/page/2/</a></li>\n</ul>","frontmatter":{"title":"중국커머스 서비스 개발기 세미나 후기","date":"2018-04-06 10:58:35","tags":["microservice"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/04/20180406-chinese-commerce-development-experience-seminar/","previous":{"fields":{"slug":"/20180329-understanding-visitor-pattern/"},"frontmatter":{"title":"To-Do App 개발을 통한 Visitor Pattern 이해하기 (javascript 버전)"}},"next":{"fields":{"slug":"/2018/04/20180412-understanding-observer-pattern/"},"frontmatter":{"title":"To-Do App 개발을 통한 Observer Pattern 이해하기 (javascript 버전)"}}}}