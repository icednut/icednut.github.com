{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"3f619cda-df34-56cd-b024-312f4922f511","excerpt":"얼마전에 작성한 Java Batch 프로그램 중에 이런 요구사항이 있었다.HBase 특정 테이블에서 대량의 데이터를 조회한다.조회한 데이터를 Kafka로 Producing한다.‘Java…","html":"<p>얼마전에 작성한 Java Batch 프로그램 중에 이런 요구사항이 있었다.</p>\n<ul>\n<li>HBase 특정 테이블에서 대량의 데이터를 조회한다.</li>\n<li>조회한 데이터를 Kafka로 Producing한다.</li>\n</ul>\n<p>‘Java로 하지말고 다른 오픈소스 도구를 쓰면 되는거 아냐?’ 라고 할 수도 있겠지만 여러가지 제약사항 때문에 저 문제를 Java로 작성해야 한다고 하자. 이 문제를 어떻게 풀까?</p>\n<p>일단 문제를 풀기 전에 Java에서 HBase 조회하는 방법을 간략하게 정리하자. 자세한 설명은 생략하고 일단 이렇게 하면 HBase에서 데이터를 조회해 올 수 있겠구나 생각하고 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>icednut</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HBaseDataSourceManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hbase<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hbase<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ResultScanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hbase<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hbase<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Table</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Table</span> table <span class=\"token operator\">=</span> <span class=\"token class-name\">HBaseDataSourceManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getTable</span><span class=\"token punctuation\">(</span>MY_TABLE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scan</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultScanner</span> scanner <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">getScanner</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span> result <span class=\"token operator\">:</span> scanner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 1</span>\n        <span class=\"token comment\">// result</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>HBase Java Client 사용하여 아래와 같이 HBase DataSource 객체만 있으면 Hbase 테이블 관련 인스턴스와 그 테이블을 스캐닝 할 수 있는 스캐너(ResultScanner) 인스턴스를 통해 데이터를 조회할 수 있다.</li>\n<li>주석 1이라고 표시한 부분을 살펴보면 scanner는 Iterable의 구현체이기 때문에 주석1과 같이 for-each 구문이 가능하다.</li>\n</ul>\n<br/>\n<br/>\n<h3>방법1. 그냥 루프 돌면서 읽는 족족 보내기</h3>\n<p>일단 드는 생각은 위 코드 기반으로 result 인스턴스에서 데이터를 읽어서 카프카로 바로 보낼 것이다. 이 생각을 코드로 옮기면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultScanner</span> scanner <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">getScanner</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 방법 1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span> result <span class=\"token operator\">:</span> scanner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> targetDataStr <span class=\"token operator\">=</span> <span class=\"token class-name\">Bytes</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>COLUMN_FAMILY<span class=\"token punctuation\">,</span> MY_TARGET_COLUMN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        kafkaClient<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>targetDataStr<span class=\"token punctuation\">,</span> TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그러나 여기에는 이슈가 하나 있다.</p>\n<ul>\n<li>scanner에서 읽는 족족 result를 전송하고 있는데 이게 만약 데이터양이 대량이라면?</li>\n<li>대량의 데이터를 카프카로 프로듀싱하면 네트워크 트래픽이 폭주하지 않을까? </li>\n<li>혹은 카프카 토픽을 컨슈밍하고 있는 앱에서 대량의 데이터를 받으면 터질꺼 같다. 안터지게 좀 대량으로 확 안보내고 싶은데?</li>\n</ul>\n<p>뭐 물론 네트워크 트래픽을 신경 안써도 되는 환경이라면 위 방법대로 읽는 족족 보내도 상관없을거 같다. 하지만 컨슈밍하는 앱에서 대량의 데이터를 못받아내면 어떻게 할 것인가? </p>\n<h3>방법2. 루프 돌면서 보내되, 조금씩 모아서 보내자.</h3>\n<p>위 코드를 살짝만 마사지 하면 될거 같다! <code class=\"language-text\">KafkaClient.produce(String data, String topic)</code>의 코드에서 첫 번째 파라미터를 <code class=\"language-text\">String</code> 한 개만 받는게 아니라 <code class=\"language-text\">List&lt;String&gt;</code> 과 같이 여러 개를 받아서 처리하게 하면 어떨까?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultScanner</span> scanner <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">getScanner</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 방법 2</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span> result <span class=\"token operator\">:</span> scanner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bytes</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>COLUMN_FAMILY<span class=\"token punctuation\">,</span> MY_TARGET_COLUMN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> LIMIT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        kafkaClient<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그러나 안타깝게도 우리의 <code class=\"language-text\">KafkaClient</code>에는 <code class=\"language-text\">kafkaClient.produce(List&lt;String&gt; datas, String topic)</code>과 같은 메소드가 없다고 치자. 그럼 또 buffer를 루프 돌려서 보내면 되지 않을까?</p>\n<p>또 buffer의 내용을 다 보내고 난 후 컨슈머 앱이 처리하는 것을 기다려주고 싶다. 그럼 <code class=\"language-text\">Thread.sleep</code>을 쓰면 되나?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultScanner</span> scanner <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">getScanner</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 방법 2</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span> result <span class=\"token operator\">:</span> scanner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bytes</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>COLUMN_FAMILY<span class=\"token punctuation\">,</span> MY_TARGET_COLUMN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> LIMIT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data <span class=\"token operator\">:</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        \tkafkaClient<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>SLEEP_TIME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>방법2-2. 모아서 보내는거 좀 더 깔끔한 방법 없을까? (with RxJava)</h3>\n<p>위 방법도 좋은데 for 루프도 두 번 작성한거와 <code class=\"language-text\">Thread.sleep</code> 코드를 넣은게 좀 마음에 안든다. 같은 방법을 좀 깔끔하게 처리할 수는 없을까?</p>\n<p>이럴 때  RxJava를 쓰면 좋을거 같아서 RxJava를 사용했다. RxJava에서는 Observable와 buffer 메소드를 통해 끝을 알 수없는 Iterable에서 데이터를 가져와서 모았다가 subscribe하는 방법을 쓰면 될 것 같았다. 이 개념만 코딩하자면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>reactivex</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Observable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromIterable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> iterator<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">blockingSubscribe</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**** send log count: {}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 예제코드는 끝을 알 수 없는 무한대 iterator로 부터 5개씩 끊어서 subscribe하는 것을 표현하고자 했다. <code class=\"language-text\">blockingSubscribe</code> 메소드를 쓴 이유는 <code class=\"language-text\">subscribe</code> 메소드는 논블로킹 메소드이기 때문에 해당 메소드가 호출되면 바로 다음 줄로 넘어가기 때문이다. </p>\n<p>위 iterator는 무한대 크기이기 때문에 <code class=\"language-text\">take</code> 메소드를 통해서 일부만 처리해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>reactivex</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Observable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromIterable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> iterator<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">blockingSubscribe</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**** send log count: {}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>여기에 각 버퍼 윈도우 처리 별로 텀(5초)을 둬서 처리하고 싶다. (왜? 받는 쪽에서 처리할 시간을 벌기 위해서 텀을 두고 싶다고 하자). 그럴 경우 아래와 같이 <code class=\"language-text\">buffer</code> 메소드 다음에 생성되는 item에 대해 5초 쉬는 observable 처리를 덧붙인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>reactivex</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Observable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromIterable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> iterator<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">concatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">blockingSubscribe</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**** send log count: {}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>RxJava에 대한 자세한 내용은 다음에 다시 다뤄보자. 혹은 아래 링크를 참조하여 RxJava가 이런거구나 파악하는거도 좋을거 같다.</p>\n<ul>\n<li><a href=\"https://ahea.wordpress.com/2017/02/13/rxjava/\">https://ahea.wordpress.com/2017/02/13/rxjava/</a></li>\n</ul>\n<p>그럼 위 예제코드를 통해 앞에서 진행했던 요구사항 구현체에 반영해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>reactivex</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultScanner</span> scanner <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">getScanner</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromIterable</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">concatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">blockingSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">></span></span> results<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span> result <span class=\"token operator\">:</span> results<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> targetDataStr <span class=\"token operator\">=</span> <span class=\"token class-name\">Bytes</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>COLUMN_FAMILY<span class=\"token punctuation\">,</span> MY_TARGET_COLUMN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \t\tkafkaClient<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>targetDataStr<span class=\"token punctuation\">,</span> TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        throwable <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>throwable<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>갑자기 <code class=\"language-text\">Observable</code>에서 <code class=\"language-text\">Flowable</code>을 바꾼거는 일단 둘 다 비슷한 녀석이니 무시하고 넘어가자 (<code class=\"language-text\">Flowable</code>에는 Backpressure 기능이 있어서 나중에 이 기능을 적용하려고 쓰긴 했다). 그런데 어찌된 일인지 <code class=\"language-text\">blockingSubscribe</code>을 호출하는 순간 위 코드를 실행하면 1000건씩 끊어서 처리하지 않고 처음부터 계속 데이터를 모으고 있다. 어찌된 일일까?</p>\n<p>일단 결과만 놓고 보자면 buffer을 통해 생성된 item에 대해 한 번 더 <code class=\"language-text\">Observable</code>이나 <code class=\"language-text\">Flowable</code> 을 변환해주면 이 문제는 해결이 된다. (왜 그럴까? 이건 시간 관계상 나중에 보충하자)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>reactivex</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultScanner</span> scanner <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">getScanner</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromIterable</span><span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>results <span class=\"token operator\">-></span> <span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">concatMap</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">blockingSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">></span></span> results<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span> result <span class=\"token operator\">:</span> results<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> targetDataStr <span class=\"token operator\">=</span> <span class=\"token class-name\">Bytes</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>COLUMN_FAMILY<span class=\"token punctuation\">,</span> MY_TARGET_COLUMN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \t\tkafkaClient<span class=\"token punctuation\">.</span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>targetDataStr<span class=\"token punctuation\">,</span> TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        throwable <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>throwable<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이렇게 하면 위와 같은 <code class=\"language-text\">Flowable</code>에  <code class=\"language-text\">blockingSubscribe</code>를 호출해도 데이터를 다 끌어 모을 때까지 블로킹이 되지 않고 1000건씩 끊어서 처리 후 5초 대기 그리고 그 다음 처리라는 동작 수행을 볼 수 있다.</p>\n<h3>다음 할 일</h3>\n<p>여기서는 RxJava를 통해 데이터 배출을 특정 건수 만큼 그리고 특정 텀을 가지고 진행하는 것을 해보고 싶었다. 다음 할 일으로는 RxJava를 좀 더 잘 이해하여 여러 가지 상황에서 알맞게 사용해보자!!</p>","frontmatter":{"title":"RxJava를 이용하여 크기를 가늠할 수 없는 Iterable에서 데이터 읽고 처리하기","date":"2019-01-31 10:11:01","tags":["java","RxJava"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/01/31/20190131-rxjava-infinite-iterable/","previous":{"fields":{"slug":"/2019/01/29/20190129-scala-and-functional-programming-day07/"},"frontmatter":{"title":"스칼라 스터디 Day07 - 속성 기반 검사"}},"next":{"fields":{"slug":"/2019/07/09/20190709-java-hbase-logback-slf4j/"},"frontmatter":{"title":"Java Hbase-client 디펜던시 추가 후 로그가 제대로 안나오는 이슈 (with Slf4j, Logback)"}}}}