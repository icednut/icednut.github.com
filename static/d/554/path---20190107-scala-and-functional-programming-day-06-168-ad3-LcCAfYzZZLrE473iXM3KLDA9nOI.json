{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"433b98a4-901a-5665-a9ba-f71aaf3104b4","excerpt":"출처: 스칼라로 배우는 함수형 프로그래밍 7장Chapter 0…","html":"<p>출처: 스칼라로 배우는 함수형 프로그래밍 7장</p>\n<h2>Chapter 07. 순수 함수적 병렬성</h2>\n<p>이번 챕터에서 다룰 내용</p>\n<ul>\n<li>숫자 목록 합산하는 함수 만들기</li>\n<li>숫자 합산을 병렬적으로 풀기</li>\n<li>풀이 진행 중 일반화 진행</li>\n</ul>\n<p>이번 챕터에서 특히 어려움을 많이 느꼈는데, 중간중간 불쑥 튀어나오는 함수 조합기와 그 조합기 구현을 어떻게 그렇게 생각해낼수 있을지 조금은 경외심도 느꼈다. 나로써는 도저히 그렇게 한 방에 그런 구현이 나와야 된다는 생각이 안들던데 그래서 그런지 연습문제도 딱히 어떻게 풀어야 겠다는 생각이 안들어서 어렵다고 느끼는 것 같다. 각설하고 공부한 내용을 정리하자.</p>\n<br/>\n<br/>\n<h3>숫자 목록 합산하는 함수 만들기</h3>\n<p>이번 챕터에서는 목록에 있는 정수(Int)들의 합을 구하는 함수를 구하는 것으로 시작해보자.</p>\n<h4>1. foldLeft를 이용한 숫자 목록의 합 구하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> ints<span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>위 구현 방식은 Seq 중 왼쪽에서 오른쪽으로 숫자 두 개씩 접으면서 수행하는 코드 동작 방식으로 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">sum<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\nSeq<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\nSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\nSeq<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\nSeq<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foldLeft<span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token number\">15</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>2. Divide-and-conquer 알고리즘을 이용한 숫자 목록의 합 구하기</h4>\n<p>순차적으로 접으면서 계산하는 것도 좋지만 합(sum)을 병렬로 돌리게 하고 싶을 경우 어떻게 할까? 추후 병렬로 하기 위해 계산 작업을 쪼개서 실행하는 분할정복 (divide-and-conquer) 알고리즘을 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\tints<span class=\"token punctuation\">.</span>headOption<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ints<span class=\"token punctuation\">.</span>splitAt<span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\tsum<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이는 ints를 splitAt 함수를 이용하여 절반으로 나누고 재귀적으로 두 절반을 각각 합해서 결과들을 합치는 방식(<code class=\"language-text\">sum(l) + sum(r)</code>)이다. 이렇게 합치는 계산(sum)을 재귀적으로 쪼개서 실행하는 방식이므로 <code class=\"language-text\">foldLeft</code>와는 다르게 병렬화할 수 있다. (두 절반을 병렬로 합할 수 있다)</p>\n<h3>숫자 합산을 병렬적으로 풀기</h3>\n<h4>1. 숫자 계산 부분만 병렬(쓰레드)로 처리하기</h4>\n<p>2번의 구현 내용을 병렬적으로 풀기 위해서는 <code class=\"language-text\">sum(l)</code>과 <code class=\"language-text\">sum(r)</code>을 각각 개별 스레드에서 실행(평가)할 수 있도록 구조를 변경한다. 이렇게 개별적으로 계산 및 결과를 담을 <code class=\"language-text\">Par[A]</code>라는 자료형을 만들자(여기서 <code class=\"language-text\">A</code>는 계산 결과의 타입을 의미). <code class=\"language-text\">Par[A]</code>를 사용한 숫자 목록 합산 함수는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        ints headOption getOrElse <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ints<span class=\"token punctuation\">.</span>splitAt<span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> sumL<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> sumR<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        Par<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sumL<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Par<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sumR<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 Par.unit과 Par.get 사용한 것을 보고 함수의 시그니처를 생각해보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> unit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 숫자 계산(a 썽크)을 병렬(스레드)로 처리</span>\n    <span class=\"token keyword\">def</span> get<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> A <span class=\"token comment\">// Par에서 숫자 계산 결과값을 꺼냄</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>여기서 Par.unit은 썽크를 받아서 병렬로 처리한 뒤 결과 값을 상태로 갖고 있는 것이고, Par.get은 Par에 담긴 결과값을 추출하는 함수이다.</p>\n<blockquote>\n<h5>여기서 잠깐! Par.unit 함수를 어떻게 구현할까?</h5>\n<ol>\n<li>unit 함수 인자로 받은 썽크를 unit 호출 시 바로 병렬로 처리하여 결과를 갖고 있다가 Par.get이 호출되면 그 결과를 반환한다. (위에서 한 얘기)</li>\n<li>unit 함수 인자로 받은 썽크를 unit 호출 시 바로 실행하지 않고 Par.get이 호출되면 해당 썽크를 비동기로 호출하여 결과를 반환한다.</li>\n</ol>\n</blockquote>\n<p>여기서는 1번의 방법으로 진행하는 것이 병렬성에 이점을 취할 수 있는데, 그 이유는 2번 방법으로 실행하면 get 함수를 호출하면 계산 결과가 나올 때까지 기다리기 때문에 병렬적으로 실행되지 않게 되기 때문이다. 아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">Par<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sumL<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Par<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sumR<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>위 코드를 2번 방식으로 진행된다면 Par.get(sumL)에서 계산이 끝나야지 Par.get(sumR)이 호출되기 때문이다. (스칼라에서는 구문을 왼쪽에서 오른쪽으로 실행) 그렇기 때문의 우리의 Divide-and-conquer 코드에서는 1번 방식으로 해결하는 것이 좋다.</p>\n<blockquote>\n<h5>이슈 발생: 참조 투명성이 깨짐</h5>\n<p>1번 방식으로 진행한다고 해도 참조 투명성이 깨진다. 왜 그럴까? 참조 투명성을 증명하기 위해 sumL과 sumR을 아래와 같이 치환한다.</p>\n<p><code class=\"language-text\">Par.get(Par.unit(sumL))) + Par.get(Par.unit(sum(r)))</code></p>\n<p>이렇게 보면 또다시 병렬로 실행되지 않는 문제가 나타날 뿐만아니라, unit의 결과값(상태)를 갖고 있는 형식이 되기 때문에 부수효과가 존재하게 된다. 이런 부수 효과 때문에 Par.get이 영향을 받는다.</p>\n</blockquote>\n<p>구체적으로 무슨 영향을 받는 것일까?</p>\n<ul>\n<li>Par.get 메소드는 Par.unit에서 계산된 결과값에 따라 결과 값을 반환하도록 의존하게 된다.</li>\n<li>즉 Par.unit의 병렬 계산이 끝나기 전까지는 Par.get 호출의 결과 반환은 Blocking 된다.</li>\n<li><code class=\"language-text\">Par.get(Par.unit(sumL)))</code>이 끝나야지 <code class=\"language-text\">Par.get(Par.unit(sum(r)))</code> 이 실행되는 이슈가 여전히 드러난다.</li>\n</ul>\n<p><u>우리의 목표는 숫자 합산이 병렬로 처리되어야 하는데 Par.unit에서 아무리 병렬로 합을 계산한다고 해도 Par.get에서 블로킹되어 버리니 궁극적인 병렬처리는 아니다.</u> 그럼 이걸 어떻게 해결할까?</p>\n<h4>2. 병렬계산을 조합하기</h4>\n<p><code class=\"language-text\">Par.get</code>에서 블로킹이 되는거 때문에 병렬처리가 안된다면 <code class=\"language-text\">Par.get</code>을 걷어내자. <code class=\"language-text\">Par.get</code>을 걷어내면 <code class=\"language-text\">Par.unit</code> 에서 처리된 병렬처리 계산 결과는 어떻게 추출할 것인가?</p>\n<p><u>관점을 변경해서 <code class=\"language-text\">Par.unit</code>이 하나의 계산 병렬처리라면 이 병렬처리 여러 개를 모아서 한꺼번에 그 결과를 반환하게 하면 어떨까? 즉 병렬처리 함수들을 하나로 조합하여 결과 추출(<code class=\"language-text\">Par.get</code>)을 한 번만 하게 하는 것이다.</u> 이렇게 병렬처리를 조합하는 아이디어를 반영한 sum 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>headOption getOrElse <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ints<span class=\"token punctuation\">.</span>splitAt<span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        Par<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>그럼 <code class=\"language-text\">Par.map2</code> 라는 조합기 함수의 시그니처를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> map2<span class=\"token punctuation\">(</span>ap<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bp<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> C<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>map2를 좀 더 살펴보자.</p>\n<p>map2는 ap와 bp가 각각 병렬로 실행되어야 한다. 즉 ap와 bp가 인수로 전달 되자마자 병렬 실행이 되어야 하며 이는 map2가 엄격한 함수이어야 한다는 의미이다. 과연 그럴까? sum 코드 실행을 한 번 추적해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">1</span><span class=\"token operator\">:</span>\nsum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">2</span><span class=\"token operator\">:</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n    sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">3</span><span class=\"token operator\">:</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n\tmap2<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">4</span><span class=\"token operator\">:</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n\tmap2<span class=\"token punctuation\">(</span>Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">5</span><span class=\"token operator\">:</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n\tmap2<span class=\"token punctuation\">(</span>Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    map2<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">6</span><span class=\"token operator\">:</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n\tmap2<span class=\"token punctuation\">(</span>Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    map2<span class=\"token punctuation\">(</span>Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<h5>이슈 발생: 병렬처리 실행이 한꺼번에 실행되지 않음</h5>\n<p><u>위 코드 추적 과정을 통해 밝혀진 문제점은 무엇일까? 4번 과정에서 나타난 것과 같이 아직 <code class=\"language-text\">IndexedSeq(3,4)</code>에 대한 병렬처리가 시작되기도 전에 <code class=\"language-text\">Par.unit(1)</code>과 <code class=\"language-text\">Par.unit(2)</code> 라는 병렬처리가 시작되는 이슈가 발생하기 시작한다.</u> 즉, 오른쪽 인수가 모두 평가되기도 전에 왼쪽 인수의 병렬처리가 실행되버리는 형태가 나타나게 된다. 이는 곧 완전하지 않은 병렬처리라고 볼 수 있다. </p>\n</blockquote>\n<p>그럼 위 이슈를 어떻게 해결할까?</p>\n<h4>3. Par.map2 사용에 따른 명시적 병렬처리 실행코드 추가</h4>\n<p>위 이슈를 해결하기 위해 <code class=\"language-text\">Par.map2</code>의 인수를 게으르게 평가하도록 바꾸려고 생각할 것이다. (인수의 게으른 혹은 엄격한 평가는 6장을 참조)</p>\n<p><strong>하지만 좀 더 근본적인 문제 해결을 생각해보자.</strong> 굳이  <code class=\"language-text\">Par.map2</code>는 꼭 인수들을 엄격하게 병렬로 평가할 필요가 있을까?</p>\n<blockquote>\n<h5>여기서 잠깐? fork의 등장</h5>\n<p>문제:  <code class=\"language-text\">sum(IndexedSeq(1,2))</code> 처리하자고 스레드 2개나 만들어서 처리해야할까? (<code class=\"language-text\">Par.unit(1)</code>용 스레드 하나, <code class=\"language-text\">Par.unit(2)</code>용 스레드 하나)</p>\n<ul>\n<li>\n<p>굳이 스레드까지 쓸 필요 없이 <code class=\"language-text\">1 + 2</code>는 눈 깜짝할 사이에 끝날 것이 자명하다.</p>\n</li>\n<li>\n<p>여기서 우리는 <code class=\"language-text\">Par.map2</code>는 병렬처리라는 인수를 엄격하게 평가하되 개발자가 해당 인수는 병렬 처리라는 것을 명시해주는 장치가 필요하다. 왜냐면 아까와 같이 병렬처리가 필요없는 곳에서는 병렬처리를 안하도록 명시하는 것을 프로그래머가 명시할 수 있게 되는 것이다.</p>\n</li>\n<li>\n<p>즉 아래와 같이 Par를 개별 스레드에서 처리하게 하는 fork 함수를 선언하고 더 이상 <code class=\"language-text\">Par.unit</code>에서는 병렬처리 코드를 걷어내는 것이 바람직하다. (병렬처리를 개발자가 fork를 통해 명시적으로 표시하게 함)</p>\n</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> fork<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>앞에서 말한 것처럼 병렬 실행을 프로그래머가 결정하게 하기 위해 fork를 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>ints<span class=\"token operator\">:</span> IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        Par<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>headOption getOrElse <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ints<span class=\"token punctuation\">.</span>splitAt<span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        Par<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>fork에게 병렬 실행을 위임하였으니 정말 문제가 없을까? 앞에서 했던 것처럼 실행 과정을 추적해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">1</span><span class=\"token operator\">:</span>\nsum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">2</span><span class=\"token operator\">:</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n    Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// sum(IndexedSeq(1,2))를 병렬 실행</span>\n    Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// sum(IndexedSeq(3,4))를 병렬 실행</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">3</span><span class=\"token operator\">:</span>\n<span class=\"token comment\">//sum(IndexedSeq(1,2))</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n    Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// sum(IndexedSeq(1))를 병렬 실행</span>\n    Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// sum(IndexedSeq(2))를 병렬 실행</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>\n<span class=\"token comment\">//sum(IndexedSeq(3,4))</span>\nPar<span class=\"token punctuation\">.</span>map2<span class=\"token punctuation\">(</span>\n    Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// sum(IndexedSeq(3))를 병렬 실행</span>\n    Par<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span>IndexedSeq<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// sum(IndexedSeq(4))를 병렬 실행</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token number\">4</span><span class=\"token operator\">:</span>\n<span class=\"token comment\">// sum(IndexedSeq(1))의 병렬 실행</span>\nPar<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// sum(IndexedSeq(2))의 병렬 실행</span>\nPar<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// sum(IndexedSeq(3))의 병렬 실행</span>\nPar<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// sum(IndexedSeq(4))의 병렬 실행</span>\nPar<span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n위의 Par<span class=\"token punctuation\">.</span>unit들을 <span class=\"token operator\">+</span>로 묶은 Par를 반환함</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>완전히 맞지는 않지만 일단 병렬실행이 언제 실행되는지를 표시하는데에 중점을 두었다.</p>\n<p>위의 실행 과정으로 미루어봤을 때 map2의 두 인자가 동시에 병렬적으로 실행하게 되었다. 즉, <code class=\"language-text\">Par.fork</code>를 쓰면 <code class=\"language-text\">Par.map2</code>는  엄격하게 해도 병렬적으로 실행되며, <code class=\"language-text\">Par.unit</code>은 엄격하게 해도 병렬실행에 문제가 생기지 않는다. 끄읕~</p>\n<h5>과연 이대로 끝일까? 병렬처리의 평가</h5>\n<p><code class=\"language-text\">sum</code> 함수가 이제 <code class=\"language-text\">Par.map2</code>로 <code class=\"language-text\">Par.fork</code>들로 묶인 병렬처리들을 조합하여 <code class=\"language-text\">Par</code>를 반환하는 것으로 탈바꿈하였다. 그럼 <code class=\"language-text\">sum</code> 함수의 결과는 <code class=\"language-text\">Par[A]</code>로 <code class=\"language-text\">Par.get</code>을 호출하면 결과를 얻을 수 있을 것이다.</p>\n<p>그럼 <code class=\"language-text\">Par.fork</code>를 호출하는 즉시 내부적으로 병렬 실행을 평가하게 하는게 좋을까? 아니면 <code class=\"language-text\">Par.get</code>을 호출할 때 <code class=\"language-text\">Par.fork</code>로 조합한 <code class=\"language-text\">Par.unit</code>들을 병렬 실행을 평가하게 하는게 좋을까?</p>\n<p>나는 솔직히 둘 다 괜찮다고 생각했다. 그러나 책에서는 후자가 더 좋은 선택이라고 소개하며, 전자가 나쁜 이유를 설명하는데 솔직히 이해를 못하겠다.</p>\n<blockquote>\n<p>p.129</p>\n<p>만일 fork가 자신의 인수를 즉시 병렬로 평가하기 시작한다면, 그 구현은 스레드를 생성하는 방법이나 과제를 일종의 스레드 플에 제출하는 방법을 직접적으로든 간접적으로든 알고 있어야 한다. 더 나아가서, 이는 스레드 풀(또는 병렬성을 구현하는 데 사용하는 어떤 자원)이 반드시 접근 가능한(전역적으로) 자원이어야 하며, fork를 호출하는 시점에서 이미 적절히 초기화되어 있어야 함을 의미한다. 그런 조건을 만족하려면 프로그램의 여러 부분에서 쓰이는 병렬성 전략을 프로그래머가 임의로 제어할 수 있는 능력을 포기해야 한다. 병렬 과제들의 실행을 위해 전역 자원을 두는 것이 근본적으로 잘못된 일은 아니지만, 구현이 무엇을 언제 사용할 것인지를 프로그래머가 좀 더 세밀하게 제어할 수 있다면 더 좋은 것임을 상상이 가능하다(예를 들어 큰 응용 프로그램의 각 하위 시스템이 각자 다른 매개변수들로 설정된 스레드 풀을 유지하는 등). 따라서 스레드 생성과 실행 과제 제출의 책임을 get에 부여하는 것이 훨씬 적합하겠다.</p>\n<p>…</p>\n<p>fork가 그냥 인수의 평가를 뒤로 미루게 한다면, fork는 병렬성 구현을 위한 메커니즘에 접근할 필요가 없다. 그냥 평가되지 않은 Par 인수를 받고 그 인수에 동시적 평가가 필요하다는 점을 ‘표시’만 해 두면 된다. 이것이 바로 fork의 의미라고 가정하자. 이러한 모형에서, Par 자체는 병렬성의 구체적인 구현 방법을 알 필요가 없다. Par는 나중에 get 함수 같은 무언가에 의해 해석될 병렬 계산에 관한 서술에 가깝다. 이는, Par를 나중에 준비되었을 때 조회(get)할 어떤 값을 담은 컨테이너라고 생각했던 것과는 다른 발생이다. 이제는 실행이 가능한 일급 프로그램에 좀 더 가까워졌다. 그런 취지에서 get 함수의 이름을 run으로 바꾸고, 병렬성이 실제로 구현되는 지점이 바로 이 run 함수임을 천명하기로 하자.</p>\n<p><code class=\"language-text\">def run[A](a: Par[A]): A</code></p>\n</blockquote>\n<p>위 내용을 요약하자면 <code class=\"language-text\">Par.fork</code>는 인자로 받은 썽크를 병렬처리 장치로 감싼(책에서는 이걸 서술이라고 표현) 자료구조를 반환하게 되고, 이 병렬 자료구조를 실행하는 것은 <code class=\"language-text\">Par.run</code>에서 하게 한다. (병렬 자료구조를 스레드 풀에 위임하거나 아니면 다른 방법을 쓰는 것은 그 다음 얘기)</p>\n<h4>4. 여태까지 정리한거를 코드로 선언해보자!</h4>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> unit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> UnitFuture<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> lazyUnit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> UnitFuture<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>get<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">def</span> isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">def</span> get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> units<span class=\"token operator\">:</span> TimeUnit<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> get\n        <span class=\"token keyword\">def</span> isCancelled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">def</span> cancel<span class=\"token punctuation\">(</span>evenIfRunning<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> map2<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> C<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> af <span class=\"token operator\">=</span> a<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> bf <span class=\"token operator\">=</span> b<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span>\n            UnitFuture<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>af<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">,</span> bf<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> map<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>pa<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n        map2<span class=\"token punctuation\">(</span>pa<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> f<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> fork<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n        es <span class=\"token keyword\">=></span> es<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Callable<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">def</span> call <span class=\"token operator\">=</span> a<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// asyncF는 A => B의 결과를 비동기로 평가되는 함수로 변환하는 함수</span>\n    <span class=\"token comment\">// lazyUnit을 이용해서 작성하면 된다.</span>\n    <span class=\"token keyword\">def</span> asyncF<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> Par<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token keyword\">=></span> lazyUnit<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>UnitFuture는 병렬 실행 자료구조일 뿐 병렬처리 실행 로직은 들어있지 않다.</li>\n<li>fork 함수의 구조를 할펴보면 이슈가 있는 것을 발견할 수 있다. (Deadlock 위험 내제)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> ExecutorService <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> submit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Callable<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">trait</span> Callable<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> call<span class=\"token operator\">:</span> A\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">trait</span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> get<span class=\"token operator\">:</span> A\n    <span class=\"token keyword\">def</span> get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> unit<span class=\"token operator\">:</span> TimeUnit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> A\n    <span class=\"token keyword\">def</span> cancel<span class=\"token punctuation\">(</span>evenIfRunning<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span>\n    <span class=\"token keyword\">def</span> isDone<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span>\n    <span class=\"token keyword\">def</span> isCancelled<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ExecutorService <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> run<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> equal<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>코드를 구현했으면 아래와 같은 궁금증이 생길 것이다. (난 안생기던데..)</p>\n<ol>\n<li>위에 구현된 조합기(map2, map)들로 어떤 것을 표현할 수 있을까?</li>\n<li>fork 함수에서 쓰는 ExecutorService에서 발생할 수 있는 문제는 무엇일까?</li>\n</ol>\n<p>1번은 생략하고 2번을 살펴보자.</p>\n<h4>5. Par.fork: 스레드 풀과 교착상태 그리고 해결</h4>\n<p><code class=\"language-text\">ExecutorService.submit</code> 는 병렬로 평가할 행위(<code class=\"language-text\">Callable</code>)을 스레드 풀에게 병렬처리를 위임하는 방향으로 구현하는 것을 대부분 생각할 것이다. 그러나 고정된 크기의 스레드 풀을 사용하는 <code class=\"language-text\">ExecutorService</code> 구현은 Deadlock에 빠질 수 있다.</p>\n<p>만약 스레드 풀의 최대 스레드 개수가 1이라고 할 때, 아래와 같은 코드는 잘 동작할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> lazyUnit<span class=\"token punctuation\">(</span><span class=\"token number\">42</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> S <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span>newFixedThreadPool<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nprintln<span class=\"token punctuation\">(</span>\n    Par<span class=\"token punctuation\">.</span>equal<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> fork<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>문제는 fork를 호출할 때 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> fork<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    es <span class=\"token keyword\">=></span> es<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Callable<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">def</span> call <span class=\"token operator\">=</span> a<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">fork(a)</code>를 호출하면 <code class=\"language-text\">es =&gt; es.submit(new Callable[A] {...})</code> 를 호출하게 될 것이다. (1)</li>\n<li>그런데 <code class=\"language-text\">new Callable[A] { ... }</code> 의 구현을 살펴보면 <code class=\"language-text\">a(es)</code> 를 호출하여 <code class=\"language-text\">ExecutorService</code> 를 넘겨서 만들어진 <code class=\"language-text\">UnitFutre(a)</code> 를 또 <code class=\"language-text\">fork()</code>에 인자로 넘겨서 실행하게 된다. (2)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> unit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> UnitFuture<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> lazyUnit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fork<span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>즉 fork가 두 번 호출되게 되며, 스레드 풀에게 (1)의 Callable을 실행하라고 전달하여 스레드를 선점하였는데 (2)를 또 실행하라고 Callable을 만들어서 스레드 플에게 전달하면 스레드가 이미 없기 때문에 실행이 안되는 상황이 발생한다. 즉 (1)은 병렬 실행 중이지만 끝날 때까지 기다리게 되고, (2)는 스레드가 이미 모두 선점되어 있기 때문에 시작조차 못해서 끝날 수도 없게 된다.</li>\n<li>이걸 바로 교착상태에 빠졌다고 말한다.</li>\n</ul>\n<p>이걸 어떻게 해결할까?</p>\n<h4>6. Actor 등장: non-blocking 형태의 Par 구현하기</h4>\n<p>위 문제의 근본적인 문제는 <code class=\"language-text\">Par.get</code> 이 호출되면 끝날 때까지 기다리게 된다는게 문제이다. (<code class=\"language-text\">Par.get</code> 함수가 blocking 함수이다) 다시 말하면 <code class=\"language-text\">Par.get</code> 의 호출이 일어나게 되면 병렬처리의 결과가 나올 때까지 기다리게 되며, 그 다음으로 넘어갈 수가 없다.</p>\n<p><u>따라서 해결은 Non-blocking 으로만 동작하는 Par을 구현하면 된다.</u> (정말 그럴까? 조금 의심스럽지만 도무지 상상이 안간다…)</p>\n<p><u>그리고 fork와 map2에서 Blocking 함수(ex: <code class=\"language-text\">Par.get</code> 등등)를 호출하지 않게 하면 된다.</u></p>\n<p>fork, map2에서 블로킹 함수 <code class=\"language-text\">Par.get</code>을 호출하는 것을 피하기 위해서는 데이터를 가져오는 행위를 콜백으로 감싸서 fork와 map2에서 호출하게 하자. 그러기 위해서는 <code class=\"language-text\">Par.unit</code> 부터 콜백 함수를 호출하는 방식으로 변경되어야 한다.</p>\n<h4>fork()</h4>\n<h5>AS-IS</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> unit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    \t<span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> UnitFuture<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> UnitFuture<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>get<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">def</span> isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">def</span> get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span><span class=\"token punctuation\">,</span> units<span class=\"token operator\">:</span> TimeUnit<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> get\n        <span class=\"token keyword\">def</span> isCancelled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">def</span> cancel<span class=\"token punctuation\">(</span>evenIfRunning<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>TO-BE</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> unit<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n        <span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token keyword\">new</span> Future<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>cb<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> cb<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>map2()</h4>\n<h5>AS-IS</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> map2<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> C<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> af <span class=\"token operator\">=</span> a<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> bf <span class=\"token operator\">=</span> b<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span>\n            UnitFuture<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>af<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">,</span> bf<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>TO-BE</h5>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> Par <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> map2<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> C<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Par<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">fpinscala<span class=\"token punctuation\">.</span>parallelism</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>AtomicInteger<span class=\"token punctuation\">,</span> AtomicReference<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>Callable<span class=\"token punctuation\">,</span>ExecutorService<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">annotation<span class=\"token punctuation\">.</span>tailrec</span>\n\n<span class=\"token comment\">/*\n * Implementation is taken from `scalaz` library, with only minor changes. See:\n *\n * https://github.com/scalaz/scalaz/blob/scalaz-seven/concurrent/src/main/scala/scalaz/concurrent/Actor.scala\n *\n * This code is copyright Andriy Plokhotnyuk, Runar Bjarnason, and other contributors,\n * and is licensed using 3-clause BSD, see LICENSE file at:\n *\n * https://github.com/scalaz/scalaz/blob/scalaz-seven/etc/LICENCE\n */</span>\n\n<span class=\"token comment\">/**\n * Processes messages of type `A`, one at a time. Messages are submitted to\n * the actor with the method `!`. Processing is typically performed asynchronously,\n * this is controlled by the provided `strategy`.\n *\n * Memory consistency guarantee: when each message is processed by the `handler`, any memory that it\n * mutates is guaranteed to be visible by the `handler` when it processes the next message, even if\n * the `strategy` runs the invocations of `handler` on separate threads. This is achieved because\n * the `Actor` reads a volatile memory location before entering its event loop, and writes to the same\n * location before suspending.\n *\n * Implementation based on non-intrusive MPSC node-based queue, described by Dmitriy Vyukov:\n * [[http://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue]]\n *\n * @see scalaz.concurrent.Promise for a use case.\n *\n * @param handler  The message handler\n * @param onError  Exception handler, called if the message handler throws any `Throwable`.\n * @param strategy Execution strategy, for example, a strategy that is backed by an `ExecutorService`\n * @tparam A       The type of messages accepted by this actor.\n */</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> Actor<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>strategy<span class=\"token operator\">:</span> Strategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>handler<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">,</span> onError<span class=\"token operator\">:</span> Throwable <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">self</span> <span class=\"token keyword\">=></span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> AtomicReference<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> suspended <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> AtomicInteger<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> AtomicReference<span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">/** Alias for `apply` */</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Node<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    head<span class=\"token punctuation\">.</span>getAndSet<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lazySet<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    trySchedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/** Pass the message `a` to the mailbox of this actor */</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span> <span class=\"token operator\">!</span> a\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> contramap<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> B <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Actor<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">new</span> Actor<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!</span> f<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> onError<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> trySchedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suspended<span class=\"token punctuation\">.</span>compareAndSet<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> schedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> schedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> act<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span>get\n    <span class=\"token keyword\">val</span> n <span class=\"token operator\">=</span> batchHandle<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n ne t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      n<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n      tail<span class=\"token punctuation\">.</span>lazySet<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n      schedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      suspended<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>get ne <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> trySchedule<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@tailrec</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> batchHandle<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Node<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Node<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> n <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>get\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n ne <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        handler<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> ex<span class=\"token operator\">:</span> Throwable <span class=\"token keyword\">=></span> onError<span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> batchHandle<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> t\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> Node<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> A <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">.</span>asInstanceOf<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> AtomicReference<span class=\"token punctuation\">[</span>Node<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">object</span> Actor <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/** Create an `Actor` backed by the given `ExecutorService`. */</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>handler<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">,</span> onError<span class=\"token operator\">:</span> Throwable <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Actor<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">new</span> Actor<span class=\"token punctuation\">(</span>Strategy<span class=\"token punctuation\">.</span>fromExecutorService<span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> onError<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Provides a function for evaluating expressions, possibly asynchronously.\n * The `apply` function should typically begin evaluating its argument\n * immediately. The returned thunk can be used to block until the resulting `A`\n * is available.\n */</span>\n<span class=\"token keyword\">trait</span> Strategy <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> Strategy <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/**\n   * We can create a `Strategy` from any `ExecutorService`. It's a little more\n   * convenient than submitting `Callable` objects directly.\n   */</span>\n  <span class=\"token keyword\">def</span> fromExecutorService<span class=\"token punctuation\">(</span>es<span class=\"token operator\">:</span> ExecutorService<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Strategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Strategy <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> f <span class=\"token operator\">=</span> es<span class=\"token punctuation\">.</span>submit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span> Callable<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">def</span> call <span class=\"token operator\">=</span> a<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> f<span class=\"token punctuation\">.</span>get\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * A `Strategy` which begins executing its argument immediately in the calling thread.\n   */</span>\n  <span class=\"token keyword\">def</span> sequential<span class=\"token operator\">:</span> Strategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Strategy <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> A<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> A <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> r <span class=\"token operator\">=</span> a\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> r\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"스칼라 스터디 Day06 - 순수 함수적 병렬성","date":"2019-01-07 01:00:23","tags":["scala","functional programming"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20190107-scala-and-functional-programming-day06/","previous":{"fields":{"slug":"/20181226-scala-and-functional-programming-day05/"},"frontmatter":{"title":"스칼라 스터디 Day05 - 순수 함수적 상태"}},"next":{"fields":{"slug":"/20190129-scala-and-functional-programming-day07/"},"frontmatter":{"title":"스칼라 스터디 Day07 - 속성 기반 검사"}}}}