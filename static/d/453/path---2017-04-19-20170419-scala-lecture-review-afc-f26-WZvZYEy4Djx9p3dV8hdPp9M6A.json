{"data":{"site":{"siteMetadata":{"title":"Icednut's Notes","author":"Will Lee","siteUrl":"https://icednut.github.io"}},"markdownRemark":{"id":"7d688419-46de-583f-a886-78b77c06d800","excerpt":"목차Scala 환경 구축하기Scala 변수, 상수, 타입함수와 메소드Lab 1제어구조함수 정의Lab 2Arrays, Maps and TuplesLab 3.1 Remove First NegativeLab 3.2 Word CountLab 3.3 GroupingLab 3.…","html":"<h1>목차</h1>\n<ol>\n<li>Scala 환경 구축하기</li>\n<li>Scala 변수, 상수, 타입</li>\n<li>함수와 메소드</li>\n<li>Lab 1</li>\n<li>제어구조</li>\n<li>함수 정의</li>\n<li>Lab 2</li>\n<li>Arrays, Maps and Tuples</li>\n<li>Lab 3.1 Remove First Negative</li>\n<li>Lab 3.2 Word Count</li>\n<li>Lab 3.3 Grouping</li>\n<li>Lab 3.4 Partitions and Zips</li>\n<li>Classes and Objects</li>\n<li>Lab 4.1 Time</li>\n<li>Lab 4.2 Uniform Access</li>\n<li>Lab 4.3 Uniform Access (con’t)</li>\n<li>Lab 4.4 Operators</li>\n<li>Packages, Inheritnce, Traits</li>\n<li>Functional Programming</li>\n<li>9.1 Function</li>\n<li>9.2 Closures</li>\n<li>9.3 Currying</li>\n<li>Pattern Matching</li>\n<li>Case Class</li>\n</ol>\n<hr>\n<h2>1. Scala 환경 구축</h2>\n<ul>\n<li>JDK 1.8 설치</li>\n<li>SBT 설치</li>\n<li>Scala 설치</li>\n<li>IntelliJ 설치 (스칼라가 처음라면 Scala IDE for Eclise)</li>\n</ul>\n<h2>2. Scala 변수, 상수, 타입</h2>\n<ul>\n<li>변수는 var</li>\n<li>상수는 val로 선언</li>\n<li>\n<p>Scala에서 데이터 타입의 종류</p>\n<ul>\n<li>자바와 비슷 Byte, Short, Int, Long, Float, Double, Char, String, Char, Boolean</li>\n<li>단 자바에서는 없는 Unit, Null 이라는 타입도 있음</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// lesson1.sc</span>\n<span class=\"token keyword\">object</span> Lesson1 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">var</span> greeting<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endcodeblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> codeblock lesson2<span class=\"token punctuation\">.</span>sc <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">object</span> Lesson2 <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1.</span>to<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 ~ 10까지 값을 갖고 있는 배열이 만들어짐</span>\n  <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>intersect<span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lo</span>\n  <span class=\"token string\">\"Hello\"</span> intersect <span class=\"token string\">\"World\"</span>\n\n  <span class=\"token number\">1.</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n\n  <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token comment\">// i++ 이거는 안됨</span>\n  i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>3. 함수와 메소드</h2>\n<ul>\n<li>\n<p>파라미터 없는 함수 호출은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span>distinct</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>\n<p>스트링에 아래와 같이 함수 이름 없이 호출하면 apply 함수가 실행 되는 것과 같음</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h4>Lab 1</h4>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// lesson4.sc</span>\n<span class=\"token keyword\">object</span> Lesson4 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>math</span><span class=\"token punctuation\">.</span>_\n\n  sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token number\">1.</span>to<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token number\">6.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>4. 제어구조</h2>\n<ul>\n<li>\n<p>if 표현식은 값을 반환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"positive\"</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// Type is Any</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<p>if (x > 0) 1 // Missing else… else일 때는 Unit을 반환\nif (x > 0) 1 else () // 위 수식과 이 수식은 같음</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">- 변수나 상수 선언 시 아래와 같이 스코프 지정이 가능\n```scala\nval distance = {\n  import scala.math._\n  val dx = x - x0\n  val dy = y - y0\n  sqrt(dx * dx + dy * dy)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\n<p>기본적인 For Loop</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">&lt;-</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// multiple generator</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>For Loop Guard</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">&lt;-</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 한 글자씩 Loop</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">3</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> j<span class=\"token punctuation\">)</span> print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h2>5. 함수 정의</h2>\n<ul>\n<li>\n<p>함수 정의 시 함수 몸통 앞에 ’=‘를 붙이고 안붙이고 차이는 뭘까?</p>\n<ul>\n<li>반환값이 있을 때 ’=‘를 붙인다.</li>\n<li>반환값이 없을 때는 ’=‘를 붙이지 않는다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> abs<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> x <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span>x\n<span class=\"token keyword\">def</span> fac<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> n <span class=\"token operator\">*</span> fac<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> box<span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> border <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\"--\\n\"</span>\n  println<span class=\"token punctuation\">(</span>border <span class=\"token operator\">+</span> <span class=\"token string\">\"|\"</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"|\\n\"</span> <span class=\"token operator\">+</span> border<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>아래와 같이 반환값이 있는 함수를 작성하고 싶은데 =를 안붙이면 컴파일 오류가 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> fac<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to n<span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> i\n  r\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Named argument</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> decorate<span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> str <span class=\"token operator\">+</span> right\n\ndecorate<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token string\">\"]&lt;&lt;&lt;\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Hello]&lt;&lt;&lt;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>다항 파라미터는 파라미터 데이터타입 뒤에 *을 붙여준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> sum<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>arg <span class=\"token keyword\">&lt;-</span> args<span class=\"token punctuation\">)</span> result <span class=\"token operator\">+=</span> arg\n  result\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>위 메소드의 파라미터에 Seq[Int]를 다항 파라미터로 변환하여 넣고 싶을 경우 아래와 같이 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> s <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> to <span class=\"token number\">5</span><span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1 to 5의 반환값은 Seq[Int]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>What is that _? _ is joker</li>\n</ul>\n<h4>Lab 2. 함수 정의 연습하기</h4>\n<p>계속…</p>\n<h2>6. Array, Maps and Tuples</h2>\n<ul>\n<li>Array.sum</li>\n<li>ArrayBuffer.max</li>\n<li>ArrayBuffer.sorted</li>\n<li>Array.reverse</li>\n<li>Array.mkString() // Array의 내용물을 스트링으로 출력 (예쁘게)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">val</span> c <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>                     <span class=\"token comment\">//> c  : Array[Int] = Array(2, 3, 5, 7, 8, 11)</span>\n  <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>elem <span class=\"token keyword\">&lt;-</span> c <span class=\"token keyword\">if</span> elem <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span> <span class=\"token operator\">%</span> elem\n                                                  <span class=\"token comment\">//> result  : Array[Int] = Array(2, 2, 2, 2)</span>\n\n  <span class=\"token keyword\">val</span> mySong <span class=\"token operator\">=</span> ArrayBuffer<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"had\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"little\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lamb\"</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> mySong  : scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer(Mary, h</span>\n                                                  <span class=\"token comment\">//| ad, a, little, lamb)</span>\n  mySong<span class=\"token punctuation\">.</span>max                                      <span class=\"token comment\">//> res11: String = little</span>\n  mySong<span class=\"token punctuation\">.</span>sorted                                   <span class=\"token comment\">//> res12: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer(Mary, a, h</span>\n                                                  <span class=\"token comment\">//| ad, lamb, little)</span>\n  Array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sorted                           <span class=\"token comment\">//> res13: Array[Int] = Array(1, 4, 5, 7)</span>\n  Array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reverse                          <span class=\"token comment\">//> res14: Array[Int] = Array(5, 4, 7, 1)</span>\n  Array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString<span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">//> res15: String = [1, 2, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>6.1 Maps</h3>\n<ul>\n<li>Map.getOrElse 메소드는 key에 해당하는 value를 못찾을 경우 기본 값을 반환한다.</li>\n<li>updating map을 하고 싶을 땐 그냥 Map(“Bob”) = 20</li>\n<li>append와 remove는 연산자 메소드를 통해서 가능 (+=, -=)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">val</span> scores <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cindy\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> scores  : scala.collection.immutable.Map[String,Int] = Map(Alice -> 20, Bob -</span>\n                                                  <span class=\"token comment\">//| > 10, Cindy -> 8)</span>\n  scores<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">291</span> <span class=\"token comment\">// immutable map이라서 value 값을 바꿀 수 없음</span>\n\n  <span class=\"token keyword\">val</span> mscores <span class=\"token operator\">=</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> mscores  : scala.collection.mutable.Map[String,Int] = Map(Alice -> 10)</span>\n  <span class=\"token keyword\">val</span> bobsScore <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">//> bobsScore  : Int = 10</span>\n  <span class=\"token keyword\">val</span> bogsScore <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bog\"</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">//> java.util.NoSuchElementException: key not found: Bog</span>\n                                                  <span class=\"token comment\">//| \tat scala.collection.MapLike$class.default(MapLike.scala:228)</span>\n                                                  <span class=\"token comment\">//| \tat scala.collection.AbstractMap.default(Map.scala:59)</span>\n                                                  <span class=\"token comment\">//| \tat scala.collection.MapLike$class.apply(MapLike.scala:141)</span>\n                                                  <span class=\"token comment\">//| \tat scala.collection.AbstractMap.apply(Map.scala:59)</span>\n                                                  <span class=\"token comment\">//| \tat Lesson5$$anonfun$main$1.apply$mcV$sp(Lesson5.scala:6)</span>\n                                                  <span class=\"token comment\">//| \tat org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe</span>\n                                                  <span class=\"token comment\">//| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)</span>\n                                                  <span class=\"token comment\">//| \tat org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W</span>\n                                                  <span class=\"token comment\">//| orksheetSupport.scala:65)</span>\n                                                  <span class=\"token comment\">//| \tat org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor</span>\n                                                  <span class=\"token comment\">//| ksheetSupport.scala:75)</span>\n                                                  <span class=\"token comment\">//| \tat Lesson5$.main(Lesson5.scala:1)</span>\n                                                  <span class=\"token comment\">//| \tat Lesson5.main(Lesson5.scala)</span>\n\n  <span class=\"token keyword\">val</span> bogsDefaultScore <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bog\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> bogsDefaultScore  : Int = 0</span>\n\n\t<span class=\"token keyword\">val</span> mbogScore <span class=\"token operator\">=</span> mscores<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bog\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//> mbogScore  : Boolean = false</span>\n\n\tmscores<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\tmscores                                   <span class=\"token comment\">//> res0: scala.collection.mutable.Map[String,Int] = Map(Alice -> 100)</span>\n\n\t<span class=\"token keyword\">val</span> newScores2 <span class=\"token operator\">=</span> scores <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Fred\"</span> <span class=\"token operator\">-></span> <span class=\"token number\">91</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//> newScores2  : scala.collection.immutable.Map[String,Int] = Map(Alice -> 20, </span>\n                                                  <span class=\"token comment\">//| Bob -> 10, Cindy -> 8, Fred -> 91)</span>\n\t<span class=\"token keyword\">val</span> newScores3 <span class=\"token operator\">=</span> newScores2 <span class=\"token operator\">-</span> <span class=\"token string\">\"Alice\"</span>     <span class=\"token comment\">//> newScores3  : scala.collection.immutable.Map[String,Int] = Map(Bob -> 10, Ci</span>\n                                                  <span class=\"token comment\">//| ndy -> 8, Fred -> 91)</span>\n\t\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> scores<span class=\"token punctuation\">)</span> println<span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">\" has score \"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> Alice has score 20</span>\n                                                  <span class=\"token comment\">//| Bob has score 10</span>\n                                                  <span class=\"token comment\">//| Cindy has score 8</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> scores<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>       <span class=\"token comment\">//> res1: scala.collection.immutable.Map[Int,String] = Map(20 -> Alice, 10 -> Bo</span>\n                                                  <span class=\"token comment\">//| b, 8 -> Cindy)</span>\n\t\n\tscores<span class=\"token punctuation\">.</span>keySet                             <span class=\"token comment\">//> res2: scala.collection.immutable.Set[String] = Set(Alice, Bob, Cindy)</span>\n\tscores<span class=\"token punctuation\">.</span>values                             <span class=\"token comment\">//> res3: Iterable[Int] = MapLike(20, 10, 8)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>6.2 Tuples</h3>\n<ul>\n<li>Map과 비슷하지만 서로다른 자료형의 데이터를 묶을 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> myTuples <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> pie <span class=\"token operator\">=</span> myTuples<span class=\"token punctuation\">.</span>_2\n\n<span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> third<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 3.1 Remove First Negative</h4>\n<ul>\n<li>ArrayBuffer가 주어졌을 때 양수 값은 모두 출력 &#x26; 첫 번째 음수만 출력하고 나머지 음수들은 제거하는 함수 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">val</span> myArray <span class=\"token operator\">=</span> ArrayBuffer<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> myRmNeg<span class=\"token punctuation\">(</span>targetArray<span class=\"token operator\">:</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t  <span class=\"token keyword\">var</span> limit <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span>length\n\t  <span class=\"token keyword\">var</span> isNegativeFound<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t  <span class=\"token keyword\">val</span> newMyArray <span class=\"token operator\">=</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  \t<span class=\"token keyword\">val</span> num <span class=\"token operator\">=</span> targetArray<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n\t\n\t  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isNegativeFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  \t\t\tisNegativeFound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t  \t\t\tnewMyArray <span class=\"token operator\">+=</span> num\n\t  \t\t<span class=\"token punctuation\">}</span>\n\t  \t<span class=\"token punctuation\">}</span>\n\t  \t<span class=\"token keyword\">else</span> newMyArray <span class=\"token operator\">+=</span> num\n\t  \t\n\t  \tindex <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t  <span class=\"token punctuation\">}</span>\n\t  newMyArray\n  <span class=\"token punctuation\">}</span>                                               <span class=\"token comment\">//> myRmNeg: (targetArray: scala.collection.mutable.ArrayBuffer[Int])scala.colle</span>\n                                                  <span class=\"token comment\">//| ction.mutable.ArrayBuffer[Int]</span>\n  \n  <span class=\"token keyword\">def</span> myRmNeg2<span class=\"token punctuation\">(</span>targetArray<span class=\"token operator\">:</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">val</span> targetArraySize<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> targetArray<span class=\"token punctuation\">.</span>length\n\n  \t<span class=\"token comment\">// 음수를 가진 인덱스 번호만 끄집어 낸다.</span>\n  \t<span class=\"token keyword\">var</span> negativeIndexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until targetArraySize <span class=\"token keyword\">if</span> targetArray<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> index\n\t\tnegativeIndexArray <span class=\"token operator\">=</span> negativeIndexArray<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reverse\n\n  \t<span class=\"token keyword\">val</span> filterdArray <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until targetArray<span class=\"token punctuation\">.</span>length <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>negativeIndexArray<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> targetArray<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n  \tArrayBuffer<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span><span class=\"token operator\">=</span> filterdArray\n  <span class=\"token punctuation\">}</span>                                               <span class=\"token comment\">//> myRmNeg2: (targetArray: scala.collection.mutable.ArrayBuffer[Int])scala.col</span>\n                                                  <span class=\"token comment\">//| lection.mutable.ArrayBuffer[Int]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 3.2 Word Count</h4>\n<ul>\n<li>파일을 읽어서 특정 단어가 몇 번 나왔는지 세보는 코드 작성하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">\t<span class=\"token keyword\">def</span> wordCount<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span>Source\n\t  <span class=\"token keyword\">val</span> count <span class=\"token operator\">=</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t  \n\t  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>line <span class=\"token keyword\">&lt;-</span> Source<span class=\"token punctuation\">.</span>fromFile<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getLines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>word <span class=\"token keyword\">&lt;-</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    count<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t    <span class=\"token punctuation\">}</span>\n\t  <span class=\"token punctuation\">}</span>\n\t  count\n\t<span class=\"token punctuation\">}</span>                                         <span class=\"token comment\">//> wordCount: (filename: String)scala.collection.mutable.Map[String,Int]</span>\n\t\n\t<span class=\"token keyword\">def</span> wordCountWithImmutableMap<span class=\"token punctuation\">(</span>filename<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span>Source\n\t  <span class=\"token keyword\">var</span> countMap <span class=\"token operator\">=</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t  \n\t  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>line <span class=\"token keyword\">&lt;-</span> Source<span class=\"token punctuation\">.</span>fromFile<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getLines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>word <span class=\"token keyword\">&lt;-</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token keyword\">val</span> wordCount <span class=\"token operator\">=</span> countMap<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\t    countMap <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>word <span class=\"token operator\">-></span> wordCount<span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">}</span>\n\t  <span class=\"token punctuation\">}</span>\n\t  countMap\n\t<span class=\"token punctuation\">}</span>                                         <span class=\"token comment\">//> wordCountWithImmutableMap: (filename: String)scala.collection.immutable.Map[</span>\n                                                  <span class=\"token comment\">//| String,Int]</span>\n\n\t<span class=\"token keyword\">val</span> filename <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\\\Users\\\\Zotac023\\\\Desktop\\\\SCALA\\\\alice.txt\"</span>\n                                                  <span class=\"token comment\">//> filename  : String = C:\\Users\\Zotac023\\Desktop\\SCALA\\alice.txt</span>\n\t<span class=\"token keyword\">val</span> countMap <span class=\"token operator\">=</span> wordCount<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//> countMap  : scala.collection.mutable.Map[String,Int] = Map(talk: -> 1, passi</span>\n                                                  <span class=\"token comment\">//| on, -> 2, Visit -> 1, etext92 -> 1, follow -> 1, OTHERWISE -> 1, provisions </span>\n                                                  <span class=\"token comment\">//| -> 1, machines, -> 1, sighing -> 2, is--\"Oh, -> 1, sister -> 5, curled -> 2,</span>\n                                                  <span class=\"token comment\">//|  digging -> 2, absurd, -> 1, mouths. -> 1, `When -> 3, rose-tree, -> 2, plea</span>\n                                                  <span class=\"token comment\">//| sant -> 1, can--' -> 1, flapper -> 1, dream. -> 1, morning, -> 2, requires -</span>\n                                                  <span class=\"token comment\">//| > 1, worm. -> 1, `Well! -> 2, lessons -> 4, Files -> 1, `Boots -> 1, `we -> </span>\n                                                  <span class=\"token comment\">//| 3, expense -> 1, Shakespeare, -> 1, officers, -> 1, Long -> 1, RED -> 1, shr</span>\n                                                  <span class=\"token comment\">//| ink -> 1, Caterpillar, -> 2, nasty, -> 1, intellectual -> 1, hard -> 8, [Ori</span>\n                                                  <span class=\"token comment\">//| ginally -> 1, welcome -> 1, off.' -> 1, RIGHT -> 1, Rabbit's -> 3, carry -> </span>\n                                                  <span class=\"token comment\">//| 1, opening -> 3, matter,' -> 1, (luckily -> 1, chimney!' -> 1, `As -> 3, jur</span>\n                                                  <span class=\"token comment\">//| or -> 1, [get -> 1, grand, -> 1, did!' -> 1, medium -> 3, asking! -> 1, gay </span>\n                                                  <span class=\"token comment\">//| -> 1, bawled -> 1, advance -> 2, `YOU'D -> 1, THAT -> 6, Free -> 1, thunders</span>\n                                                  <span class=\"token comment\">//| torm. -> 1, mustard-mine</span>\n                                                  <span class=\"token comment\">//| Output exceeds cutoff limit.</span>\n\n\t<span class=\"token keyword\">val</span> countMap2 <span class=\"token operator\">=</span> wordCountWithImmutableMap<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> countMap2  : scala.collection.immutable.Map[String,Int] = Map(herself. -> 8,</span>\n                                                  <span class=\"token comment\">//|  Hatter -> 24, sneezed -> 1, forgotten -> 6, of. -> 1, Rabbit-Hole -> 1, rat</span>\n                                                  <span class=\"token comment\">//| e -> 4, pepper -> 5, submitted -> 1, NOT!' -> 1, `Fifteenth,' -> 1, like!' -</span>\n                                                  <span class=\"token comment\">//| > 1, remarked -> 1, lost: -> 1, croquet.' -> 2, est -> 1, room!' -> 2, sighi</span>\n                                                  <span class=\"token comment\">//| ng. -> 1, Bill!' -> 1, prizes.' -> 1, (a -> 1, accident -> 1, Cat,' -> 1, be</span>\n                                                  <span class=\"token comment\">//| !' -> 1, camomile -> 1, ftp -> 2, bats, -> 1, conversations -> 1, Down, -> 2</span>\n                                                  <span class=\"token comment\">//| , `Why -> 7, way? -> 1, cakes,' -> 1, `Nonsense!' -> 1, used -> 14, eye -> 4</span>\n                                                  <span class=\"token comment\">//| , whisper.) -> 1, PUNITIVE -> 1, Owl -> 2, pleased. -> 1, up.' -> 2, then?' </span>\n                                                  <span class=\"token comment\">//| -> 1, `Keep -> 1, instance, -> 4, READ -> 1, `Dear, -> 1, $4 -> 1, IN -> 2, </span>\n                                                  <span class=\"token comment\">//| way?', -> 1, II -> 1, Still -> 1, conversion -> 1, Please -> 2, At -> 8, dee</span>\n                                                  <span class=\"token comment\">//| ply. -> 1, \"Let -> 1, shelves -> 1, locked; -> 1, beautiful -> 8, mustard-mi</span>\n                                                  <span class=\"token comment\">//| ne -> 1, leaders, -> 1, `Don't -> 4, does. -> 1, timidly -> 2, altogether -></span>\n                                                  <span class=\"token comment\">//|  1, writing -> 4, Duches</span>\n                                                  <span class=\"token comment\">//| Output exceeds cutoff limit.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 3.3 Grouping</h4>\n<ul>\n<li>문자열 배열에서 길이가 같은 문자열끼리 묶는 코드 작성하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">val</span> words <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"had\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"little\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lamb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"its\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fleece\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"was\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"as\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"snow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"and\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"everywhere\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"that\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"went\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"the\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lamb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"was\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sure\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"go\"</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> words  : Array[String] = Array(Mary, had, a, little, lamb, its, fleece, was,</span>\n                                                  <span class=\"token comment\">//|  white, as, snow, and, everywhere, that, Mary, went, the, lamb, was, sure, t</span>\n                                                  <span class=\"token comment\">//| o, go)</span>\n\n\twords<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                 <span class=\"token comment\">//> res0: scala.collection.immutable.Map[Int,Array[String]] = Map(5 -> Array(whi</span>\n                                                  <span class=\"token comment\">//| te), 10 -> Array(everywhere), 1 -> Array(a), 6 -> Array(little, fleece), 2 -</span>\n                                                  <span class=\"token comment\">//| > Array(as, to, go), 3 -> Array(had, its, was, and, the, was), 4 -> Array(Ma</span>\n                                                  <span class=\"token comment\">//| ry, lamb, snow, that, Mary, went, lamb, sure))</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 3.4 Partitions and Zips</h4>\n<ul>\n<li>Lab 3.1 문제를 Array의 partition 메소드를 사용해서 풀기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">.</span>partition<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>isUpper<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">//> res0: (String, String) = (NY,ew ork)</span>\n  \n  <span class=\"token keyword\">val</span> symbols <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">//> symbols  : Array[String] = Array(&lt;, -, >)</span>\n  <span class=\"token keyword\">val</span> counts <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">//> counts  : Array[Int] = Array(2, 10, 2)</span>\n  <span class=\"token keyword\">val</span> pairs <span class=\"token operator\">=</span> symbols<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">//> pairs  : Array[(String, Int)] = Array((&lt;,2), (-,10), (>,2))</span>\n  \n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable</span><span class=\"token punctuation\">.</span>ArrayBuffer\n  <span class=\"token keyword\">val</span> myArray <span class=\"token operator\">=</span> ArrayBuffer<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> myArray  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 6, 7, </span>\n                                                  <span class=\"token comment\">//| 3, -4, 8, -3, -5, 6, 7, -2, 9, -1)</span>\n  \n  <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>positiveArray<span class=\"token punctuation\">,</span> negativeArray<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span>partition<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                                                  <span class=\"token comment\">//> positiveArray  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, </span>\n                                                  <span class=\"token comment\">//| 6, 7, 3, 8, 6, 7, 9)</span>\n                                                  <span class=\"token comment\">//| negativeArray  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(-4,</span>\n                                                  <span class=\"token comment\">//|  -3, -5, -2, -1)</span>\n\n\t<span class=\"token keyword\">val</span> answer <span class=\"token operator\">=</span> positiveArray                <span class=\"token comment\">//> answer  : scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(3, 6, 7, 3</span>\n                                                  <span class=\"token comment\">//| , 8, 6, 7, 9)</span>\n\tanswer <span class=\"token operator\">+=</span> negativeArray<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">//> res1: Lesson9.answer.type = ArrayBuffer(3, 6, 7, 3, 8, 6, 7, 9, -4)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>7. Class, Object, Companion Object</h2>\n<ul>\n<li>Class의 멤버 변수를 val로 선언하면 immutable, var로 선언하면 mutable</li>\n<li>val or var로 했느냐에 따라 getter, setter를 쓸 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">class</span> myString<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> jString<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> extraData <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  \t<span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span> f<span class=\"token string\">\"${jString}${extraData}\"</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">object</span> myString <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>base<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> extras<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">val</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> myString<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n  \t\ts<span class=\"token punctuation\">.</span>extraData <span class=\"token operator\">=</span> extras\n  \t\ts\n  \t<span class=\"token punctuation\">}</span>\n  \t\n  \t<span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>base<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> myString<span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  println<span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">//> helloworld</span>\n  println<span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">(</span><span class=\"token string\">\"Goodbye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">//> Goodbye</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">class</span> Pizza<span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> crustSize<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> crustType<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">def</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>crustSize<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>crustSize<span class=\"token punctuation\">,</span> Pizza<span class=\"token punctuation\">.</span>DEFAULT_CRUST_TYPE<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">}</span>\n  \t\n  \t<span class=\"token keyword\">def</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>crustType<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>Pizza<span class=\"token punctuation\">.</span>DEFAULT_CRUST_SIZE<span class=\"token punctuation\">,</span> crustType<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">}</span>\n  \t\n  \t<span class=\"token keyword\">def</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>Pizza<span class=\"token punctuation\">.</span>DEFAULT_CRUST_SIZE<span class=\"token punctuation\">,</span> Pizza<span class=\"token punctuation\">.</span>DEFAULT_CRUST_TYPE<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">}</span>\n  \t\n  \t<span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span> s<span class=\"token string\">\"A $crustSize inch pizza with a $crustType crust\"</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">object</span> Pizza <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">val</span> DEFAULT_CRUST_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n  \t<span class=\"token keyword\">val</span> DEFAULT_CRUST_TYPE <span class=\"token operator\">=</span> <span class=\"token string\">\"THIN\"</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">val</span> pz1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Pizza<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"THICK\"</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">//> pz1  : Lesson10.Pizza = A 14 inch pizza with a THICK crust</span>\n  <span class=\"token keyword\">val</span> pz2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Pizza<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>                         <span class=\"token comment\">//> pz2  : Lesson10.Pizza = A 16 inch pizza with a THIN crust</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">object</span> Accounts <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> lastNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  \t<span class=\"token keyword\">def</span> newUniqueNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  \t\tlastNumber <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t\tlastNumber\n  \t<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  Accounts                                        <span class=\"token comment\">//> res0: Lesson10.Accounts.type = Lesson10$$anonfun$main$1$Accounts$2$@68837a7</span>\n                                                  <span class=\"token comment\">//| 7</span>\n  Accounts<span class=\"token punctuation\">.</span>newUniqueNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> res1: Int = 1</span>\n  Accounts<span class=\"token punctuation\">.</span>newUniqueNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> res2: Int = 2</span>\n  Accounts<span class=\"token punctuation\">.</span>newUniqueNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> res3: Int = 3</span>\n  Accounts<span class=\"token punctuation\">.</span>newUniqueNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> res4: Int = 4</span>\n  Accounts<span class=\"token punctuation\">.</span>newUniqueNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> res5: Int = 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Scala App 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">object</span> HelloWorld <span class=\"token keyword\">extends</span> App <span class=\"token punctuation\">{</span>\n  println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>\n<p>Uniform Access Method</p>\n<ul>\n<li>클래스에 멤버변수로 선언했지만 해당 멤버 변수와 동일한 메소드를 선언했을 경우 해당 메소드가 호출됨</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token comment\">// Uniform Access Method Example</span>\n<span class=\"token keyword\">class</span> Point<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> theta <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">def</span> x <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> cos<span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 여기서 x를 유니폼 엑세스 메소드 라고 부르며, 이 메소드는 인자가 없다.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>scala에서 object 키워드가 붙은 코드는 싱글톤 객체를 말하며, 멤버 메소드는 static method이다.</li>\n<li>\n<p>Companion Object란 class와 object의 이름이 같은 것을 말하며, 서로간에 private feature에 접근이 가능하다.</p>\n<ul>\n<li>apply 메소드를 Companion Object에 선언하기도 한다.</li>\n</ul>\n</li>\n</ul>\n<h4>Lab 4.1 Time</h4>\n<ul>\n<li>시간을 나타내는 클래스 작성하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">class</span> Time<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> hours<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> minutes<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \n \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> hours <span class=\"token operator\">>=</span> <span class=\"token number\">24</span> <span class=\"token operator\">||</span> minutes <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> minutes <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"hour or minute format incorrect\"</span><span class=\"token punctuation\">)</span>\n \t\t<span class=\"token punctuation\">}</span>\n  \t\n  \t<span class=\"token keyword\">def</span> before<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Time<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">val</span> thisTimeMinutes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toMinutes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \t\t<span class=\"token keyword\">val</span> otherTimeMinutes <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>toMinutes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  \t\tthisTimeMinutes <span class=\"token operator\">&lt;</span> otherTimeMinutes\n  \t<span class=\"token punctuation\">}</span>\n \n  \t<span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span> f<span class=\"token string\">\"${hours}:${minutes}\"</span>\n  \t<span class=\"token keyword\">def</span> toMinutes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hours <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>ONE_HOUR_MINUTES <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutes\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">object</span> Time <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">val</span> ONE_HOUR_MINUTES <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\n  \t<span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> minutes<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time<span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">)</span>\n  \t<span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time<span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">)</span>\n  \t<span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">,</span> minutes<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  println<span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  println<span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \n  \n  <span class=\"token keyword\">val</span> t1 <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n  t1<span class=\"token punctuation\">.</span>minutes <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 4.2 Uniform Access</h4>\n<ul>\n<li>시간 클래스의 멤버를 val로 선언한 뒤 해당 멤버 변수는 uniform access method로 접근하기 (class의 멤버 변수에 아무것도 안쓰면 자동으로 val로 선언됨)</li>\n<li>이렇게 하면 getter 메소드를 정의한 것과 비슷한 효과를 볼 수 있다.</li>\n<li>아래 코드와 같이 멤버 변수 uniform access method를 통해 값을 변경하는 것은 컴파일 오류가 발생한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">class</span> Time2<span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> minutesSinceMidnight <span class=\"token operator\">=</span> h <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> m\n\n  \t<span class=\"token keyword\">def</span> hours <span class=\"token operator\">=</span> minutesSinceMidnight <span class=\"token operator\">/</span> <span class=\"token number\">60</span>\n  \t<span class=\"token keyword\">def</span> minutes <span class=\"token operator\">=</span> minutesSinceMidnight <span class=\"token operator\">%</span> <span class=\"token number\">60</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">object</span> Time2 <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">val</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time2<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> t2  : Lesson12.Time2 = Lesson12$Time2@61e4705b</span>\n  <span class=\"token comment\">// t2.minutes = 100</span>\n  t2<span class=\"token punctuation\">.</span>hours                                        <span class=\"token comment\">//> res0: Int = 12</span>\n  t2<span class=\"token punctuation\">.</span>minutes                                      <span class=\"token comment\">//> res1: Int = 45</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 4.3 Uniform Access (con’t)</h4>\n<ul>\n<li>위 문제에서 uniform access method를 통해서 setter 구현해보기</li>\n<li>아래 코드를 보면 메소드명 바로 뒤에 ’_=‘가 붙는 것을 볼 수가 있는데 이것은 ‘변수명 =‘과 같은 효과를 발휘한다.</li>\n<li>또한 setter uniform access method를 구현하려면 앞에서 작성했던 getter에 해당하는 uniform access method가 먼저 선언되어 있어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">class</span> Time3<span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> minutesSinceMidnight <span class=\"token operator\">=</span> h <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> m\n\n  \t<span class=\"token keyword\">def</span> hours <span class=\"token operator\">=</span> minutesSinceMidnight <span class=\"token operator\">/</span> <span class=\"token number\">60</span>\n\n  \t<span class=\"token keyword\">def</span> minutes <span class=\"token operator\">=</span> minutesSinceMidnight <span class=\"token operator\">%</span> <span class=\"token number\">60</span>\n\n  \t<span class=\"token keyword\">def</span> hours_<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>newHours<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newHours <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> newHours <span class=\"token operator\">>=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"hours is invalid\"</span><span class=\"token punctuation\">)</span>\n  \t\t<span class=\"token punctuation\">}</span>\n  \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">=</span> newHours <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutes\n  \t<span class=\"token punctuation\">}</span>\n\n  \t<span class=\"token keyword\">def</span> minutes_<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>newMinutes<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newMinutes <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> newMinutes <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"minutes is invalid\"</span><span class=\"token punctuation\">)</span>\n  \t\t<span class=\"token punctuation\">}</span>\n  \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hours <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> newMinutes\n  \t<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">val</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time3<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\n\n  t3<span class=\"token punctuation\">.</span>hours <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n  t3<span class=\"token punctuation\">.</span>minutes <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n  t3<span class=\"token punctuation\">.</span>hours\n  t3<span class=\"token punctuation\">.</span>minutes</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Lab 4.4 Operators</h4>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">object</span> Time4 <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> minutes<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time4<span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">class</span> Time4<span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> minutesSinceMidnight <span class=\"token operator\">=</span> h <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> m\n  \t\n  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> h <span class=\"token operator\">></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"hours is invalid\"</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> m <span class=\"token operator\">></span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"minutes is invalid\"</span><span class=\"token punctuation\">)</span>\n\n  \t<span class=\"token keyword\">def</span> hours <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">/</span> <span class=\"token number\">60</span>\n\n  \t<span class=\"token keyword\">def</span> minutes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">%</span> <span class=\"token number\">60</span>\n\n  \t<span class=\"token keyword\">def</span> hours_<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>newHours<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newHours <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> newHours <span class=\"token operator\">></span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"hours is invalid\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">=</span> newHours <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutes\n  \t<span class=\"token punctuation\">}</span>\n\n  \t<span class=\"token keyword\">def</span> minutes_<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>newMinutes<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newMinutes <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> newMinutes <span class=\"token operator\">></span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">(</span><span class=\"token string\">\"minutes is invalid\"</span><span class=\"token punctuation\">)</span>\n  \t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hours <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> newMinutes\n  \t<span class=\"token punctuation\">}</span>\n\n  \t<span class=\"token keyword\">def</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Time4<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minutesSinceMidnight <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>minutesSinceMidnight\n  \t\n  \t<span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> f<span class=\"token string\">\"${this.hours}:${this.minutes}\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">val</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Time4<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">//> t4  : Lesson14.Time4 = 12:45</span>\n\n  t4<span class=\"token punctuation\">.</span>hours <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n  t4<span class=\"token punctuation\">.</span>minutes <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n  t4                                              <span class=\"token comment\">//> res0: Lesson14.Time4 = 17:23</span>\n  \n  t4<span class=\"token punctuation\">.</span>hours                                        <span class=\"token comment\">//> res1: Int = 17</span>\n  t4<span class=\"token punctuation\">.</span>minutes                                      <span class=\"token comment\">//> res2: Int = 23</span>\n  \n  println<span class=\"token punctuation\">(</span>Time4<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Time4<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">//> true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>9. Functional Programming</h2>\n<h3>9.1 Function</h3>\n<ul>\n<li>Functions as value</li>\n<li>Anonymous Functions</li>\n<li>Functions with Function Parameters</li>\n<li>Functions that Produce Functions</li>\n<li>Parameter Inference</li>\n<li>Map, Filter, Reduce</li>\n</ul>\n<h3>9.2 Closures</h3>\n<ul>\n<li>양자가 얽힌 것 처럼 함수도 얽힐 수 있다.</li>\n<li>클로저를 사용하면 함수가 필요한 정보를 어딘가에서 정의해서 받아 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> otherscope <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> exec<span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      f<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> HelloWorld <span class=\"token keyword\">extends</span> App <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n  \n  <span class=\"token keyword\">def</span> sayHello<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"$hello, $name\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">val</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> otherscope<span class=\"token punctuation\">.</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  foo<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">)</span>\n  \n  hello <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕하세요\"</span>\n  foo<span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>위 코드를 보면 hello라는 변수가 다른 스코프에서 실행되더라도 hello 값을 참조하여 쓰고 있다. (런타임 시 클로저 변수가 참조됨)</li>\n</ul>\n<h3>9.3 Currying</h3>\n<ul>\n<li>함수의 반환값이 함수일 때 해당 함수 호출의 호출을 바로 하는 것</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">def</span> mul<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y                 <span class=\"token comment\">//> mul: (x: Int, y: Int)Int</span>\n  <span class=\"token keyword\">def</span> mulOneAtATime<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">*</span> y   <span class=\"token comment\">//> mulOneAtATime: (x: Int)Int => Int</span>\n  <span class=\"token comment\">//def mulOneAtATime(x: Int)(y: Int) = x * y</span>\n  \n  mulOneAtATime<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>                           <span class=\"token comment\">//> res0: Int = 200</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>10. Pattern Matching</h2>\n<ul>\n<li>var.isInstanceOf[Type] 보단 패턴 매칭이 더 best!</li>\n<li>주의: case의 변수명을 안쓰면 companion object를 지정하는 것처럼 보일 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">  <span class=\"token keyword\">val</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span>                                    <span class=\"token comment\">//> ch  : Char = -</span>\n  \n  <span class=\"token keyword\">val</span> sign <span class=\"token operator\">=</span> ch <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span> <span class=\"token keyword\">=></span> <span class=\"token number\">1</span>\n  \t<span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span> <span class=\"token keyword\">=></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  \t<span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>                                               <span class=\"token comment\">//> sign  : Int = -1</span>\n\n\t<span class=\"token keyword\">val</span> pair <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>                         <span class=\"token comment\">//> pair  : (Int, Int) = (0,1)</span>\n\n  <span class=\"token keyword\">val</span> st <span class=\"token operator\">=</span> pair <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token string\">\"0 ...\"</span>\n  \t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> y <span class=\"token operator\">+</span> <span class=\"token string\">\"0\"</span>\n  \t<span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token string\">\"neither is 0\"</span>\n  <span class=\"token punctuation\">}</span>                                               <span class=\"token comment\">//> st  : String = 0 ...</span>\n  \n  <span class=\"token keyword\">val</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>                        <span class=\"token comment\">//> arr  : Array[Int] = Array(9, 1, 1)</span>\n  \n  <span class=\"token keyword\">val</span> out <span class=\"token operator\">=</span> arr <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">case</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token string\">\"0\"</span>\n  \t<span class=\"token keyword\">case</span> Array<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y\n  \t<span class=\"token keyword\">case</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token string\">\"0 ...\"</span>\n  \t<span class=\"token keyword\">case</span> _ <span class=\"token keyword\">=></span> <span class=\"token string\">\"something else\"</span>\n  <span class=\"token punctuation\">}</span>                                               <span class=\"token comment\">//> out  : String = something else</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>11. Case Class</h2>\n<ul>\n<li>case class는 패턴매칭에 유용하게 쓰임</li>\n<li>case class는 자동으로 companion object가 만들어지며, 멤버 변수들은 자동으로 val로 선언됨</li>\n</ul>","frontmatter":{"title":"Scala 강의 요약","date":"2017-04-19 09:09:37","tags":["scala"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017/04/19/20170419-scala-lecture-review/","previous":{"fields":{"slug":"/2017/02/20/20170220-spring-transaction-part1-overview/"},"frontmatter":{"title":"Spring Transaction의 이해 Part1 - Trasaction AOP 설정과 Java Configuration"}},"next":{"fields":{"slug":"/2017/04/22/20170422-spring-camp-day01/"},"frontmatter":{"title":"스프링캠프 2017 첫째날 메모"}}}}